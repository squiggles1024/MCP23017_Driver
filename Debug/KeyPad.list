
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af38  0800af38  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800af38  0800af38  0001af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af40  0800af40  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af40  0800af40  0001af40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800af48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  20000164  0800b0ac  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  0800b0ac  00020d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f70a  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d9  00000000  00000000  0003f89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  00044278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00045d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d959  00000000  00000000  00047588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000232fb  00000000  00000000  00064ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3fa2  00000000  00000000  000881dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c17e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e4  00000000  00000000  0012c1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa84 	.word	0x0800aa84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800aa84 	.word	0x0800aa84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MCP23017_Init>:
 *@Params: Init Struct with desired settings, Device handle to initialize, a low level IO Driver struct
 *@Return: None
 *@Precondition: Init Struct should have desired settings
 *@Postcondition: Device struct will be intialized and ready to use
 **************************************//**************************************/
void MCP23017_Init(MCP23017_Init_Struct_t Settings, MCP23017_Handle_t *Dev, MCP23017_IO_Drv_t IO_Driver){
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	463c      	mov	r4, r7
 800058c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Dev->IO_Driver.Init = IO_Driver.Init;
 8000590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000592:	6a3b      	ldr	r3, [r7, #32]
 8000594:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = IO_Driver.DeInit;
 8000596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000598:	6a3b      	ldr	r3, [r7, #32]
 800059a:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = IO_Driver.ReadReg;
 800059c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800059e:	6a3b      	ldr	r3, [r7, #32]
 80005a0:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = IO_Driver.WriteReg;
 80005a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = IO_Driver.ioctl;
 80005a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.Init();
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4798      	blx	r3

	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings.Config,1) != MCP23017_Ok){
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	200a      	movs	r0, #10
 80005ba:	463a      	mov	r2, r7
 80005bc:	f102 010c 	add.w	r1, r2, #12
 80005c0:	2201      	movs	r2, #1
 80005c2:	4798      	blx	r3
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <MCP23017_Init+0x4e>
		_log(log_mcp23017, "Initialization: IOCON Write Failed");
 80005ca:	492e      	ldr	r1, [pc, #184]	; (8000684 <MCP23017_Init+0x100>)
 80005cc:	2005      	movs	r0, #5
 80005ce:	f000 fa97 	bl	8000b00 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings.Mode,2) != MCP23017_Ok){
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	2000      	movs	r0, #0
 80005d8:	4639      	mov	r1, r7
 80005da:	2202      	movs	r2, #2
 80005dc:	4798      	blx	r3
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <MCP23017_Init+0x68>
		_log(log_mcp23017, "Initialization: IODIR Write Failed");
 80005e4:	4928      	ldr	r1, [pc, #160]	; (8000688 <MCP23017_Init+0x104>)
 80005e6:	2005      	movs	r0, #5
 80005e8:	f000 fa8a 	bl	8000b00 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings.Polarity,2) != MCP23017_Ok){
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	2002      	movs	r0, #2
 80005f2:	463a      	mov	r2, r7
 80005f4:	1c91      	adds	r1, r2, #2
 80005f6:	2202      	movs	r2, #2
 80005f8:	4798      	blx	r3
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <MCP23017_Init+0x84>
		_log(log_mcp23017, "Initialization: IPOL Write Failed");
 8000600:	4922      	ldr	r1, [pc, #136]	; (800068c <MCP23017_Init+0x108>)
 8000602:	2005      	movs	r0, #5
 8000604:	f000 fa7c 	bl	8000b00 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings.IntEnable,2) != MCP23017_Ok){
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	2004      	movs	r0, #4
 800060e:	463a      	mov	r2, r7
 8000610:	1d11      	adds	r1, r2, #4
 8000612:	2202      	movs	r2, #2
 8000614:	4798      	blx	r3
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d003      	beq.n	8000624 <MCP23017_Init+0xa0>
		_log(log_mcp23017, "Initialization: INTENA Write Failed");
 800061c:	491c      	ldr	r1, [pc, #112]	; (8000690 <MCP23017_Init+0x10c>)
 800061e:	2005      	movs	r0, #5
 8000620:	f000 fa6e 	bl	8000b00 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings.DefaultValue,2) != MCP23017_Ok){
 8000624:	6a3b      	ldr	r3, [r7, #32]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	2006      	movs	r0, #6
 800062a:	463a      	mov	r2, r7
 800062c:	1d91      	adds	r1, r2, #6
 800062e:	2202      	movs	r2, #2
 8000630:	4798      	blx	r3
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <MCP23017_Init+0xbc>
		_log(log_mcp23017, "Initialization: DEFVAL Write Failed");
 8000638:	4916      	ldr	r1, [pc, #88]	; (8000694 <MCP23017_Init+0x110>)
 800063a:	2005      	movs	r0, #5
 800063c:	f000 fa60 	bl	8000b00 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings.IRQControl,2) != MCP23017_Ok){
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	2008      	movs	r0, #8
 8000646:	463a      	mov	r2, r7
 8000648:	f102 0108 	add.w	r1, r2, #8
 800064c:	2202      	movs	r2, #2
 800064e:	4798      	blx	r3
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <MCP23017_Init+0xda>
		_log(log_mcp23017, "Initialization: INTCON Write Failed");
 8000656:	4910      	ldr	r1, [pc, #64]	; (8000698 <MCP23017_Init+0x114>)
 8000658:	2005      	movs	r0, #5
 800065a:	f000 fa51 	bl	8000b00 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings.PullUp,2) != MCP23017_Ok){
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	200c      	movs	r0, #12
 8000664:	463a      	mov	r2, r7
 8000666:	f102 010a 	add.w	r1, r2, #10
 800066a:	2202      	movs	r2, #2
 800066c:	4798      	blx	r3
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <MCP23017_Init+0xf8>
		_log(log_mcp23017, "Initialization: GPPU Write Failed");
 8000674:	4909      	ldr	r1, [pc, #36]	; (800069c <MCP23017_Init+0x118>)
 8000676:	2005      	movs	r0, #5
 8000678:	f000 fa42 	bl	8000b00 <_log>
	}

}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	0800aa9c 	.word	0x0800aa9c
 8000688:	0800aac0 	.word	0x0800aac0
 800068c:	0800aae4 	.word	0x0800aae4
 8000690:	0800ab08 	.word	0x0800ab08
 8000694:	0800ab2c 	.word	0x0800ab2c
 8000698:	0800ab50 	.word	0x0800ab50
 800069c:	0800ab74 	.word	0x0800ab74

080006a0 <MCP23017_ReadPins>:
 *@Params: MCP23017 Device Handle
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: Device handle must be initialized
 *@Postcondition: Device Handle PinStates will contain new states of pins
 **************************************//**************************************/
MCP23017_Status_t MCP23017_ReadPins(MCP23017_Handle_t *Dev){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	if(Dev->IO_Driver.ReadReg(MCP23017_GPIOA, (uint8_t*)&Dev->PinStates, 2) != MCP23017_Ok){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	2012      	movs	r0, #18
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	2202      	movs	r2, #2
 80006b2:	4798      	blx	r3
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <MCP23017_ReadPins+0x26>
		_log(log_mcp23017, "Read Pins Failed");
 80006ba:	4905      	ldr	r1, [pc, #20]	; (80006d0 <MCP23017_ReadPins+0x30>)
 80006bc:	2005      	movs	r0, #5
 80006be:	f000 fa1f 	bl	8000b00 <_log>
		return MCP23017_Err;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <MCP23017_ReadPins+0x28>
	}
	return MCP23017_Ok;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	0800acf4 	.word	0x0800acf4

080006d4 <MCP23017_IO_Init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO B Clk will be enabled and I2C1 Peripheral will be initialized
 **************************************//**************************************/
static void MCP23017_IO_Init(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	I2C_GPIO_Init();
 80006d8:	f000 f96c 	bl	80009b4 <I2C_GPIO_Init>
	MX_I2C1_Init();
 80006dc:	f000 f984 	bl	80009e8 <MX_I2C1_Init>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MCP23017_IO_DeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static void MCP23017_IO_DeInit(){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <MCP23017_IO_WriteReg>:
 *@Params: MCP23017 Device Address, Register to write to, data to write, data length in bytes
 *@Return: Error if the write fails, otherwise Ok
 *@Precondition: I2C Bus should be initialized
 *@Postcondition: Device register will be written to
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_WriteReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	603a      	str	r2, [r7, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	460b      	mov	r3, r1
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	b299      	uxth	r1, r3
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	b29a      	uxth	r2, r3
 8000712:	797b      	ldrb	r3, [r7, #5]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2032      	movs	r0, #50	; 0x32
 8000718:	9002      	str	r0, [sp, #8]
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <MCP23017_IO_WriteReg+0x54>)
 8000724:	f001 fcea 	bl	80020fc <HAL_I2C_Mem_Write>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d007      	beq.n	800073e <MCP23017_IO_WriteReg+0x4a>
		_log(log_i2c,"Write to MCP23017 Reg address %x failed.", RegAddr);
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	461a      	mov	r2, r3
 8000732:	4906      	ldr	r1, [pc, #24]	; (800074c <MCP23017_IO_WriteReg+0x58>)
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f9e3 	bl	8000b00 <_log>
		return MCP23017_Err;
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <MCP23017_IO_WriteReg+0x4c>
	}
	return MCP23017_Ok;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200001c8 	.word	0x200001c8
 800074c:	0800ad08 	.word	0x0800ad08

08000750 <MCP23017_IO_ReadReg>:
 *@Params: MCP23017 Device Address, Register to read to, data buffer to read into, data length in bytes,
 *@Return: Error if the read fails, otherwise Ok
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will have the read data
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_ReadReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
 8000756:	603a      	str	r2, [r7, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	460b      	mov	r3, r1
 8000760:	71bb      	strb	r3, [r7, #6]
 8000762:	4613      	mov	r3, r2
 8000764:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Read(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	b299      	uxth	r1, r3
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	b29a      	uxth	r2, r3
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	b29b      	uxth	r3, r3
 8000772:	2032      	movs	r0, #50	; 0x32
 8000774:	9002      	str	r0, [sp, #8]
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2301      	movs	r3, #1
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MCP23017_IO_ReadReg+0x54>)
 8000780:	f001 fdb6 	bl	80022f0 <HAL_I2C_Mem_Read>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <MCP23017_IO_ReadReg+0x4a>
		_log(log_i2c,"Read from MCP23017 Reg address %x failed.", RegAddr);
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	461a      	mov	r2, r3
 800078e:	4906      	ldr	r1, [pc, #24]	; (80007a8 <MCP23017_IO_ReadReg+0x58>)
 8000790:	2000      	movs	r0, #0
 8000792:	f000 f9b5 	bl	8000b00 <_log>
		return MCP23017_Err;
 8000796:	2301      	movs	r3, #1
 8000798:	e000      	b.n	800079c <MCP23017_IO_ReadReg+0x4c>
	}
	return MCP23017_Ok;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001c8 	.word	0x200001c8
 80007a8:	0800ad34 	.word	0x0800ad34

080007ac <MCP23017_IO_ioctl>:
 *@Params: Command
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static uint8_t MCP23017_IO_ioctl(MCP23017_IO_Cmd_t command){
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	return MCP23017_Ok;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <MCP23017_IO2_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address2) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <MCP23017_IO2_WriteReg+0x28>)
 80007d6:	7818      	ldrb	r0, [r3, #0]
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	79f9      	ldrb	r1, [r7, #7]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	f7ff ff89 	bl	80006f4 <MCP23017_IO_WriteReg>
 80007e2:	4603      	mov	r3, r0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0800ae86 	.word	0x0800ae86

080007f0 <MCP23017_IO2_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address2) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MCP23017_IO2_ReadReg+0x28>)
 8000802:	7818      	ldrb	r0, [r3, #0]
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	79f9      	ldrb	r1, [r7, #7]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	f7ff ffa1 	bl	8000750 <MCP23017_IO_ReadReg>
 800080e:	4603      	mov	r3, r0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	0800ae87 	.word	0x0800ae87

0800081c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <MX_ADC1_Init+0x9c>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800083a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_ADC1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_ADC1_Init+0x98>)
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_ADC1_Init+0xa0>)
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_ADC1_Init+0x98>)
 800086a:	2201      	movs	r2, #1
 800086c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0x98>)
 8000878:	2201      	movs	r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_ADC1_Init+0x98>)
 800087e:	f000 fdf1 	bl	8001464 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 fa46 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800088c:	2303      	movs	r3, #3
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_ADC1_Init+0x98>)
 800089e:	f000 fe25 	bl	80014ec <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a8:	f000 fa36 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000180 	.word	0x20000180
 80008b8:	40012000 	.word	0x40012000
 80008bc:	0f000001 	.word	0x0f000001

080008c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_ADC_MspInit+0x7c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d127      	bne.n	8000932 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <HAL_ADC_MspInit+0x80>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <HAL_ADC_MspInit+0x80>)
 80008ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_ADC_MspInit+0x80>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_ADC_MspInit+0x80>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_ADC_MspInit+0x80>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_ADC_MspInit+0x80>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800091a:	2318      	movs	r3, #24
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091e:	2303      	movs	r3, #3
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_ADC_MspInit+0x84>)
 800092e:	f001 f91d 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40012000 	.word	0x40012000
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_GPIO_Init+0x68>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_GPIO_Init+0x68>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <I2C_GPIO_Init>:

/* USER CODE BEGIN 2 */
void I2C_GPIO_Init(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <I2C_GPIO_Init+0x30>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <I2C_GPIO_Init+0x30>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <I2C_GPIO_Init+0x30>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f001 fa25 	bl	8001e74 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f972 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200001c8 	.word	0x200001c8
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	00061a80 	.word	0x00061a80

08000a44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_I2C_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a82:	23c0      	movs	r3, #192	; 0xc0
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a86:	2312      	movs	r3, #18
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a92:	2304      	movs	r3, #4
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <HAL_I2C_MspInit+0x8c>)
 8000a9e:	f001 f865 	bl	8001b6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 8000ae2:	f107 010f 	add.w	r1, r7, #15
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2201      	movs	r2, #1
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <__io_putchar+0x28>)
 8000aee:	f004 fcf8 	bl	80054e2 <HAL_UART_Transmit>
	return ch;
 8000af2:	687b      	ldr	r3, [r7, #4]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002d8 	.word	0x200002d8

08000b00 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8000b00:	b40e      	push	{r1, r2, r3}
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d827      	bhi.n	8000b68 <_log+0x68>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <_log+0x20>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b41 	.word	0x08000b41
 8000b28:	08000b49 	.word	0x08000b49
 8000b2c:	08000b51 	.word	0x08000b51
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	08000b61 	.word	0x08000b61
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 8000b38:	4816      	ldr	r0, [pc, #88]	; (8000b94 <_log+0x94>)
 8000b3a:	f009 faa5 	bl	800a088 <iprintf>
				break;
 8000b3e:	e016      	b.n	8000b6e <_log+0x6e>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 8000b40:	4815      	ldr	r0, [pc, #84]	; (8000b98 <_log+0x98>)
 8000b42:	f009 faa1 	bl	800a088 <iprintf>
				break;
 8000b46:	e012      	b.n	8000b6e <_log+0x6e>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 8000b48:	4814      	ldr	r0, [pc, #80]	; (8000b9c <_log+0x9c>)
 8000b4a:	f009 fa9d 	bl	800a088 <iprintf>
				break;
 8000b4e:	e00e      	b.n	8000b6e <_log+0x6e>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <_log+0xa0>)
 8000b52:	f009 fa99 	bl	800a088 <iprintf>
				break;
 8000b56:	e00a      	b.n	8000b6e <_log+0x6e>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 8000b58:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <_log+0xa4>)
 8000b5a:	f009 fa95 	bl	800a088 <iprintf>
				break;
 8000b5e:	e006      	b.n	8000b6e <_log+0x6e>
		case(log_mcp23017):
			printf("Debug Subsystem MCP23017: ");
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <_log+0xa8>)
 8000b62:	f009 fa91 	bl	800a088 <iprintf>
		        break;
 8000b66:	e002      	b.n	8000b6e <_log+0x6e>
		default:
			printf("Unknown Debug Subsystem: ");
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <_log+0xac>)
 8000b6a:	f009 fa8d 	bl	800a088 <iprintf>
	}
	vfprintf(stdout, msg, args);
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_log+0xb0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	69f9      	ldr	r1, [r7, #28]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 f8e7 	bl	8009d4c <vfiprintf>
	printf("\n");
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f009 fa9a 	bl	800a0b8 <putchar>
	va_end(args);
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b8e:	b003      	add	sp, #12
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	0800ad60 	.word	0x0800ad60
 8000b98:	0800ad78 	.word	0x0800ad78
 8000b9c:	0800ad94 	.word	0x0800ad94
 8000ba0:	0800adb0 	.word	0x0800adb0
 8000ba4:	0800adcc 	.word	0x0800adcc
 8000ba8:	0800adec 	.word	0x0800adec
 8000bac:	0800ae08 	.word	0x0800ae08
 8000bb0:	20000100 	.word	0x20000100

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f000 fbbe 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f814 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f7ff fec2 	bl	8000948 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bc4:	f7ff fe2a 	bl	800081c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000bc8:	f000 f8ac 	bl	8000d24 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000bcc:	f000 fa5a 	bl	8001084 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000bd0:	f008 fad0 	bl	8009174 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000bd4:	f000 fb14 	bl	8001200 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  InitGPIOExpander();
 8000bd8:	f000 f86e 	bl	8000cb8 <InitGPIOExpander>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MCP23017_ReadPins(&Expander1);
 8000bdc:	4801      	ldr	r0, [pc, #4]	; (8000be4 <main+0x30>)
 8000bde:	f7ff fd5f 	bl	80006a0 <MCP23017_ReadPins>
 8000be2:	e7fb      	b.n	8000bdc <main+0x28>
 8000be4:	2000021c 	.word	0x2000021c

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	; 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f008 ff46 	bl	8009a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <SystemClock_Config+0xc8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <SystemClock_Config+0xc8>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <SystemClock_Config+0xc8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c58:	2319      	movs	r3, #25
 8000c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c5c:	23c0      	movs	r3, #192	; 0xc0
 8000c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fb25 	bl	80042bc <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c78:	f000 f84e 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2103      	movs	r1, #3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fd87 	bl	80047ac <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ca4:	f000 f838 	bl	8000d18 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3750      	adds	r7, #80	; 0x50
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <InitGPIOExpander>:

/* USER CODE BEGIN 4 */
void InitGPIOExpander(){
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af06      	add	r7, sp, #24
	MCP23017_Init_Struct_t InitSettings = {
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <InitGPIOExpander+0x50>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	803b      	strh	r3, [r7, #0]
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <InitGPIOExpander+0x50>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	807b      	strh	r3, [r7, #2]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <InitGPIOExpander+0x54>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	80bb      	strh	r3, [r7, #4]
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <InitGPIOExpander+0x54>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <InitGPIOExpander+0x54>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	813b      	strh	r3, [r7, #8]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <InitGPIOExpander+0x50>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	817b      	strh	r3, [r7, #10]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	733b      	strb	r3, [r7, #12]
			.IntEnable = MCP23017_NoPins,
			.Mode = MCP23017_AllPins,
			.PullUp = MCP23017_AllPins,
			.Polarity = MCP23017_AllPins
	};
	MCP23017_Init(InitSettings, &Expander1, MCP23017_IO2_Drv);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <InitGPIOExpander+0x58>)
 8000ce8:	ac01      	add	r4, sp, #4
 8000cea:	461d      	mov	r5, r3
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	6023      	str	r3, [r4, #0]
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <InitGPIOExpander+0x5c>)
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfc:	f7ff fc42 	bl	8000584 <MCP23017_Init>

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bdb0      	pop	{r4, r5, r7, pc}
 8000d08:	0800ae82 	.word	0x0800ae82
 8000d0c:	0800ae84 	.word	0x0800ae84
 8000d10:	20000000 	.word	0x20000000
 8000d14:	2000021c 	.word	0x2000021c

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <MX_SPI1_Init+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d70:	220a      	movs	r2, #10
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d76:	f003 fef9 	bl	8004b6c <HAL_SPI_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d80:	f7ff ffca 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000234 	.word	0x20000234
 8000d8c:	40013000 	.word	0x40013000

08000d90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <HAL_SPI_MspInit+0xc0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d149      	bne.n	8000e46 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a26      	ldr	r2, [pc, #152]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_SPI_MspInit+0xc4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e06:	23c0      	movs	r3, #192	; 0xc0
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e16:	2305      	movs	r3, #5
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <HAL_SPI_MspInit+0xc8>)
 8000e22:	f000 fea3 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e26:	2308      	movs	r3, #8
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e36:	2305      	movs	r3, #5
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <HAL_SPI_MspInit+0xcc>)
 8000e42:	f000 fe93 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40013000 	.word	0x40013000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 fa6e 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <OTG_FS_IRQHandler+0x10>)
 8000f0a:	f002 f8c2 	bl	8003092 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000800 	.word	0x20000800

08000f18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e00a      	b.n	8000f40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	4601      	mov	r1, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf0      	blt.n	8000f2a <_read+0x12>
	}

return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e009      	b.n	8000f78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fdb1 	bl	8000ad4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf1      	blt.n	8000f64 <_write+0x12>
	}
	return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_close>:

int _close(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	return -1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_isatty>:

int _isatty(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f008 fd06 	bl	8009a34 <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20020000 	.word	0x20020000
 8001054:	00000400 	.word	0x00000400
 8001058:	2000028c 	.word	0x2000028c
 800105c:	20000d38 	.word	0x20000d38

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
 80010a2:	615a      	str	r2, [r3, #20]
 80010a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010a8:	4a26      	ldr	r2, [pc, #152]	; (8001144 <MX_TIM3_Init+0xc0>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 119;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010ba:	2277      	movs	r2, #119	; 0x77
 80010bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010ca:	481d      	ldr	r0, [pc, #116]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010cc:	f003 fdd7 	bl	8004c7e <HAL_TIM_PWM_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80010d6:	f7ff fe1f 	bl	8000d18 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80010da:	2108      	movs	r1, #8
 80010dc:	4818      	ldr	r0, [pc, #96]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010de:	f003 fe1d 	bl	8004d1c <HAL_TIM_OnePulse_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010e8:	f7ff fe16 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_TIM3_Init+0xbc>)
 80010fc:	f004 f936 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001106:	f7ff fe07 	bl	8000d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	; 0x60
 800110c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM3_Init+0xbc>)
 8001122:	f003 fe55 	bl	8004dd0 <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800112c:	f7ff fdf4 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM3_Init+0xbc>)
 8001132:	f000 f82b 	bl	800118c <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000290 	.word	0x20000290
 8001144:	40000400 	.word	0x40000400

08001148 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <HAL_TIM_PWM_MspInit+0x3c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10d      	bne.n	8001176 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_TIM_PWM_MspInit+0x40>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_TIM_PWM_MspInit+0x40>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_TIM_PWM_MspInit+0x40>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40000400 	.word	0x40000400
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d11d      	bne.n	80011ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ca:	2310      	movs	r3, #16
 80011cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_TIM_MspPostInit+0x70>)
 80011e6:	f000 fcc1 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40000400 	.word	0x40000400
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400

08001200 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_USART1_UART_Init+0x50>)
 8001208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001238:	f004 f906 	bl	8005448 <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001242:	f7ff fd69 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200002d8 	.word	0x200002d8
 8001250:	40011000 	.word	0x40011000

08001254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12c      	bne.n	80012d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_UART_MspInit+0x88>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_UART_MspInit+0x88>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0x88>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_UART_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_UART_MspInit+0x88>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_UART_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c0:	2307      	movs	r3, #7
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 80012cc:	f000 fc4e 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ea:	490e      	ldr	r1, [pc, #56]	; (8001324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130e:	f7ff fea7 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f008 fb95 	bl	8009a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff fc4d 	bl	8000bb4 <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800131c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001328:	0800af48 	.word	0x0800af48
  ldr r2, =_sbss
 800132c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001330:	20000d38 	.word	0x20000d38

08001334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_Init+0x40>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_Init+0x40>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x40>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 fbc1 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fd78 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fbd9 	bl	8001b52 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 fba1 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000014 	.word	0x20000014
 80013d4:	2000001c 	.word	0x2000001c
 80013d8:	20000018 	.word	0x20000018

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000001c 	.word	0x2000001c
 8001400:	2000031c 	.word	0x2000031c

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000031c 	.word	0x2000031c

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000001c 	.word	0x2000001c

08001464 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e033      	b.n	80014e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fa1c 	bl	80008c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014aa:	f023 0302 	bic.w	r3, r3, #2
 80014ae:	f043 0202 	orr.w	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f94a 	bl	8001750 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
 80014d2:	e001      	b.n	80014d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1c>
 8001504:	2302      	movs	r3, #2
 8001506:	e113      	b.n	8001730 <HAL_ADC_ConfigChannel+0x244>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b09      	cmp	r3, #9
 8001516:	d925      	bls.n	8001564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68d9      	ldr	r1, [r3, #12]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3b1e      	subs	r3, #30
 800152e:	2207      	movs	r2, #7
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43da      	mvns	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	400a      	ands	r2, r1
 800153c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68d9      	ldr	r1, [r3, #12]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	4603      	mov	r3, r0
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4403      	add	r3, r0
 8001556:	3b1e      	subs	r3, #30
 8001558:	409a      	lsls	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	e022      	b.n	80015aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6919      	ldr	r1, [r3, #16]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	2207      	movs	r2, #7
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6919      	ldr	r1, [r3, #16]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	4603      	mov	r3, r0
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4403      	add	r3, r0
 80015a0:	409a      	lsls	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d824      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b05      	subs	r3, #5
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b05      	subs	r3, #5
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
 80015fa:	e04c      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d824      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b23      	subs	r3, #35	; 0x23
 8001616:	221f      	movs	r2, #31
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43da      	mvns	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b23      	subs	r3, #35	; 0x23
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
 800164c:	e023      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b41      	subs	r3, #65	; 0x41
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b41      	subs	r3, #65	; 0x41
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_ADC_ConfigChannel+0x250>)
 8001698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_ADC_ConfigChannel+0x254>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d10f      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1d8>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d10b      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_ADC_ConfigChannel+0x254>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x23a>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_ADC_ConfigChannel+0x258>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d003      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0x1f4>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b11      	cmp	r3, #17
 80016de:	d122      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_ADC_ConfigChannel+0x258>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d111      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_ADC_ConfigChannel+0x25c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_ADC_ConfigChannel+0x260>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0c9a      	lsrs	r2, r3, #18
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001718:	e002      	b.n	8001720 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3b01      	subs	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40012300 	.word	0x40012300
 8001740:	40012000 	.word	0x40012000
 8001744:	10000012 	.word	0x10000012
 8001748:	20000014 	.word	0x20000014
 800174c:	431bde83 	.word	0x431bde83

08001750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001758:	4b79      	ldr	r3, [pc, #484]	; (8001940 <ADC_Init+0x1f0>)
 800175a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	431a      	orrs	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	021a      	lsls	r2, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	4a58      	ldr	r2, [pc, #352]	; (8001944 <ADC_Init+0x1f4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d022      	beq.n	800182e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	e00f      	b.n	800184e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800183c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800184c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0202 	bic.w	r2, r2, #2
 800185c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e1b      	ldrb	r3, [r3, #24]
 8001868:	005a      	lsls	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01b      	beq.n	80018b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800189a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	3b01      	subs	r3, #1
 80018a8:	035a      	lsls	r2, r3, #13
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	e007      	b.n	80018c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	3b01      	subs	r3, #1
 80018e0:	051a      	lsls	r2, r3, #20
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001906:	025a      	lsls	r2, r3, #9
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	029a      	lsls	r2, r3, #10
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40012300 	.word	0x40012300
 8001944:	0f000001 	.word	0x0f000001

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff3e 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff8e 	bl	8001a3c <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5d 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff31 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa2 	bl	8001aa4 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e159      	b.n	8001e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8148 	bne.w	8001e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d005      	beq.n	8001bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d130      	bne.n	8001c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0201 	and.w	r2, r3, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d017      	beq.n	8001c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d123      	bne.n	8001cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a2 	beq.w	8001e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0e:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <HAL_GPIO_Init+0x2f0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_Init+0x202>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <HAL_GPIO_Init+0x2f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x1fe>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a47      	ldr	r2, [pc, #284]	; (8001e64 <HAL_GPIO_Init+0x2f8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x1fa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a46      	ldr	r2, [pc, #280]	; (8001e68 <HAL_GPIO_Init+0x2fc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x1f6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a45      	ldr	r2, [pc, #276]	; (8001e6c <HAL_GPIO_Init+0x300>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x1f2>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d80:	4935      	ldr	r1, [pc, #212]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f67f aea2 	bls.w	8001b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e12b      	b.n	80020de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fdd2 	bl	8000a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2224      	movs	r2, #36	; 0x24
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed8:	f002 fe20 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8001edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a81      	ldr	r2, [pc, #516]	; (80020e8 <HAL_I2C_Init+0x274>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d807      	bhi.n	8001ef8 <HAL_I2C_Init+0x84>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a80      	ldr	r2, [pc, #512]	; (80020ec <HAL_I2C_Init+0x278>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e006      	b.n	8001f06 <HAL_I2C_Init+0x92>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a7d      	ldr	r2, [pc, #500]	; (80020f0 <HAL_I2C_Init+0x27c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	bf94      	ite	ls
 8001f00:	2301      	movls	r3, #1
 8001f02:	2300      	movhi	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0e7      	b.n	80020de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a78      	ldr	r2, [pc, #480]	; (80020f4 <HAL_I2C_Init+0x280>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0c9b      	lsrs	r3, r3, #18
 8001f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a6a      	ldr	r2, [pc, #424]	; (80020e8 <HAL_I2C_Init+0x274>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d802      	bhi.n	8001f48 <HAL_I2C_Init+0xd4>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3301      	adds	r3, #1
 8001f46:	e009      	b.n	8001f5c <HAL_I2C_Init+0xe8>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <HAL_I2C_Init+0x284>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	495c      	ldr	r1, [pc, #368]	; (80020e8 <HAL_I2C_Init+0x274>)
 8001f78:	428b      	cmp	r3, r1
 8001f7a:	d819      	bhi.n	8001fb0 <HAL_I2C_Init+0x13c>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1e59      	subs	r1, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8a:	1c59      	adds	r1, r3, #1
 8001f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f90:	400b      	ands	r3, r1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_I2C_Init+0x138>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1e59      	subs	r1, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001faa:	e051      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 8001fac:	2304      	movs	r3, #4
 8001fae:	e04f      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d111      	bne.n	8001fdc <HAL_I2C_Init+0x168>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e58      	subs	r0, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	440b      	add	r3, r1
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e012      	b.n	8002002 <HAL_I2C_Init+0x18e>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	0099      	lsls	r1, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Init+0x196>
 8002006:	2301      	movs	r3, #1
 8002008:	e022      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10e      	bne.n	8002030 <HAL_I2C_Init+0x1bc>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e58      	subs	r0, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	440b      	add	r3, r1
 8002020:	fbb0 f3f3 	udiv	r3, r0, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202e:	e00f      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1e58      	subs	r0, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	0099      	lsls	r1, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	6809      	ldr	r1, [r1, #0]
 8002054:	4313      	orrs	r3, r2
 8002056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800207e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6911      	ldr	r1, [r2, #16]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68d2      	ldr	r2, [r2, #12]
 800208a:	4311      	orrs	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	430b      	orrs	r3, r1
 8002092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	000186a0 	.word	0x000186a0
 80020ec:	001e847f 	.word	0x001e847f
 80020f0:	003d08ff 	.word	0x003d08ff
 80020f4:	431bde83 	.word	0x431bde83
 80020f8:	10624dd3 	.word	0x10624dd3

080020fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002116:	f7ff f975 	bl	8001404 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b20      	cmp	r3, #32
 8002126:	f040 80d9 	bne.w	80022dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2319      	movs	r3, #25
 8002130:	2201      	movs	r2, #1
 8002132:	496d      	ldr	r1, [pc, #436]	; (80022e8 <HAL_I2C_Mem_Write+0x1ec>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fc7f 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	e0cc      	b.n	80022de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Mem_Write+0x56>
 800214e:	2302      	movs	r3, #2
 8002150:	e0c5      	b.n	80022de <HAL_I2C_Mem_Write+0x1e2>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d007      	beq.n	8002178 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2221      	movs	r2, #33	; 0x21
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2240      	movs	r2, #64	; 0x40
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <HAL_I2C_Mem_Write+0x1f0>)
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ba:	88f8      	ldrh	r0, [r7, #6]
 80021bc:	893a      	ldrh	r2, [r7, #8]
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4603      	mov	r3, r0
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fab6 	bl	800273c <I2C_RequestMemoryWrite>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d052      	beq.n	800227c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e081      	b.n	80022de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fd00 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d107      	bne.n	8002202 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06b      	b.n	80022de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11b      	bne.n	800227c <HAL_I2C_Mem_Write+0x180>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d017      	beq.n	800227c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1aa      	bne.n	80021da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fcec 	bl	8002c66 <I2C_WaitOnBTFFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b04      	cmp	r3, #4
 800229a:	d107      	bne.n	80022ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e016      	b.n	80022de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	00100002 	.word	0x00100002
 80022ec:	ffff0000 	.word	0xffff0000

080022f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	460b      	mov	r3, r1
 8002304:	813b      	strh	r3, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800230a:	f7ff f87b 	bl	8001404 <HAL_GetTick>
 800230e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	f040 8208 	bne.w	800272e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2319      	movs	r3, #25
 8002324:	2201      	movs	r2, #1
 8002326:	497b      	ldr	r1, [pc, #492]	; (8002514 <HAL_I2C_Mem_Read+0x224>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fb85 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
 8002336:	e1fb      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Mem_Read+0x56>
 8002342:	2302      	movs	r3, #2
 8002344:	e1f4      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d007      	beq.n	800236c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800237a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2222      	movs	r2, #34	; 0x22
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a5b      	ldr	r2, [pc, #364]	; (8002518 <HAL_I2C_Mem_Read+0x228>)
 80023ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ae:	88f8      	ldrh	r0, [r7, #6]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4603      	mov	r3, r0
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fa52 	bl	8002868 <I2C_RequestMemoryRead>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1b0      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d113      	bne.n	80023fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e184      	b.n	8002708 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b01      	cmp	r3, #1
 8002404:	d11b      	bne.n	800243e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e164      	b.n	8002708 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	2b02      	cmp	r3, #2
 8002444:	d11b      	bne.n	800247e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002454:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	e144      	b.n	8002708 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002494:	e138      	b.n	8002708 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	2b03      	cmp	r3, #3
 800249c:	f200 80f1 	bhi.w	8002682 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d123      	bne.n	80024f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fc1b 	bl	8002ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e139      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ee:	e10b      	b.n	8002708 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d14e      	bne.n	8002596 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fe:	2200      	movs	r2, #0
 8002500:	4906      	ldr	r1, [pc, #24]	; (800251c <HAL_I2C_Mem_Read+0x22c>)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fa98 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e10e      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
 8002512:	bf00      	nop
 8002514:	00100002 	.word	0x00100002
 8002518:	ffff0000 	.word	0xffff0000
 800251c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002594:	e0b8      	b.n	8002708 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2200      	movs	r2, #0
 800259e:	4966      	ldr	r1, [pc, #408]	; (8002738 <HAL_I2C_Mem_Read+0x448>)
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fa49 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0bf      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	2200      	movs	r2, #0
 80025fa:	494f      	ldr	r1, [pc, #316]	; (8002738 <HAL_I2C_Mem_Read+0x448>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fa1b 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e091      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002680:	e042      	b.n	8002708 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fb2e 	bl	8002ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e04c      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d118      	bne.n	8002708 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f aec2 	bne.w	8002496 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3728      	adds	r7, #40	; 0x28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	00010004 	.word	0x00010004

0800273c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	460b      	mov	r3, r1
 8002750:	813b      	strh	r3, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002764:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	2200      	movs	r2, #0
 800276e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f960 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278c:	d103      	bne.n	8002796 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e05f      	b.n	800285a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800279a:	897b      	ldrh	r3, [r7, #10]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	492d      	ldr	r1, [pc, #180]	; (8002864 <I2C_RequestMemoryWrite+0x128>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f998 	bl	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e04c      	b.n	800285a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	6a39      	ldr	r1, [r7, #32]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fa02 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d107      	bne.n	80027fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e02b      	b.n	800285a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002808:	893b      	ldrh	r3, [r7, #8]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	e021      	b.n	8002858 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002814:	893b      	ldrh	r3, [r7, #8]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	b29b      	uxth	r3, r3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	6a39      	ldr	r1, [r7, #32]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f9dc 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b04      	cmp	r3, #4
 8002838:	d107      	bne.n	800284a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e005      	b.n	800285a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800284e:	893b      	ldrh	r3, [r7, #8]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	00010002 	.word	0x00010002

08002868 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8c2 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c8:	d103      	bne.n	80028d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0aa      	b.n	8002a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028d6:	897b      	ldrh	r3, [r7, #10]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	4952      	ldr	r1, [pc, #328]	; (8002a34 <I2C_RequestMemoryRead+0x1cc>)
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f8fa 	bl	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e097      	b.n	8002a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f964 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b04      	cmp	r3, #4
 8002928:	d107      	bne.n	800293a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e076      	b.n	8002a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002944:	893b      	ldrh	r3, [r7, #8]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	611a      	str	r2, [r3, #16]
 800294e:	e021      	b.n	8002994 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002950:	893b      	ldrh	r3, [r7, #8]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	b29b      	uxth	r3, r3
 8002956:	b2da      	uxtb	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	6a39      	ldr	r1, [r7, #32]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f93e 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b04      	cmp	r3, #4
 8002974:	d107      	bne.n	8002986 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e050      	b.n	8002a2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800298a:	893b      	ldrh	r3, [r7, #8]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	6a39      	ldr	r1, [r7, #32]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f923 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d107      	bne.n	80029bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e035      	b.n	8002a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f82b 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f6:	d103      	bne.n	8002a00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e013      	b.n	8002a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a04:	897b      	ldrh	r3, [r7, #10]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	6a3a      	ldr	r2, [r7, #32]
 8002a18:	4906      	ldr	r1, [pc, #24]	; (8002a34 <I2C_RequestMemoryRead+0x1cc>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f863 	bl	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	00010002 	.word	0x00010002

08002a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a48:	e025      	b.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d021      	beq.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fe fcd7 	bl	8001404 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d116      	bne.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e023      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10d      	bne.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	e00c      	b.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d0b6      	beq.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af4:	e051      	b.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b04:	d123      	bne.n	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e046      	b.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d021      	beq.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7fe fc55 	bl	8001404 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d116      	bne.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e020      	b.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e00b      	b.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d18d      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf0:	e02d      	b.n	8002c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f8ce 	bl	8002d94 <I2C_IsAcknowledgeFailed>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e02d      	b.n	8002c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d021      	beq.n	8002c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fe fbfb 	bl	8001404 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e007      	b.n	8002c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d1ca      	bne.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c72:	e02d      	b.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f88d 	bl	8002d94 <I2C_IsAcknowledgeFailed>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e02d      	b.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d021      	beq.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8c:	f7fe fbba 	bl	8001404 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d302      	bcc.n	8002ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f043 0220 	orr.w	r2, r3, #32
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d1ca      	bne.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cf4:	e042      	b.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d119      	bne.n	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0210 	mvn.w	r2, #16
 8002d0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e029      	b.n	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d38:	f7fe fb64 	bl	8001404 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e007      	b.n	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d1b5      	bne.n	8002cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d11b      	bne.n	8002de4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002db4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df4:	b08f      	sub	sp, #60	; 0x3c
 8002df6:	af0a      	add	r7, sp, #40	; 0x28
 8002df8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e10f      	b.n	8003024 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f006 fb10 	bl	8009444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2203      	movs	r2, #3
 8002e28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 ffd7 	bl	8005df6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	687e      	ldr	r6, [r7, #4]
 8002e50:	466d      	mov	r5, sp
 8002e52:	f106 0410 	add.w	r4, r6, #16
 8002e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e66:	1d33      	adds	r3, r6, #4
 8002e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e6a:	6838      	ldr	r0, [r7, #0]
 8002e6c:	f002 feae 	bl	8005bcc <USB_CoreInit>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0d0      	b.n	8003024 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 ffc5 	bl	8005e18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e04a      	b.n	8002f2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	333d      	adds	r3, #61	; 0x3d
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333c      	adds	r3, #60	; 0x3c
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	b298      	uxth	r0, r3
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3344      	adds	r3, #68	; 0x44
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3340      	adds	r3, #64	; 0x40
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3348      	adds	r3, #72	; 0x48
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	334c      	adds	r3, #76	; 0x4c
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3354      	adds	r3, #84	; 0x54
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	3301      	adds	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d3af      	bcc.n	8002e94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e044      	b.n	8002fc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d3b5      	bcc.n	8002f3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	687e      	ldr	r6, [r7, #4]
 8002fd6:	466d      	mov	r5, sp
 8002fd8:	f106 0410 	add.w	r4, r6, #16
 8002fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fec:	1d33      	adds	r3, r6, #4
 8002fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f002 ff5d 	bl	8005eb0 <USB_DevInit>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e00d      	b.n	8003024 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f004 f8ac 	bl	800717a <USB_DevDisconnect>

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800302c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_PCD_Start+0x1c>
 8003044:	2302      	movs	r3, #2
 8003046:	e020      	b.n	800308a <HAL_PCD_Start+0x5e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	2b01      	cmp	r3, #1
 8003056:	d109      	bne.n	800306c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800305c:	2b01      	cmp	r3, #1
 800305e:	d005      	beq.n	800306c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f002 feaf 	bl	8005dd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f004 f85c 	bl	8007138 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003092:	b590      	push	{r4, r7, lr}
 8003094:	b08d      	sub	sp, #52	; 0x34
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 f91a 	bl	80072e2 <USB_GetMode>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 848a 	bne.w	80039ca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 f87e 	bl	80071bc <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8480 	beq.w	80039c8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f004 f86b 	bl	80071bc <USB_ReadInterrupts>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d107      	bne.n	8003100 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f002 0202 	and.w	r2, r2, #2
 80030fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f004 f859 	bl	80071bc <USB_ReadInterrupts>
 800310a:	4603      	mov	r3, r0
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b10      	cmp	r3, #16
 8003112:	d161      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0210 	bic.w	r2, r2, #16
 8003122:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	3304      	adds	r3, #4
 8003142:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	0c5b      	lsrs	r3, r3, #17
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	2b02      	cmp	r3, #2
 800314e:	d124      	bne.n	800319a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d035      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6a38      	ldr	r0, [r7, #32]
 8003170:	f003 fe90 	bl	8006e94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003180:	441a      	add	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003192:	441a      	add	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
 8003198:	e016      	b.n	80031c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	0c5b      	lsrs	r3, r3, #17
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d110      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031ac:	2208      	movs	r2, #8
 80031ae:	4619      	mov	r1, r3
 80031b0:	6a38      	ldr	r0, [r7, #32]
 80031b2:	f003 fe6f 	bl	8006e94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c2:	441a      	add	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0210 	orr.w	r2, r2, #16
 80031d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 ffed 	bl	80071bc <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031ec:	f040 80a7 	bne.w	800333e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 fff2 	bl	80071e2 <USB_ReadDevAllOutEpInterrupt>
 80031fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003200:	e099      	b.n	8003336 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 808e 	beq.w	800332a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f004 f816 	bl	800724a <USB_ReadDevOutEPInterrupt>
 800321e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	2301      	movs	r3, #1
 800323a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800323c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 feaa 	bl	8003f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	2308      	movs	r3, #8
 800325e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 ff80 	bl	8004168 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	2310      	movs	r3, #16
 8003282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d030      	beq.n	80032f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d109      	bne.n	80032ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	78db      	ldrb	r3, [r3, #3]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d108      	bne.n	80032de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2200      	movs	r2, #0
 80032d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f006 f9af 	bl	800963c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ea:	461a      	mov	r2, r3
 80032ec:	2302      	movs	r3, #2
 80032ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003306:	461a      	mov	r2, r3
 8003308:	2320      	movs	r3, #32
 800330a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003322:	461a      	mov	r2, r3
 8003324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003328:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	3301      	adds	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f af62 	bne.w	8003202 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f003 ff3a 	bl	80071bc <USB_ReadInterrupts>
 8003348:	4603      	mov	r3, r0
 800334a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003352:	f040 80db 	bne.w	800350c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 ff5b 	bl	8007216 <USB_ReadDevAllInEpInterrupt>
 8003360:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003366:	e0cd      	b.n	8003504 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80c2 	beq.w	80034f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f003 ff81 	bl	8007286 <USB_ReadDevInEPInterrupt>
 8003384:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d057      	beq.n	8003440 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69f9      	ldr	r1, [r7, #28]
 80033ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b0:	4013      	ands	r3, r2
 80033b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c0:	461a      	mov	r2, r3
 80033c2:	2301      	movs	r3, #1
 80033c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d132      	bne.n	8003434 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334c      	adds	r3, #76	; 0x4c
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4403      	add	r3, r0
 80033ee:	3348      	adds	r3, #72	; 0x48
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4419      	add	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4403      	add	r3, r0
 8003402:	334c      	adds	r3, #76	; 0x4c
 8003404:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <HAL_PCD_IRQHandler+0x3a2>
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	3354      	adds	r3, #84	; 0x54
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800342c:	461a      	mov	r2, r3
 800342e:	2101      	movs	r1, #1
 8003430:	f003 ff88 	bl	8007344 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f006 f883 	bl	8009546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003456:	461a      	mov	r2, r3
 8003458:	2308      	movs	r3, #8
 800345a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003472:	461a      	mov	r2, r3
 8003474:	2310      	movs	r3, #16
 8003476:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348e:	461a      	mov	r2, r3
 8003490:	2340      	movs	r3, #64	; 0x40
 8003492:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d023      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800349e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a0:	6a38      	ldr	r0, [r7, #32]
 80034a2:	f002 fe69 	bl	8006178 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3338      	adds	r3, #56	; 0x38
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	3304      	adds	r3, #4
 80034b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d108      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f006 f8c6 	bl	8009660 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	461a      	mov	r2, r3
 80034e2:	2302      	movs	r3, #2
 80034e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fcc3 	bl	8003e7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	3301      	adds	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	f47f af2e 	bne.w	8003368 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fe53 	bl	80071bc <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800351c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003520:	d122      	bne.n	8003568 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800353c:	2b01      	cmp	r3, #1
 800353e:	d108      	bne.n	8003552 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003548:	2100      	movs	r1, #0
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 feaa 	bl	80042a4 <HAL_PCDEx_LPM_Callback>
 8003550:	e002      	b.n	8003558 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f006 f864 	bl	8009620 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f003 fe25 	bl	80071bc <USB_ReadInterrupts>
 8003572:	4603      	mov	r3, r0
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357c:	d112      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d102      	bne.n	8003594 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f006 f820 	bl	80095d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 fe07 	bl	80071bc <USB_ReadInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	f040 80b7 	bne.w	800372a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2110      	movs	r1, #16
 80035d6:	4618      	mov	r0, r3
 80035d8:	f002 fdce 	bl	8006178 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e0:	e046      	b.n	8003670 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ee:	461a      	mov	r2, r3
 80035f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	440a      	add	r2, r1
 800360c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003614:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003628:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363a:	0151      	lsls	r1, r2, #5
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	440a      	add	r2, r1
 8003640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003644:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003648:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800365a:	0151      	lsls	r1, r2, #5
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	440a      	add	r2, r1
 8003660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003664:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003668:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	3301      	adds	r3, #1
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003676:	429a      	cmp	r2, r3
 8003678:	d3b3      	bcc.n	80035e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003688:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800368c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a6:	f043 030b 	orr.w	r3, r3, #11
 80036aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036bc:	f043 030b 	orr.w	r3, r3, #11
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	e015      	b.n	80036f0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ea:	f043 030b 	orr.w	r3, r3, #11
 80036ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003702:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003714:	461a      	mov	r2, r3
 8003716:	f003 fe15 	bl	8007344 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f003 fd44 	bl	80071bc <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	d124      	bne.n	800378a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 fdda 	bl	80072fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fd8f 	bl	8006272 <USB_GetDevSpeed>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681c      	ldr	r4, [r3, #0]
 8003760:	f001 f9d0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8003764:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800376a:	b2db      	uxtb	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	4620      	mov	r0, r4
 8003770:	f002 fa8e 	bl	8005c90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f005 ff0e 	bl	8009596 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003788:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f003 fd14 	bl	80071bc <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b08      	cmp	r3, #8
 800379c:	d10a      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f005 feeb 	bl	800957a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f002 0208 	and.w	r2, r2, #8
 80037b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fcff 	bl	80071bc <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b80      	cmp	r3, #128	; 0x80
 80037c6:	d122      	bne.n	800380e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d4:	2301      	movs	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e014      	b.n	8003804 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb0f 	bl	8003e1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	3301      	adds	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380a:	429a      	cmp	r2, r3
 800380c:	d3e5      	bcc.n	80037da <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f003 fcd2 	bl	80071bc <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003822:	d13b      	bne.n	800389c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003824:	2301      	movs	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	e02b      	b.n	8003882 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3340      	adds	r3, #64	; 0x40
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d115      	bne.n	800387c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003850:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003852:	2b00      	cmp	r3, #0
 8003854:	da12      	bge.n	800387c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	333f      	adds	r3, #63	; 0x3f
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003872:	b2db      	uxtb	r3, r3
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fad0 	bl	8003e1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	3301      	adds	r3, #1
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	429a      	cmp	r2, r3
 800388a:	d3ce      	bcc.n	800382a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800389a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f003 fc8b 	bl	80071bc <USB_ReadInterrupts>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038b0:	d155      	bne.n	800395e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e045      	b.n	8003944 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d12e      	bne.n	800393e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	da2b      	bge.n	800393e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d121      	bne.n	800393e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800390c:	2201      	movs	r2, #1
 800390e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800393a:	6053      	str	r3, [r2, #4]
            break;
 800393c:	e007      	b.n	800394e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	3301      	adds	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	429a      	cmp	r2, r3
 800394c:	d3b4      	bcc.n	80038b8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800395c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 fc2a 	bl	80071bc <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d10a      	bne.n	800398a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f005 fe85 	bl	8009684 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f003 fc14 	bl	80071bc <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d115      	bne.n	80039ca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f005 fe75 	bl	80096a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e000      	b.n	80039ca <HAL_PCD_IRQHandler+0x938>
      return;
 80039c8:	bf00      	nop
    }
  }
}
 80039ca:	3734      	adds	r7, #52	; 0x34
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd90      	pop	{r4, r7, pc}

080039d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_PCD_SetAddress+0x1a>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e013      	b.n	8003a12 <HAL_PCD_SetAddress+0x42>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fb72 	bl	80070ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	4608      	mov	r0, r1
 8003a24:	4611      	mov	r1, r2
 8003a26:	461a      	mov	r2, r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	70fb      	strb	r3, [r7, #3]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	803b      	strh	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0f      	bge.n	8003a60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 020f 	and.w	r2, r3, #15
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3338      	adds	r3, #56	; 0x38
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	705a      	strb	r2, [r3, #1]
 8003a5e:	e00f      	b.n	8003a80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a8c:	883a      	ldrh	r2, [r7, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	78ba      	ldrb	r2, [r7, #2]
 8003a96:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003aaa:	78bb      	ldrb	r3, [r7, #2]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d102      	bne.n	8003ab6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_PCD_EP_Open+0xaa>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e00e      	b.n	8003ae2 <HAL_PCD_EP_Open+0xc8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f002 fbf2 	bl	80062bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da0f      	bge.n	8003b1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 020f 	and.w	r2, r3, #15
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	3338      	adds	r3, #56	; 0x38
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	705a      	strb	r2, [r3, #1]
 8003b1c:	e00f      	b.n	8003b3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	3304      	adds	r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_PCD_EP_Close+0x6e>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e00e      	b.n	8003b76 <HAL_PCD_EP_Close+0x8c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68f9      	ldr	r1, [r7, #12]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 fc30 	bl	80063cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f003 020f 	and.w	r2, r3, #15
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bda:	7afb      	ldrb	r3, [r7, #11]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6979      	ldr	r1, [r7, #20]
 8003bf2:	f002 ff0f 	bl	8006a14 <USB_EP0StartXfer>
 8003bf6:	e008      	b.n	8003c0a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	6979      	ldr	r1, [r7, #20]
 8003c06:	f002 fcbd 	bl	8006584 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	460b      	mov	r3, r1
 8003c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3338      	adds	r3, #56	; 0x38
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2201      	movs	r2, #1
 8003c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c54:	7afb      	ldrb	r3, [r7, #11]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c6e:	7afb      	ldrb	r3, [r7, #11]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	f002 fec5 	bl	8006a14 <USB_EP0StartXfer>
 8003c8a:	e008      	b.n	8003c9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	f002 fc73 	bl	8006584 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d901      	bls.n	8003cc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e050      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da0f      	bge.n	8003cee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	3338      	adds	r3, #56	; 0x38
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	705a      	strb	r2, [r3, #1]
 8003cec:	e00d      	b.n	8003d0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_PCD_EP_SetStall+0x82>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e01e      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xc0>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f003 f903 	bl	8006f44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	b2d9      	uxtb	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f003 faf3 	bl	8007344 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d901      	bls.n	8003d8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e042      	b.n	8003e14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0f      	bge.n	8003db6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3338      	adds	r3, #56	; 0x38
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	705a      	strb	r2, [r3, #1]
 8003db4:	e00f      	b.n	8003dd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f003 020f 	and.w	r2, r3, #15
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_PCD_EP_ClrStall+0x86>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e00e      	b.n	8003e14 <HAL_PCD_EP_ClrStall+0xa4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 f90b 	bl	8007020 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da0c      	bge.n	8003e4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3338      	adds	r3, #56	; 0x38
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e00c      	b.n	8003e64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 020f 	and.w	r2, r3, #15
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3304      	adds	r3, #4
 8003e62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f002 ff2a 	bl	8006cc4 <USB_EPStopXfer>
 8003e70:	4603      	mov	r3, r0
 8003e72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e74:	7afb      	ldrb	r3, [r7, #11]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08a      	sub	sp, #40	; 0x28
 8003e82:	af02      	add	r7, sp, #8
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	3338      	adds	r3, #56	; 0x38
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1a      	ldr	r2, [r3, #32]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d901      	bls.n	8003eb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06c      	b.n	8003f90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d902      	bls.n	8003ed2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3303      	adds	r3, #3
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eda:	e02b      	b.n	8003f34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d902      	bls.n	8003ef8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3303      	adds	r3, #3
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6919      	ldr	r1, [r3, #16]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4603      	mov	r3, r0
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f002 ff7e 	bl	8006e18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d809      	bhi.n	8003f5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d203      	bcs.n	8003f5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1be      	bne.n	8003edc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d811      	bhi.n	8003f8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	333c      	adds	r3, #60	; 0x3c
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d17b      	bne.n	80040c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4a61      	ldr	r2, [pc, #388]	; (8004160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f240 80b9 	bls.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80b3 	beq.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004000:	6093      	str	r3, [r2, #8]
 8004002:	e0a7      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	2320      	movs	r3, #32
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	e098      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 8093 	bne.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4a4b      	ldr	r2, [pc, #300]	; (8004160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d90f      	bls.n	8004056 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	461a      	mov	r2, r3
 800404e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004052:	6093      	str	r3, [r2, #8]
 8004054:	e07e      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	440b      	add	r3, r1
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d114      	bne.n	80040b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040a0:	461a      	mov	r2, r3
 80040a2:	2101      	movs	r1, #1
 80040a4:	f003 f94e 	bl	8007344 <USB_EP0_OutStart>
 80040a8:	e006      	b.n	80040b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f005 fa26 	bl	8009510 <HAL_PCD_DataOutStageCallback>
 80040c4:	e046      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4a26      	ldr	r2, [pc, #152]	; (8004164 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d124      	bne.n	8004118 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ea:	6093      	str	r3, [r2, #8]
 80040ec:	e032      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	2320      	movs	r3, #32
 8004108:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f005 f9fd 	bl	8009510 <HAL_PCD_DataOutStageCallback>
 8004116:	e01d      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d114      	bne.n	8004148 <PCD_EP_OutXfrComplete_int+0x1b0>
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004140:	461a      	mov	r2, r3
 8004142:	2100      	movs	r1, #0
 8004144:	f003 f8fe 	bl	8007344 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f005 f9de 	bl	8009510 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	4f54300a 	.word	0x4f54300a
 8004164:	4f54310a 	.word	0x4f54310a

08004168 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	333c      	adds	r3, #60	; 0x3c
 8004180:	3304      	adds	r3, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d90e      	bls.n	80041bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	461a      	mov	r2, r3
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f005 f995 	bl	80094ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d90c      	bls.n	80041e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041dc:	461a      	mov	r2, r3
 80041de:	2101      	movs	r1, #1
 80041e0:	f003 f8b0 	bl	8007344 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	4f54300a 	.word	0x4f54300a

080041f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
 8004200:	4613      	mov	r3, r2
 8004202:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004212:	883b      	ldrh	r3, [r7, #0]
 8004214:	0419      	lsls	r1, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	430a      	orrs	r2, r1
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
 8004220:	e028      	b.n	8004274 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e00d      	b.n	8004252 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	3340      	adds	r3, #64	; 0x40
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4413      	add	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	3b01      	subs	r3, #1
 8004258:	429a      	cmp	r2, r3
 800425a:	d3ec      	bcc.n	8004236 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800425c:	883b      	ldrh	r3, [r7, #0]
 800425e:	0418      	lsls	r0, r3, #16
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	3b01      	subs	r3, #1
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	4302      	orrs	r2, r0
 800426c:	3340      	adds	r3, #64	; 0x40
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	887a      	ldrh	r2, [r7, #2]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e267      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d075      	beq.n	80043c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00c      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e242      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x74>
 8004322:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6f      	ldr	r2, [pc, #444]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6c      	ldr	r2, [pc, #432]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd f846 	bl	8001404 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437c:	f7fd f842 	bl	8001404 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e207      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc0>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fd f832 	bl	8001404 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fd f82e 	bl	8001404 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1f3      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c7      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4937      	ldr	r1, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fc ffe7 	bl	8001404 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443a:	f7fc ffe3 	bl	8001404 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a8      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fc ffc6 	bl	8001404 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447c:	f7fc ffc2 	bl	8001404 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e187      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fc ffa6 	bl	8001404 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fc ffa2 	bl	8001404 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e167      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x200>
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fc ff8f 	bl	8001404 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	e00e      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fc ff8b 	bl	8001404 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e150      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ea      	bne.n	80044ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8097 	beq.w	8004650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b7d      	ldr	r3, [pc, #500]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a7c      	ldr	r2, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a73      	ldr	r2, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fc ff4b 	bl	8001404 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fc ff47 	bl	8001404 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e10c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ea>
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	e01c      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a5e      	ldr	r2, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	4b5c      	ldr	r3, [pc, #368]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045c8:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	4b55      	ldr	r3, [pc, #340]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fc ff0c 	bl	8001404 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fc ff08 	bl	8001404 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0cb      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RCC_OscConfig+0x334>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fc fef6 	bl	8001404 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fc fef2 	bl	8001404 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0b5      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004632:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a1 	beq.w	800479c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05c      	beq.n	8004720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d141      	bne.n	80046f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fc fec6 	bl	8001404 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fc fec2 	bl	8001404 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e087      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc fe9b 	bl	8001404 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fc fe97 	bl	8001404 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e05c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x416>
 80046f0:	e054      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fe84 	bl	8001404 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fe80 	bl	8001404 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e045      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
 800471e:	e03d      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e038      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d028      	beq.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d121      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d11a      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cc      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b68      	ldr	r3, [pc, #416]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90c      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d003      	beq.n	800486a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e067      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4934      	ldr	r1, [pc, #208]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800489c:	f7fc fdb2 	bl	8001404 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fc fdae 	bl	8001404 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20c      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fd12 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800
 800496c:	0800ae88 	.word	0x0800ae88
 8004970:	20000014 	.word	0x20000014
 8004974:	20000018 	.word	0x20000018

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b090      	sub	sp, #64	; 0x40
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
 8004984:	2300      	movs	r3, #0
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004988:	2300      	movs	r3, #0
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80a1 	bhi.w	8004ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e09b      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_GetSysClockFreq+0x184>)
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80049b0:	e09b      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b53      	ldr	r3, [pc, #332]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049b6:	e098      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b4f      	ldr	r3, [pc, #316]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4b4d      	ldr	r3, [pc, #308]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b4a      	ldr	r3, [pc, #296]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	627a      	str	r2, [r7, #36]	; 0x24
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049e0:	2100      	movs	r1, #0
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049e4:	fb03 f201 	mul.w	r2, r3, r1
 80049e8:	2300      	movs	r3, #0
 80049ea:	fb00 f303 	mul.w	r3, r0, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	4a43      	ldr	r2, [pc, #268]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f2:	fba0 1202 	umull	r1, r2, r0, r2
 80049f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f8:	460a      	mov	r2, r1
 80049fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80049fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fe:	4413      	add	r3, r2
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a04:	2200      	movs	r2, #0
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	61fa      	str	r2, [r7, #28]
 8004a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a12:	f7fb fc35 	bl	8000280 <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1e:	e053      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a20:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	2200      	movs	r2, #0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	617a      	str	r2, [r7, #20]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a32:	f04f 0b00 	mov.w	fp, #0
 8004a36:	4652      	mov	r2, sl
 8004a38:	465b      	mov	r3, fp
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a52:	eb63 090b 	sbc.w	r9, r3, fp
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	00eb      	lsls	r3, r5, #3
 8004a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a80:	00e2      	lsls	r2, r4, #3
 8004a82:	4614      	mov	r4, r2
 8004a84:	461d      	mov	r5, r3
 8004a86:	eb14 030a 	adds.w	r3, r4, sl
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	eb45 030b 	adc.w	r3, r5, fp
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	028b      	lsls	r3, r1, #10
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	028a      	lsls	r2, r1, #10
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	60fa      	str	r2, [r7, #12]
 8004ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004abc:	f7fb fbe0 	bl	8000280 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3740      	adds	r7, #64	; 0x40
 8004af0:	46bd      	mov	sp, r7
 8004af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	017d7840 	.word	0x017d7840

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000014 	.word	0x20000014

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	0800ae98 	.word	0x0800ae98

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b48:	f7ff ffdc 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0b5b      	lsrs	r3, r3, #13
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800ae98 	.word	0x0800ae98

08004b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07b      	b.n	8004c76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8e:	d009      	beq.n	8004ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	61da      	str	r2, [r3, #28]
 8004b96:	e005      	b.n	8004ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc f8e6 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	ea42 0103 	orr.w	r1, r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0104 	and.w	r1, r3, #4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f003 0210 	and.w	r2, r3, #16
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e041      	b.n	8004d14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fc fa4f 	bl	8001148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 f949 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e041      	b.n	8004db4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f839 	bl	8004dbc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 f8f9 	bl	8004f54 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0208 	bic.w	r2, r2, #8
 8004d70:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0ae      	b.n	8004f4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	f200 809f 	bhi.w	8004f3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004f3d 	.word	0x08004f3d
 8004e0c:	08004f3d 	.word	0x08004f3d
 8004e10:	08004f3d 	.word	0x08004f3d
 8004e14:	08004e79 	.word	0x08004e79
 8004e18:	08004f3d 	.word	0x08004f3d
 8004e1c:	08004f3d 	.word	0x08004f3d
 8004e20:	08004f3d 	.word	0x08004f3d
 8004e24:	08004ebb 	.word	0x08004ebb
 8004e28:	08004f3d 	.word	0x08004f3d
 8004e2c:	08004f3d 	.word	0x08004f3d
 8004e30:	08004f3d 	.word	0x08004f3d
 8004e34:	08004efb 	.word	0x08004efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f908 	bl	8005054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	619a      	str	r2, [r3, #24]
      break;
 8004e76:	e064      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f94e 	bl	8005120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6999      	ldr	r1, [r3, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
      break;
 8004eb8:	e043      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f999 	bl	80051f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0208 	orr.w	r2, r2, #8
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0204 	bic.w	r2, r2, #4
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	61da      	str	r2, [r3, #28]
      break;
 8004ef8:	e023      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f9e3 	bl	80052cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69d9      	ldr	r1, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	021a      	lsls	r2, r3, #8
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	61da      	str	r2, [r3, #28]
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a34      	ldr	r2, [pc, #208]	; (8005038 <TIM_Base_SetConfig+0xe4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00f      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00b      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a31      	ldr	r2, [pc, #196]	; (800503c <TIM_Base_SetConfig+0xe8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a30      	ldr	r2, [pc, #192]	; (8005040 <TIM_Base_SetConfig+0xec>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <TIM_Base_SetConfig+0xf0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <TIM_Base_SetConfig+0xe4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <TIM_Base_SetConfig+0xe8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a21      	ldr	r2, [pc, #132]	; (8005040 <TIM_Base_SetConfig+0xec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <TIM_Base_SetConfig+0xf0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <TIM_Base_SetConfig+0xf4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <TIM_Base_SetConfig+0xf8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <TIM_Base_SetConfig+0xfc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <TIM_Base_SetConfig+0xe4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0302 	bic.w	r3, r3, #2
 800509c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1c      	ldr	r2, [pc, #112]	; (800511c <TIM_OC1_SetConfig+0xc8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10c      	bne.n	80050ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0308 	bic.w	r3, r3, #8
 80050b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <TIM_OC1_SetConfig+0xc8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d111      	bne.n	80050f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40010000 	.word	0x40010000

08005120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0320 	bic.w	r3, r3, #32
 800516a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <TIM_OC2_SetConfig+0xd4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10d      	bne.n	800519c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <TIM_OC2_SetConfig+0xd4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d113      	bne.n	80051cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000

080051f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <TIM_OC3_SetConfig+0xd0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10d      	bne.n	8005272 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <TIM_OC3_SetConfig+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d113      	bne.n	80052a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40010000 	.word	0x40010000

080052cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a10      	ldr	r2, [pc, #64]	; (8005368 <TIM_OC4_SetConfig+0x9c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d109      	bne.n	8005340 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e050      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a15      	ldr	r2, [pc, #84]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e03f      	b.n	80054da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fb fef0 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	; 0x24
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800548a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f929 	bl	80056e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08a      	sub	sp, #40	; 0x28
 80054e6:	af02      	add	r7, sp, #8
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	603b      	str	r3, [r7, #0]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d17c      	bne.n	80055fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_UART_Transmit+0x2c>
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e075      	b.n	80055fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_UART_Transmit+0x3e>
 800551c:	2302      	movs	r3, #2
 800551e:	e06e      	b.n	80055fe <HAL_UART_Transmit+0x11c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2221      	movs	r2, #33	; 0x21
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005536:	f7fb ff65 	bl	8001404 <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005550:	d108      	bne.n	8005564 <HAL_UART_Transmit+0x82>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d104      	bne.n	8005564 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	e003      	b.n	800556c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005574:	e02a      	b.n	80055cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	2180      	movs	r1, #128	; 0x80
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f840 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e036      	b.n	80055fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	3302      	adds	r3, #2
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	e007      	b.n	80055be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	3301      	adds	r3, #1
 80055bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1cf      	bne.n	8005576 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	2140      	movs	r1, #64	; 0x40
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f810 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e006      	b.n	80055fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e000      	b.n	80055fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055fc:	2302      	movs	r3, #2
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b090      	sub	sp, #64	; 0x40
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005616:	e050      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d04c      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x30>
 8005626:	f7fb feed 	bl	8001404 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005632:	429a      	cmp	r2, r3
 8005634:	d241      	bcs.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005656:	637a      	str	r2, [r7, #52]	; 0x34
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800565c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	613b      	str	r3, [r7, #16]
   return(result);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	63bb      	str	r3, [r7, #56]	; 0x38
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800568a:	623a      	str	r2, [r7, #32]
 800568c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	69f9      	ldr	r1, [r7, #28]
 8005690:	6a3a      	ldr	r2, [r7, #32]
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	61bb      	str	r3, [r7, #24]
   return(result);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e00f      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	bf0c      	ite	eq
 80056ca:	2301      	moveq	r3, #1
 80056cc:	2300      	movne	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d09f      	beq.n	8005618 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3740      	adds	r7, #64	; 0x40
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e8:	b0c0      	sub	sp, #256	; 0x100
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	68d9      	ldr	r1, [r3, #12]
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	ea40 0301 	orr.w	r3, r0, r1
 800570c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	431a      	orrs	r2, r3
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	431a      	orrs	r2, r3
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800573c:	f021 010c 	bic.w	r1, r1, #12
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800574a:	430b      	orrs	r3, r1
 800574c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575e:	6999      	ldr	r1, [r3, #24]
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	ea40 0301 	orr.w	r3, r0, r1
 800576a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b8f      	ldr	r3, [pc, #572]	; (80059b0 <UART_SetConfig+0x2cc>)
 8005774:	429a      	cmp	r2, r3
 8005776:	d005      	beq.n	8005784 <UART_SetConfig+0xa0>
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b8d      	ldr	r3, [pc, #564]	; (80059b4 <UART_SetConfig+0x2d0>)
 8005780:	429a      	cmp	r2, r3
 8005782:	d104      	bne.n	800578e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7ff f9de 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8005788:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800578c:	e003      	b.n	8005796 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800578e:	f7ff f9c5 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8005792:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a0:	f040 810c 	bne.w	80059bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057b6:	4622      	mov	r2, r4
 80057b8:	462b      	mov	r3, r5
 80057ba:	1891      	adds	r1, r2, r2
 80057bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80057be:	415b      	adcs	r3, r3
 80057c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057c6:	4621      	mov	r1, r4
 80057c8:	eb12 0801 	adds.w	r8, r2, r1
 80057cc:	4629      	mov	r1, r5
 80057ce:	eb43 0901 	adc.w	r9, r3, r1
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e6:	4690      	mov	r8, r2
 80057e8:	4699      	mov	r9, r3
 80057ea:	4623      	mov	r3, r4
 80057ec:	eb18 0303 	adds.w	r3, r8, r3
 80057f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057f4:	462b      	mov	r3, r5
 80057f6:	eb49 0303 	adc.w	r3, r9, r3
 80057fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800580a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800580e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005812:	460b      	mov	r3, r1
 8005814:	18db      	adds	r3, r3, r3
 8005816:	653b      	str	r3, [r7, #80]	; 0x50
 8005818:	4613      	mov	r3, r2
 800581a:	eb42 0303 	adc.w	r3, r2, r3
 800581e:	657b      	str	r3, [r7, #84]	; 0x54
 8005820:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005828:	f7fa fd2a 	bl	8000280 <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4b61      	ldr	r3, [pc, #388]	; (80059b8 <UART_SetConfig+0x2d4>)
 8005832:	fba3 2302 	umull	r2, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	011c      	lsls	r4, r3, #4
 800583a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800583e:	2200      	movs	r2, #0
 8005840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005844:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800584c:	4642      	mov	r2, r8
 800584e:	464b      	mov	r3, r9
 8005850:	1891      	adds	r1, r2, r2
 8005852:	64b9      	str	r1, [r7, #72]	; 0x48
 8005854:	415b      	adcs	r3, r3
 8005856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800585c:	4641      	mov	r1, r8
 800585e:	eb12 0a01 	adds.w	sl, r2, r1
 8005862:	4649      	mov	r1, r9
 8005864:	eb43 0b01 	adc.w	fp, r3, r1
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005874:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800587c:	4692      	mov	sl, r2
 800587e:	469b      	mov	fp, r3
 8005880:	4643      	mov	r3, r8
 8005882:	eb1a 0303 	adds.w	r3, sl, r3
 8005886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800588a:	464b      	mov	r3, r9
 800588c:	eb4b 0303 	adc.w	r3, fp, r3
 8005890:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058a8:	460b      	mov	r3, r1
 80058aa:	18db      	adds	r3, r3, r3
 80058ac:	643b      	str	r3, [r7, #64]	; 0x40
 80058ae:	4613      	mov	r3, r2
 80058b0:	eb42 0303 	adc.w	r3, r2, r3
 80058b4:	647b      	str	r3, [r7, #68]	; 0x44
 80058b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058be:	f7fa fcdf 	bl	8000280 <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	4b3b      	ldr	r3, [pc, #236]	; (80059b8 <UART_SetConfig+0x2d4>)
 80058ca:	fba3 2301 	umull	r2, r3, r3, r1
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2264      	movs	r2, #100	; 0x64
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	1acb      	subs	r3, r1, r3
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <UART_SetConfig+0x2d4>)
 80058e0:	fba3 2302 	umull	r2, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058ec:	441c      	add	r4, r3
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	63b9      	str	r1, [r7, #56]	; 0x38
 8005908:	415b      	adcs	r3, r3
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005910:	4641      	mov	r1, r8
 8005912:	1851      	adds	r1, r2, r1
 8005914:	6339      	str	r1, [r7, #48]	; 0x30
 8005916:	4649      	mov	r1, r9
 8005918:	414b      	adcs	r3, r1
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005928:	4659      	mov	r1, fp
 800592a:	00cb      	lsls	r3, r1, #3
 800592c:	4651      	mov	r1, sl
 800592e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005932:	4651      	mov	r1, sl
 8005934:	00ca      	lsls	r2, r1, #3
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	4603      	mov	r3, r0
 800593c:	4642      	mov	r2, r8
 800593e:	189b      	adds	r3, r3, r2
 8005940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005944:	464b      	mov	r3, r9
 8005946:	460a      	mov	r2, r1
 8005948:	eb42 0303 	adc.w	r3, r2, r3
 800594c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800595c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005964:	460b      	mov	r3, r1
 8005966:	18db      	adds	r3, r3, r3
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
 800596a:	4613      	mov	r3, r2
 800596c:	eb42 0303 	adc.w	r3, r2, r3
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005976:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800597a:	f7fa fc81 	bl	8000280 <__aeabi_uldivmod>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <UART_SetConfig+0x2d4>)
 8005984:	fba3 1302 	umull	r1, r3, r3, r2
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	2164      	movs	r1, #100	; 0x64
 800598c:	fb01 f303 	mul.w	r3, r1, r3
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	3332      	adds	r3, #50	; 0x32
 8005996:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <UART_SetConfig+0x2d4>)
 8005998:	fba2 2303 	umull	r2, r3, r2, r3
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	f003 0207 	and.w	r2, r3, #7
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4422      	add	r2, r4
 80059aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059ac:	e105      	b.n	8005bba <UART_SetConfig+0x4d6>
 80059ae:	bf00      	nop
 80059b0:	40011000 	.word	0x40011000
 80059b4:	40011400 	.word	0x40011400
 80059b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059ce:	4642      	mov	r2, r8
 80059d0:	464b      	mov	r3, r9
 80059d2:	1891      	adds	r1, r2, r2
 80059d4:	6239      	str	r1, [r7, #32]
 80059d6:	415b      	adcs	r3, r3
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
 80059da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059de:	4641      	mov	r1, r8
 80059e0:	1854      	adds	r4, r2, r1
 80059e2:	4649      	mov	r1, r9
 80059e4:	eb43 0501 	adc.w	r5, r3, r1
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	00eb      	lsls	r3, r5, #3
 80059f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f6:	00e2      	lsls	r2, r4, #3
 80059f8:	4614      	mov	r4, r2
 80059fa:	461d      	mov	r5, r3
 80059fc:	4643      	mov	r3, r8
 80059fe:	18e3      	adds	r3, r4, r3
 8005a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a04:	464b      	mov	r3, r9
 8005a06:	eb45 0303 	adc.w	r3, r5, r3
 8005a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	008b      	lsls	r3, r1, #2
 8005a2e:	4621      	mov	r1, r4
 8005a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a34:	4621      	mov	r1, r4
 8005a36:	008a      	lsls	r2, r1, #2
 8005a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a3c:	f7fa fc20 	bl	8000280 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4b60      	ldr	r3, [pc, #384]	; (8005bc8 <UART_SetConfig+0x4e4>)
 8005a46:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	011c      	lsls	r4, r3, #4
 8005a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a60:	4642      	mov	r2, r8
 8005a62:	464b      	mov	r3, r9
 8005a64:	1891      	adds	r1, r2, r2
 8005a66:	61b9      	str	r1, [r7, #24]
 8005a68:	415b      	adcs	r3, r3
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a70:	4641      	mov	r1, r8
 8005a72:	1851      	adds	r1, r2, r1
 8005a74:	6139      	str	r1, [r7, #16]
 8005a76:	4649      	mov	r1, r9
 8005a78:	414b      	adcs	r3, r1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a88:	4659      	mov	r1, fp
 8005a8a:	00cb      	lsls	r3, r1, #3
 8005a8c:	4651      	mov	r1, sl
 8005a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a92:	4651      	mov	r1, sl
 8005a94:	00ca      	lsls	r2, r1, #3
 8005a96:	4610      	mov	r0, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	189b      	adds	r3, r3, r2
 8005aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ac8:	4649      	mov	r1, r9
 8005aca:	008b      	lsls	r3, r1, #2
 8005acc:	4641      	mov	r1, r8
 8005ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	008a      	lsls	r2, r1, #2
 8005ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ada:	f7fa fbd1 	bl	8000280 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4b39      	ldr	r3, [pc, #228]	; (8005bc8 <UART_SetConfig+0x4e4>)
 8005ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	2164      	movs	r1, #100	; 0x64
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	3332      	adds	r3, #50	; 0x32
 8005af6:	4a34      	ldr	r2, [pc, #208]	; (8005bc8 <UART_SetConfig+0x4e4>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b02:	441c      	add	r4, r3
 8005b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b08:	2200      	movs	r2, #0
 8005b0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b0c:	677a      	str	r2, [r7, #116]	; 0x74
 8005b0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b12:	4642      	mov	r2, r8
 8005b14:	464b      	mov	r3, r9
 8005b16:	1891      	adds	r1, r2, r2
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	415b      	adcs	r3, r3
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b22:	4641      	mov	r1, r8
 8005b24:	1851      	adds	r1, r2, r1
 8005b26:	6039      	str	r1, [r7, #0]
 8005b28:	4649      	mov	r1, r9
 8005b2a:	414b      	adcs	r3, r1
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b3a:	4659      	mov	r1, fp
 8005b3c:	00cb      	lsls	r3, r1, #3
 8005b3e:	4651      	mov	r1, sl
 8005b40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b44:	4651      	mov	r1, sl
 8005b46:	00ca      	lsls	r2, r1, #3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4642      	mov	r2, r8
 8005b50:	189b      	adds	r3, r3, r2
 8005b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b54:	464b      	mov	r3, r9
 8005b56:	460a      	mov	r2, r1
 8005b58:	eb42 0303 	adc.w	r3, r2, r3
 8005b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	663b      	str	r3, [r7, #96]	; 0x60
 8005b68:	667a      	str	r2, [r7, #100]	; 0x64
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b76:	4649      	mov	r1, r9
 8005b78:	008b      	lsls	r3, r1, #2
 8005b7a:	4641      	mov	r1, r8
 8005b7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b80:	4641      	mov	r1, r8
 8005b82:	008a      	lsls	r2, r1, #2
 8005b84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b88:	f7fa fb7a 	bl	8000280 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <UART_SetConfig+0x4e4>)
 8005b92:	fba3 1302 	umull	r1, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2164      	movs	r1, #100	; 0x64
 8005b9a:	fb01 f303 	mul.w	r3, r1, r3
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	3332      	adds	r3, #50	; 0x32
 8005ba4:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <UART_SetConfig+0x4e4>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4422      	add	r2, r4
 8005bb8:	609a      	str	r2, [r3, #8]
}
 8005bba:	bf00      	nop
 8005bbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc6:	bf00      	nop
 8005bc8:	51eb851f 	.word	0x51eb851f

08005bcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bcc:	b084      	sub	sp, #16
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	f107 001c 	add.w	r0, r7, #28
 8005bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d122      	bne.n	8005c2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d105      	bne.n	8005c1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 fbee 	bl	8007400 <USB_CoreReset>
 8005c24:	4603      	mov	r3, r0
 8005c26:	73fb      	strb	r3, [r7, #15]
 8005c28:	e01a      	b.n	8005c60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fbe2 	bl	8007400 <USB_CoreReset>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
 8005c52:	e005      	b.n	8005c60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10b      	bne.n	8005c7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f043 0206 	orr.w	r2, r3, #6
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8a:	b004      	add	sp, #16
 8005c8c:	4770      	bx	lr
	...

08005c90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d165      	bne.n	8005d70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4a41      	ldr	r2, [pc, #260]	; (8005dac <USB_SetTurnaroundTime+0x11c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d906      	bls.n	8005cba <USB_SetTurnaroundTime+0x2a>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4a40      	ldr	r2, [pc, #256]	; (8005db0 <USB_SetTurnaroundTime+0x120>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d202      	bcs.n	8005cba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005cb4:	230f      	movs	r3, #15
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e062      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4a3c      	ldr	r2, [pc, #240]	; (8005db0 <USB_SetTurnaroundTime+0x120>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d306      	bcc.n	8005cd0 <USB_SetTurnaroundTime+0x40>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4a3b      	ldr	r2, [pc, #236]	; (8005db4 <USB_SetTurnaroundTime+0x124>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d202      	bcs.n	8005cd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005cca:	230e      	movs	r3, #14
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e057      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4a38      	ldr	r2, [pc, #224]	; (8005db4 <USB_SetTurnaroundTime+0x124>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d306      	bcc.n	8005ce6 <USB_SetTurnaroundTime+0x56>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4a37      	ldr	r2, [pc, #220]	; (8005db8 <USB_SetTurnaroundTime+0x128>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d202      	bcs.n	8005ce6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ce0:	230d      	movs	r3, #13
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e04c      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4a33      	ldr	r2, [pc, #204]	; (8005db8 <USB_SetTurnaroundTime+0x128>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d306      	bcc.n	8005cfc <USB_SetTurnaroundTime+0x6c>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4a32      	ldr	r2, [pc, #200]	; (8005dbc <USB_SetTurnaroundTime+0x12c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d802      	bhi.n	8005cfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e041      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <USB_SetTurnaroundTime+0x12c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d906      	bls.n	8005d12 <USB_SetTurnaroundTime+0x82>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <USB_SetTurnaroundTime+0x130>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d802      	bhi.n	8005d12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d0c:	230b      	movs	r3, #11
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e036      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <USB_SetTurnaroundTime+0x130>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d906      	bls.n	8005d28 <USB_SetTurnaroundTime+0x98>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <USB_SetTurnaroundTime+0x134>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d802      	bhi.n	8005d28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d22:	230a      	movs	r3, #10
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e02b      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <USB_SetTurnaroundTime+0x134>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d906      	bls.n	8005d3e <USB_SetTurnaroundTime+0xae>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <USB_SetTurnaroundTime+0x138>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d202      	bcs.n	8005d3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d38:	2309      	movs	r3, #9
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e020      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <USB_SetTurnaroundTime+0x138>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d306      	bcc.n	8005d54 <USB_SetTurnaroundTime+0xc4>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <USB_SetTurnaroundTime+0x13c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d802      	bhi.n	8005d54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d4e:	2308      	movs	r3, #8
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e015      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4a1d      	ldr	r2, [pc, #116]	; (8005dcc <USB_SetTurnaroundTime+0x13c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d906      	bls.n	8005d6a <USB_SetTurnaroundTime+0xda>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4a1c      	ldr	r2, [pc, #112]	; (8005dd0 <USB_SetTurnaroundTime+0x140>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d202      	bcs.n	8005d6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d64:	2307      	movs	r3, #7
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e00a      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d6a:	2306      	movs	r3, #6
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e007      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d76:	2309      	movs	r3, #9
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e001      	b.n	8005d80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d7c:	2309      	movs	r3, #9
 8005d7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	029b      	lsls	r3, r3, #10
 8005d94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	00d8acbf 	.word	0x00d8acbf
 8005db0:	00e4e1c0 	.word	0x00e4e1c0
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	01067380 	.word	0x01067380
 8005dbc:	011a499f 	.word	0x011a499f
 8005dc0:	01312cff 	.word	0x01312cff
 8005dc4:	014ca43f 	.word	0x014ca43f
 8005dc8:	016e3600 	.word	0x016e3600
 8005dcc:	01a6ab1f 	.word	0x01a6ab1f
 8005dd0:	01e84800 	.word	0x01e84800

08005dd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 0201 	bic.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d115      	bne.n	8005e66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e46:	2001      	movs	r0, #1
 8005e48:	f7fb fae8 	bl	800141c <HAL_Delay>
      ms++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fa45 	bl	80072e2 <USB_GetMode>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d01e      	beq.n	8005e9c <USB_SetCurrentMode+0x84>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b31      	cmp	r3, #49	; 0x31
 8005e62:	d9f0      	bls.n	8005e46 <USB_SetCurrentMode+0x2e>
 8005e64:	e01a      	b.n	8005e9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d115      	bne.n	8005e98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f7fb facf 	bl	800141c <HAL_Delay>
      ms++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 fa2c 	bl	80072e2 <USB_GetMode>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <USB_SetCurrentMode+0x84>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b31      	cmp	r3, #49	; 0x31
 8005e94:	d9f0      	bls.n	8005e78 <USB_SetCurrentMode+0x60>
 8005e96:	e001      	b.n	8005e9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e005      	b.n	8005ea8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b32      	cmp	r3, #50	; 0x32
 8005ea0:	d101      	bne.n	8005ea6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b086      	sub	sp, #24
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005eca:	2300      	movs	r3, #0
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	e009      	b.n	8005ee4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	3340      	adds	r3, #64	; 0x40
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	2200      	movs	r2, #0
 8005edc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b0e      	cmp	r3, #14
 8005ee8:	d9f2      	bls.n	8005ed0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d11c      	bne.n	8005f2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005efe:	f043 0302 	orr.w	r3, r3, #2
 8005f02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
 8005f28:	e00b      	b.n	8005f42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f54:	4619      	mov	r1, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	680b      	ldr	r3, [r1, #0]
 8005f60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d10c      	bne.n	8005f82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f6e:	2100      	movs	r1, #0
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f965 	bl	8006240 <USB_SetDevSpeed>
 8005f76:	e008      	b.n	8005f8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f78:	2101      	movs	r1, #1
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f960 	bl	8006240 <USB_SetDevSpeed>
 8005f80:	e003      	b.n	8005f8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f82:	2103      	movs	r1, #3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f95b 	bl	8006240 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f8a:	2110      	movs	r1, #16
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f8f3 	bl	8006178 <USB_FlushTxFifo>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f91f 	bl	80061e0 <USB_FlushRxFifo>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e043      	b.n	800605e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fec:	d118      	bne.n	8006020 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	461a      	mov	r2, r3
 8006002:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	e013      	b.n	8006032 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006016:	461a      	mov	r2, r3
 8006018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e008      	b.n	8006032 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	461a      	mov	r2, r3
 800602e:	2300      	movs	r3, #0
 8006030:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	461a      	mov	r2, r3
 8006040:	2300      	movs	r3, #0
 8006042:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	461a      	mov	r2, r3
 8006052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006056:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3301      	adds	r3, #1
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3b7      	bcc.n	8005fd6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e043      	b.n	80060f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800607e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006082:	d118      	bne.n	80060b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	461a      	mov	r2, r3
 8006098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	e013      	b.n	80060c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	461a      	mov	r2, r3
 80060ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e008      	b.n	80060c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	461a      	mov	r2, r3
 80060c4:	2300      	movs	r3, #0
 80060c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	461a      	mov	r2, r3
 80060e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	3301      	adds	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3b7      	bcc.n	800606c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800610a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800610e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800611c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f043 0210 	orr.w	r2, r3, #16
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <USB_DevInit+0x2c4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800613c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f043 0208 	orr.w	r2, r3, #8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800614e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d107      	bne.n	8006164 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006164:	7dfb      	ldrb	r3, [r7, #23]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006170:	b004      	add	sp, #16
 8006172:	4770      	bx	lr
 8006174:	803c3800 	.word	0x803c3800

08006178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <USB_FlushTxFifo+0x64>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e01b      	b.n	80061d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	daf2      	bge.n	8006186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	019b      	lsls	r3, r3, #6
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4a08      	ldr	r2, [pc, #32]	; (80061dc <USB_FlushTxFifo+0x64>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e006      	b.n	80061d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d0f0      	beq.n	80061b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	00030d40 	.word	0x00030d40

080061e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3301      	adds	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a11      	ldr	r2, [pc, #68]	; (800623c <USB_FlushRxFifo+0x5c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d901      	bls.n	80061fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e018      	b.n	8006230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	daf2      	bge.n	80061ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2210      	movs	r2, #16
 800620e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <USB_FlushRxFifo+0x5c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b10      	cmp	r3, #16
 800622c:	d0f0      	beq.n	8006210 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	00030d40 	.word	0x00030d40

08006240 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	68f9      	ldr	r1, [r7, #12]
 800625c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006260:	4313      	orrs	r3, r2
 8006262:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006272:	b480      	push	{r7}
 8006274:	b087      	sub	sp, #28
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0306 	and.w	r3, r3, #6
 800628a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]
 8006296:	e00a      	b.n	80062ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d002      	beq.n	80062a4 <USB_GetDevSpeed+0x32>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b06      	cmp	r3, #6
 80062a2:	d102      	bne.n	80062aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062a4:	2302      	movs	r3, #2
 80062a6:	75fb      	strb	r3, [r7, #23]
 80062a8:	e001      	b.n	80062ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80062aa:	230f      	movs	r3, #15
 80062ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d13a      	bne.n	800634e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	2101      	movs	r1, #1
 80062ea:	fa01 f303 	lsl.w	r3, r1, r3
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	68f9      	ldr	r1, [r7, #12]
 80062f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062f6:	4313      	orrs	r3, r2
 80062f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d155      	bne.n	80063bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	791b      	ldrb	r3, [r3, #4]
 800632a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800632c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	059b      	lsls	r3, r3, #22
 8006332:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006334:	4313      	orrs	r3, r2
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e036      	b.n	80063bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	2101      	movs	r1, #1
 8006360:	fa01 f303 	lsl.w	r3, r1, r3
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800636c:	4313      	orrs	r3, r2
 800636e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d11a      	bne.n	80063bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	791b      	ldrb	r3, [r3, #4]
 80063a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063a2:	430b      	orrs	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d161      	bne.n	80064ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063fe:	d11f      	bne.n	8006440 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800641e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800643e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	2101      	movs	r1, #1
 8006452:	fa01 f303 	lsl.w	r3, r1, r3
 8006456:	b29b      	uxth	r3, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006460:	4013      	ands	r3, r2
 8006462:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	2101      	movs	r1, #1
 8006476:	fa01 f303 	lsl.w	r3, r1, r3
 800647a:	b29b      	uxth	r3, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006484:	4013      	ands	r3, r2
 8006486:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	0159      	lsls	r1, r3, #5
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	440b      	add	r3, r1
 800649e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a2:	4619      	mov	r1, r3
 80064a4:	4b35      	ldr	r3, [pc, #212]	; (800657c <USB_DeactivateEndpoint+0x1b0>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	600b      	str	r3, [r1, #0]
 80064aa:	e060      	b.n	800656e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c2:	d11f      	bne.n	8006504 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	2101      	movs	r1, #1
 8006516:	fa01 f303 	lsl.w	r3, r1, r3
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	43db      	mvns	r3, r3
 800651e:	68f9      	ldr	r1, [r7, #12]
 8006520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006524:	4013      	ands	r3, r2
 8006526:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	2101      	movs	r1, #1
 800653a:	fa01 f303 	lsl.w	r3, r1, r3
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	43db      	mvns	r3, r3
 8006542:	68f9      	ldr	r1, [r7, #12]
 8006544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006548:	4013      	ands	r3, r2
 800654a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	0159      	lsls	r1, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	440b      	add	r3, r1
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	4619      	mov	r1, r3
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <USB_DeactivateEndpoint+0x1b4>)
 800656a:	4013      	ands	r3, r2
 800656c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	ec337800 	.word	0xec337800
 8006580:	eff37800 	.word	0xeff37800

08006584 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 815c 	bne.w	800685e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d132      	bne.n	8006614 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660c:	0cdb      	lsrs	r3, r3, #19
 800660e:	04db      	lsls	r3, r3, #19
 8006610:	6113      	str	r3, [r2, #16]
 8006612:	e074      	b.n	80066fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	0cdb      	lsrs	r3, r3, #19
 8006630:	04db      	lsls	r3, r3, #19
 8006632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	440a      	add	r2, r1
 800664a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006652:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	440b      	add	r3, r1
 8006670:	1e59      	subs	r1, r3, #1
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	fbb1 f3f3 	udiv	r3, r1, r3
 800667a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800667c:	4b9d      	ldr	r3, [pc, #628]	; (80068f4 <USB_EPStartXfer+0x370>)
 800667e:	400b      	ands	r3, r1
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	0148      	lsls	r0, r1, #5
 8006684:	69f9      	ldr	r1, [r7, #28]
 8006686:	4401      	add	r1, r0
 8006688:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800668c:	4313      	orrs	r3, r2
 800668e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a6:	69b9      	ldr	r1, [r7, #24]
 80066a8:	0148      	lsls	r0, r1, #5
 80066aa:	69f9      	ldr	r1, [r7, #28]
 80066ac:	4401      	add	r1, r0
 80066ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066b2:	4313      	orrs	r3, r2
 80066b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	791b      	ldrb	r3, [r3, #4]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d11f      	bne.n	80066fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80066dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d14b      	bne.n	800679c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d009      	beq.n	8006720 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	461a      	mov	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	791b      	ldrb	r3, [r3, #4]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d128      	bne.n	800677a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d110      	bne.n	800675a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	e00f      	b.n	800677a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006778:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006794:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e133      	b.n	8006a04 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	791b      	ldrb	r3, [r3, #4]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d015      	beq.n	80067f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 811b 	beq.w	8006a04 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	2101      	movs	r1, #1
 80067e0:	fa01 f303 	lsl.w	r3, r1, r3
 80067e4:	69f9      	ldr	r1, [r7, #28]
 80067e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ea:	4313      	orrs	r3, r2
 80067ec:	634b      	str	r3, [r1, #52]	; 0x34
 80067ee:	e109      	b.n	8006a04 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d110      	bne.n	8006822 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	e00f      	b.n	8006842 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	440a      	add	r2, r1
 8006838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006840:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	6919      	ldr	r1, [r3, #16]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	b298      	uxth	r0, r3
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	4603      	mov	r3, r0
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fade 	bl	8006e18 <USB_WritePacket>
 800685c:	e0d2      	b.n	8006a04 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	440a      	add	r2, r1
 8006874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006878:	0cdb      	lsrs	r3, r3, #19
 800687a:	04db      	lsls	r3, r3, #19
 800687c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	440a      	add	r2, r1
 8006894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006898:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800689c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d126      	bne.n	80068f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c0:	69b9      	ldr	r1, [r7, #24]
 80068c2:	0148      	lsls	r0, r1, #5
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	4401      	add	r1, r0
 80068c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068cc:	4313      	orrs	r3, r2
 80068ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ee:	6113      	str	r3, [r2, #16]
 80068f0:	e03a      	b.n	8006968 <USB_EPStartXfer+0x3e4>
 80068f2:	bf00      	nop
 80068f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	4413      	add	r3, r2
 8006902:	1e5a      	subs	r2, r3, #1
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	8afa      	ldrh	r2, [r7, #22]
 8006914:	fb03 f202 	mul.w	r2, r3, r2
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	8afb      	ldrh	r3, [r7, #22]
 800692c:	04d9      	lsls	r1, r3, #19
 800692e:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <USB_EPStartXfer+0x48c>)
 8006930:	400b      	ands	r3, r1
 8006932:	69b9      	ldr	r1, [r7, #24]
 8006934:	0148      	lsls	r0, r1, #5
 8006936:	69f9      	ldr	r1, [r7, #28]
 8006938:	4401      	add	r1, r0
 800693a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800693e:	4313      	orrs	r3, r2
 8006940:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	0148      	lsls	r0, r1, #5
 800695c:	69f9      	ldr	r1, [r7, #28]
 800695e:	4401      	add	r1, r0
 8006960:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006964:	4313      	orrs	r3, r2
 8006966:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d10d      	bne.n	800698a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6919      	ldr	r1, [r3, #16]
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	460a      	mov	r2, r1
 8006988:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	791b      	ldrb	r3, [r3, #4]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d128      	bne.n	80069e4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d110      	bne.n	80069c4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e00f      	b.n	80069e4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	1ff80000 	.word	0x1ff80000

08006a14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f040 80ce 	bne.w	8006bd2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d132      	bne.n	8006aa4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9c:	0cdb      	lsrs	r3, r3, #19
 8006a9e:	04db      	lsls	r3, r3, #19
 8006aa0:	6113      	str	r3, [r2, #16]
 8006aa2:	e04e      	b.n	8006b42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abe:	0cdb      	lsrs	r3, r3, #19
 8006ac0:	04db      	lsls	r3, r3, #19
 8006ac2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	0151      	lsls	r1, r2, #5
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	440a      	add	r2, r1
 8006ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ade:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ae2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ae6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d903      	bls.n	8006afc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b32:	6939      	ldr	r1, [r7, #16]
 8006b34:	0148      	lsls	r0, r1, #5
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	4401      	add	r1, r0
 8006b3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d11e      	bne.n	8006b86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	e097      	b.n	8006cb6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ba4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8083 	beq.w	8006cb6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	634b      	str	r3, [r1, #52]	; 0x34
 8006bd0:	e071      	b.n	8006cb6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bec:	0cdb      	lsrs	r3, r3, #19
 8006bee:	04db      	lsls	r3, r3, #19
 8006bf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c64:	6939      	ldr	r1, [r7, #16]
 8006c66:	0148      	lsls	r0, r1, #5
 8006c68:	6979      	ldr	r1, [r7, #20]
 8006c6a:	4401      	add	r1, r0
 8006c6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c70:	4313      	orrs	r3, r2
 8006c72:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10d      	bne.n	8006c96 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	6919      	ldr	r1, [r3, #16]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c92:	460a      	mov	r2, r1
 8006c94:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	785b      	ldrb	r3, [r3, #1]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d14a      	bne.n	8006d78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cfa:	f040 8086 	bne.w	8006e0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	7812      	ldrb	r2, [r2, #0]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d902      	bls.n	8006d5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5a:	e056      	b.n	8006e0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d74:	d0e7      	beq.n	8006d46 <USB_EPStopXfer+0x82>
 8006d76:	e048      	b.n	8006e0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d90:	d13b      	bne.n	8006e0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006db4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d902      	bls.n	8006df0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
          break;
 8006dee:	e00c      	b.n	8006e0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d0e7      	beq.n	8006dda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b089      	sub	sp, #36	; 0x24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4611      	mov	r1, r2
 8006e24:	461a      	mov	r2, r3
 8006e26:	460b      	mov	r3, r1
 8006e28:	71fb      	strb	r3, [r7, #7]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d123      	bne.n	8006e86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e3e:	88bb      	ldrh	r3, [r7, #4]
 8006e40:	3303      	adds	r3, #3
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e46:	2300      	movs	r3, #0
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e018      	b.n	8006e7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	031a      	lsls	r2, r3, #12
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e58:	461a      	mov	r2, r3
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	3301      	adds	r3, #1
 8006e64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d3e2      	bcc.n	8006e4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3724      	adds	r7, #36	; 0x24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b08b      	sub	sp, #44	; 0x2c
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	089b      	lsrs	r3, r3, #2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	e014      	b.n	8006eea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	3301      	adds	r3, #1
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	3301      	adds	r3, #1
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	623b      	str	r3, [r7, #32]
 8006eea:	6a3a      	ldr	r2, [r7, #32]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d3e6      	bcc.n	8006ec0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ef2:	8bfb      	ldrh	r3, [r7, #30]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01e      	beq.n	8006f36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f02:	461a      	mov	r2, r3
 8006f04:	f107 0310 	add.w	r3, r7, #16
 8006f08:	6812      	ldr	r2, [r2, #0]
 8006f0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	701a      	strb	r2, [r3, #0]
      i++;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	3301      	adds	r3, #1
 8006f22:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	3301      	adds	r3, #1
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006f2a:	8bfb      	ldrh	r3, [r7, #30]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f30:	8bfb      	ldrh	r3, [r7, #30]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ea      	bne.n	8006f0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	372c      	adds	r7, #44	; 0x2c
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	785b      	ldrb	r3, [r3, #1]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d12c      	bne.n	8006fba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db12      	blt.n	8006f98 <USB_EPSetStall+0x54>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e02b      	b.n	8007012 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db12      	blt.n	8006ff2 <USB_EPSetStall+0xae>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00f      	beq.n	8006ff2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800700c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007010:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d128      	bne.n	800708e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800705a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	791b      	ldrb	r3, [r3, #4]
 8007060:	2b03      	cmp	r3, #3
 8007062:	d003      	beq.n	800706c <USB_EPClearStall+0x4c>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	791b      	ldrb	r3, [r3, #4]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d138      	bne.n	80070de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e027      	b.n	80070de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	791b      	ldrb	r3, [r3, #4]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d003      	beq.n	80070be <USB_EPClearStall+0x9e>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d10f      	bne.n	80070de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800710a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800710e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007120:	68f9      	ldr	r1, [r7, #12]
 8007122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007126:	4313      	orrs	r3, r2
 8007128:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007152:	f023 0303 	bic.w	r3, r3, #3
 8007156:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007166:	f023 0302 	bic.w	r3, r3, #2
 800716a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007194:	f023 0303 	bic.w	r3, r3, #3
 8007198:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a8:	f043 0302 	orr.w	r3, r3, #2
 80071ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4013      	ands	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4013      	ands	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	0c1b      	lsrs	r3, r3, #16
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	b29b      	uxth	r3, r3
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	460b      	mov	r3, r1
 8007254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4013      	ands	r3, r2
 8007276:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007278:	68bb      	ldr	r3, [r7, #8]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007286:	b480      	push	{r7}
 8007288:	b087      	sub	sp, #28
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	fa22 f303 	lsr.w	r3, r2, r3
 80072b6:	01db      	lsls	r3, r3, #7
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4013      	ands	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072d4:	68bb      	ldr	r3, [r7, #8]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0301 	and.w	r3, r3, #1
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007318:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800731c:	f023 0307 	bic.w	r3, r3, #7
 8007320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	460b      	mov	r3, r1
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	333c      	adds	r3, #60	; 0x3c
 800735a:	3304      	adds	r3, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4a26      	ldr	r2, [pc, #152]	; (80073fc <USB_EP0_OutStart+0xb8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d90a      	bls.n	800737e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007378:	d101      	bne.n	800737e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	e037      	b.n	80073ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007384:	461a      	mov	r2, r3
 8007386:	2300      	movs	r3, #0
 8007388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800739c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ac:	f043 0318 	orr.w	r3, r3, #24
 80073b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80073c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d10f      	bne.n	80073ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	461a      	mov	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80073ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	4f54300a 	.word	0x4f54300a

08007400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4a13      	ldr	r2, [pc, #76]	; (8007464 <USB_CoreReset+0x64>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e01b      	b.n	8007456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	daf2      	bge.n	800740c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f043 0201 	orr.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4a09      	ldr	r2, [pc, #36]	; (8007464 <USB_CoreReset+0x64>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e006      	b.n	8007456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	d0f0      	beq.n	8007436 <USB_CoreReset+0x36>

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	00030d40 	.word	0x00030d40

08007468 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007474:	2018      	movs	r0, #24
 8007476:	f002 fa99 	bl	80099ac <USBD_static_malloc>
 800747a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	32b0      	adds	r2, #176	; 0xb0
 800748c:	2100      	movs	r1, #0
 800748e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007492:	2302      	movs	r3, #2
 8007494:	e08a      	b.n	80075ac <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	32b0      	adds	r2, #176	; 0xb0
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	32b0      	adds	r2, #176	; 0xb0
 80074b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	7c1b      	ldrb	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d11b      	bne.n	80074fa <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80074c2:	4b3c      	ldr	r3, [pc, #240]	; (80075b4 <USBD_CUSTOM_HID_Init+0x14c>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	3326      	adds	r3, #38	; 0x26
 80074d8:	2205      	movs	r2, #5
 80074da:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80074dc:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <USBD_CUSTOM_HID_Init+0x150>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f003 020f 	and.w	r2, r3, #15
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80074f4:	2205      	movs	r2, #5
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e01a      	b.n	8007530 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80074fa:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <USBD_CUSTOM_HID_Init+0x14c>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	f003 020f 	and.w	r2, r3, #15
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	3326      	adds	r3, #38	; 0x26
 8007510:	2205      	movs	r2, #5
 8007512:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007514:	4b28      	ldr	r3, [pc, #160]	; (80075b8 <USBD_CUSTOM_HID_Init+0x150>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 020f 	and.w	r2, r3, #15
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	440b      	add	r3, r1
 8007528:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800752c:	2205      	movs	r2, #5
 800752e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8007530:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <USBD_CUSTOM_HID_Init+0x14c>)
 8007532:	7819      	ldrb	r1, [r3, #0]
 8007534:	2302      	movs	r3, #2
 8007536:	2203      	movs	r2, #3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f002 f926 	bl	800978a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800753e:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <USBD_CUSTOM_HID_Init+0x14c>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f003 020f 	and.w	r2, r3, #15
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	3324      	adds	r3, #36	; 0x24
 8007554:	2201      	movs	r2, #1
 8007556:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007558:	4b17      	ldr	r3, [pc, #92]	; (80075b8 <USBD_CUSTOM_HID_Init+0x150>)
 800755a:	7819      	ldrb	r1, [r3, #0]
 800755c:	2302      	movs	r3, #2
 800755e:	2203      	movs	r2, #3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 f912 	bl	800978a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <USBD_CUSTOM_HID_Init+0x150>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f003 020f 	and.w	r2, r3, #15
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800757e:	2201      	movs	r2, #1
 8007580:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	33b0      	adds	r3, #176	; 0xb0
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <USBD_CUSTOM_HID_Init+0x150>)
 800759e:	7819      	ldrb	r1, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	2302      	movs	r3, #2
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f002 f9df 	bl	8009968 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	2000009a 	.word	0x2000009a
 80075b8:	2000009b 	.word	0x2000009b

080075bc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80075c8:	4b37      	ldr	r3, [pc, #220]	; (80076a8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f002 f901 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80075d4:	4b34      	ldr	r3, [pc, #208]	; (80076a8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f003 020f 	and.w	r2, r3, #15
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	3324      	adds	r3, #36	; 0x24
 80075ea:	2200      	movs	r2, #0
 80075ec:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 020f 	and.w	r2, r3, #15
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	3326      	adds	r3, #38	; 0x26
 8007604:	2200      	movs	r2, #0
 8007606:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007608:	4b28      	ldr	r3, [pc, #160]	; (80076ac <USBD_CUSTOM_HID_DeInit+0xf0>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f002 f8e1 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007614:	4b25      	ldr	r3, [pc, #148]	; (80076ac <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	f003 020f 	and.w	r2, r3, #15
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800762c:	2200      	movs	r2, #0
 800762e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007630:	4b1e      	ldr	r3, [pc, #120]	; (80076ac <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	f003 020f 	and.w	r2, r3, #15
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	440b      	add	r3, r1
 8007644:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007648:	2200      	movs	r2, #0
 800764a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32b0      	adds	r2, #176	; 0xb0
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01f      	beq.n	800769e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	33b0      	adds	r3, #176	; 0xb0
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	32b0      	adds	r2, #176	; 0xb0
 800767c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007680:	4618      	mov	r0, r3
 8007682:	f002 f9a1 	bl	80099c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	32b0      	adds	r2, #176	; 0xb0
 8007690:	2100      	movs	r1, #0
 8007692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	2000009a 	.word	0x2000009a
 80076ac:	2000009b 	.word	0x2000009b

080076b0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	32b0      	adds	r2, #176	; 0xb0
 80076c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e0f8      	b.n	80078d6 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d056      	beq.n	800779e <USBD_CUSTOM_HID_Setup+0xee>
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	f040 80e8 	bne.w	80078c6 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	3b02      	subs	r3, #2
 80076fc:	2b09      	cmp	r3, #9
 80076fe:	d846      	bhi.n	800778e <USBD_CUSTOM_HID_Setup+0xde>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBD_CUSTOM_HID_Setup+0x58>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	08007761 	.word	0x08007761
 800770c:	0800773f 	.word	0x0800773f
 8007710:	0800778f 	.word	0x0800778f
 8007714:	0800778f 	.word	0x0800778f
 8007718:	0800778f 	.word	0x0800778f
 800771c:	0800778f 	.word	0x0800778f
 8007720:	0800778f 	.word	0x0800778f
 8007724:	08007771 	.word	0x08007771
 8007728:	0800774f 	.word	0x0800774f
 800772c:	08007731 	.word	0x08007731
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	885b      	ldrh	r3, [r3, #2]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	605a      	str	r2, [r3, #4]
          break;
 800773c:	e02e      	b.n	800779c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	3304      	adds	r3, #4
 8007742:	2201      	movs	r2, #1
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fc94 	bl	8009074 <USBD_CtlSendData>
          break;
 800774c:	e026      	b.n	800779c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b29b      	uxth	r3, r3
 8007756:	b2db      	uxtb	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	609a      	str	r2, [r3, #8]
          break;
 800775e:	e01d      	b.n	800779c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	3308      	adds	r3, #8
 8007764:	2201      	movs	r2, #1
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fc83 	bl	8009074 <USBD_CtlSendData>
          break;
 800776e:	e015      	b.n	800779c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2201      	movs	r2, #1
 8007774:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007776:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	88db      	ldrh	r3, [r3, #6]
 800777c:	2b02      	cmp	r3, #2
 800777e:	bf28      	it	cs
 8007780:	2302      	movcs	r3, #2
 8007782:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007784:	461a      	mov	r2, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fca0 	bl	80090cc <USBD_CtlPrepareRx>
          break;
 800778c:	e006      	b.n	800779c <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 fbfe 	bl	8008f92 <USBD_CtlError>
          ret = USBD_FAIL;
 8007796:	2303      	movs	r3, #3
 8007798:	75fb      	strb	r3, [r7, #23]
          break;
 800779a:	bf00      	nop
      }
      break;
 800779c:	e09a      	b.n	80078d4 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b0b      	cmp	r3, #11
 80077a4:	f200 8086 	bhi.w	80078b4 <USBD_CUSTOM_HID_Setup+0x204>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <USBD_CUSTOM_HID_Setup+0x100>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077e1 	.word	0x080077e1
 80077b4:	080078c3 	.word	0x080078c3
 80077b8:	080078b5 	.word	0x080078b5
 80077bc:	080078b5 	.word	0x080078b5
 80077c0:	080078b5 	.word	0x080078b5
 80077c4:	080078b5 	.word	0x080078b5
 80077c8:	0800780b 	.word	0x0800780b
 80077cc:	080078b5 	.word	0x080078b5
 80077d0:	080078b5 	.word	0x080078b5
 80077d4:	080078b5 	.word	0x080078b5
 80077d8:	08007863 	.word	0x08007863
 80077dc:	0800788d 	.word	0x0800788d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d107      	bne.n	80077fc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077ec:	f107 030e 	add.w	r3, r7, #14
 80077f0:	2202      	movs	r2, #2
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fc3d 	bl	8009074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077fa:	e063      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fbc7 	bl	8008f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007804:	2303      	movs	r3, #3
 8007806:	75fb      	strb	r3, [r7, #23]
          break;
 8007808:	e05c      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b22      	cmp	r3, #34	; 0x22
 8007814:	d110      	bne.n	8007838 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	2b02      	cmp	r3, #2
 800781c:	bf28      	it	cs
 800781e:	2302      	movcs	r3, #2
 8007820:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	33b0      	adds	r3, #176	; 0xb0
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	e00d      	b.n	8007854 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	0a1b      	lsrs	r3, r3, #8
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b21      	cmp	r3, #33	; 0x21
 8007842:	d107      	bne.n	8007854 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007844:	4b26      	ldr	r3, [pc, #152]	; (80078e0 <USBD_CUSTOM_HID_Setup+0x230>)
 8007846:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	88db      	ldrh	r3, [r3, #6]
 800784c:	2b09      	cmp	r3, #9
 800784e:	bf28      	it	cs
 8007850:	2309      	movcs	r3, #9
 8007852:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007854:	8bfb      	ldrh	r3, [r7, #30]
 8007856:	461a      	mov	r2, r3
 8007858:	69b9      	ldr	r1, [r7, #24]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fc0a 	bl	8009074 <USBD_CtlSendData>
          break;
 8007860:	e030      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b03      	cmp	r3, #3
 800786c:	d107      	bne.n	800787e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	330c      	adds	r3, #12
 8007872:	2201      	movs	r2, #1
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 fbfc 	bl	8009074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800787c:	e022      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 fb86 	bl	8008f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	75fb      	strb	r3, [r7, #23]
          break;
 800788a:	e01b      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b03      	cmp	r3, #3
 8007896:	d106      	bne.n	80078a6 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	885b      	ldrh	r3, [r3, #2]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078a4:	e00e      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fb72 	bl	8008f92 <USBD_CtlError>
            ret = USBD_FAIL;
 80078ae:	2303      	movs	r3, #3
 80078b0:	75fb      	strb	r3, [r7, #23]
          break;
 80078b2:	e007      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fb6b 	bl	8008f92 <USBD_CtlError>
          ret = USBD_FAIL;
 80078bc:	2303      	movs	r3, #3
 80078be:	75fb      	strb	r3, [r7, #23]
          break;
 80078c0:	e000      	b.n	80078c4 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80078c2:	bf00      	nop
      }
      break;
 80078c4:	e006      	b.n	80078d4 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fb62 	bl	8008f92 <USBD_CtlError>
      ret = USBD_FAIL;
 80078ce:	2303      	movs	r3, #3
 80078d0:	75fb      	strb	r3, [r7, #23]
      break;
 80078d2:	bf00      	nop
  }
  return (uint8_t)ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000084 	.word	0x20000084

080078e4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80078ec:	2181      	movs	r1, #129	; 0x81
 80078ee:	4815      	ldr	r0, [pc, #84]	; (8007944 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80078f0:	f000 fd17 	bl	8008322 <USBD_GetEpDesc>
 80078f4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80078f6:	2101      	movs	r1, #1
 80078f8:	4812      	ldr	r0, [pc, #72]	; (8007944 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80078fa:	f000 fd12 	bl	8008322 <USBD_GetEpDesc>
 80078fe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f042 0202 	orr.w	r2, r2, #2
 800790e:	711a      	strb	r2, [r3, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2205      	movs	r2, #5
 8007918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d009      	beq.n	8007934 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	f042 0202 	orr.w	r2, r2, #2
 8007928:	711a      	strb	r2, [r3, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2205      	movs	r2, #5
 8007932:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2229      	movs	r2, #41	; 0x29
 8007938:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800793a:	4b02      	ldr	r3, [pc, #8]	; (8007944 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000058 	.word	0x20000058

08007948 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007950:	2181      	movs	r1, #129	; 0x81
 8007952:	4815      	ldr	r0, [pc, #84]	; (80079a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007954:	f000 fce5 	bl	8008322 <USBD_GetEpDesc>
 8007958:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800795a:	2101      	movs	r1, #1
 800795c:	4812      	ldr	r0, [pc, #72]	; (80079a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800795e:	f000 fce0 	bl	8008322 <USBD_GetEpDesc>
 8007962:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d009      	beq.n	800797e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f042 0202 	orr.w	r2, r2, #2
 8007972:	711a      	strb	r2, [r3, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2205      	movs	r2, #5
 800797c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d009      	beq.n	8007998 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2200      	movs	r2, #0
 8007988:	f042 0202 	orr.w	r2, r2, #2
 800798c:	711a      	strb	r2, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2205      	movs	r2, #5
 8007996:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2229      	movs	r2, #41	; 0x29
 800799c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800799e:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000058 	.word	0x20000058

080079ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80079b4:	2181      	movs	r1, #129	; 0x81
 80079b6:	4815      	ldr	r0, [pc, #84]	; (8007a0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80079b8:	f000 fcb3 	bl	8008322 <USBD_GetEpDesc>
 80079bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80079be:	2101      	movs	r1, #1
 80079c0:	4812      	ldr	r0, [pc, #72]	; (8007a0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80079c2:	f000 fcae 	bl	8008322 <USBD_GetEpDesc>
 80079c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f042 0202 	orr.w	r2, r2, #2
 80079d6:	711a      	strb	r2, [r3, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2205      	movs	r2, #5
 80079e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f042 0202 	orr.w	r2, r2, #2
 80079f0:	711a      	strb	r2, [r3, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2205      	movs	r2, #5
 80079fa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2229      	movs	r2, #41	; 0x29
 8007a00:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007a02:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000058 	.word	0x20000058

08007a10 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32b0      	adds	r2, #176	; 0xb0
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	32b0      	adds	r2, #176	; 0xb0
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e017      	b.n	8007a8e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	32b0      	adds	r2, #176	; 0xb0
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	33b0      	adds	r3, #176	; 0xb0
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	7810      	ldrb	r0, [r2, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	7852      	ldrb	r2, [r2, #1]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	32b0      	adds	r2, #176	; 0xb0
 8007aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e00f      	b.n	8007ad6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	32b0      	adds	r2, #176	; 0xb0
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007ac6:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8007ac8:	7819      	ldrb	r1, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	2302      	movs	r3, #2
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 ff4a 	bl	8009968 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	2000009b 	.word	0x2000009b

08007ae4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32b0      	adds	r2, #176	; 0xb0
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e016      	b.n	8007b34 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d111      	bne.n	8007b32 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	33b0      	adds	r3, #176	; 0xb0
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	7810      	ldrb	r0, [r2, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	7852      	ldrb	r2, [r2, #1]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	220a      	movs	r2, #10
 8007b48:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007b4a:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000090 	.word	0x20000090

08007b5c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e009      	b.n	8007b84 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	; 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e01f      	b.n	8007be8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	79fa      	ldrb	r2, [r7, #7]
 8007bda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f001 fd6d 	bl	80096bc <USBD_LL_Init>
 8007be2:	4603      	mov	r3, r0
 8007be4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e025      	b.n	8007c54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	32ae      	adds	r2, #174	; 0xae
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00f      	beq.n	8007c44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32ae      	adds	r2, #174	; 0xae
 8007c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f107 020e 	add.w	r2, r7, #14
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fd75 	bl	8009754 <USBD_LL_Start>
 8007c6a:	4603      	mov	r3, r0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d009      	beq.n	8007cb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 f908 	bl	8008f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d2a:	f003 031f 	and.w	r3, r3, #31
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d01a      	beq.n	8007d68 <USBD_LL_SetupStage+0x72>
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d822      	bhi.n	8007d7c <USBD_LL_SetupStage+0x86>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <USBD_LL_SetupStage+0x4a>
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d00a      	beq.n	8007d54 <USBD_LL_SetupStage+0x5e>
 8007d3e:	e01d      	b.n	8007d7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fb5f 	bl	800840c <USBD_StdDevReq>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]
      break;
 8007d52:	e020      	b.n	8007d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fbc7 	bl	80084f0 <USBD_StdItfReq>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
      break;
 8007d66:	e016      	b.n	8007d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fc29 	bl	80085c8 <USBD_StdEPReq>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
      break;
 8007d7a:	e00c      	b.n	8007d96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fd42 	bl	8009814 <USBD_LL_StallEP>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
      break;
 8007d94:	bf00      	nop
  }

  return ret;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	460b      	mov	r3, r1
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d16e      	bne.n	8007e96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	f040 8098 	bne.w	8007efc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d913      	bls.n	8007e00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	1ad2      	subs	r2, r2, r3
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	4293      	cmp	r3, r2
 8007df0:	bf28      	it	cs
 8007df2:	4613      	movcs	r3, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f001 f984 	bl	8009106 <USBD_CtlContinueRx>
 8007dfe:	e07d      	b.n	8007efc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e06:	f003 031f 	and.w	r3, r3, #31
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d014      	beq.n	8007e38 <USBD_LL_DataOutStage+0x98>
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d81d      	bhi.n	8007e4e <USBD_LL_DataOutStage+0xae>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <USBD_LL_DataOutStage+0x7c>
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d003      	beq.n	8007e22 <USBD_LL_DataOutStage+0x82>
 8007e1a:	e018      	b.n	8007e4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75bb      	strb	r3, [r7, #22]
            break;
 8007e20:	e018      	b.n	8007e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fa5e 	bl	80082ee <USBD_CoreFindIF>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75bb      	strb	r3, [r7, #22]
            break;
 8007e36:	e00d      	b.n	8007e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fa60 	bl	8008308 <USBD_CoreFindEP>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75bb      	strb	r3, [r7, #22]
            break;
 8007e4c:	e002      	b.n	8007e54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75bb      	strb	r3, [r7, #22]
            break;
 8007e52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d119      	bne.n	8007e8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d113      	bne.n	8007e8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e66:	7dba      	ldrb	r2, [r7, #22]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	32ae      	adds	r2, #174	; 0xae
 8007e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e76:	7dba      	ldrb	r2, [r7, #22]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e7e:	7dba      	ldrb	r2, [r7, #22]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	32ae      	adds	r2, #174	; 0xae
 8007e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f001 f94a 	bl	8009128 <USBD_CtlSendStatus>
 8007e94:	e032      	b.n	8007efc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fa31 	bl	8008308 <USBD_CoreFindEP>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eaa:	7dbb      	ldrb	r3, [r7, #22]
 8007eac:	2bff      	cmp	r3, #255	; 0xff
 8007eae:	d025      	beq.n	8007efc <USBD_LL_DataOutStage+0x15c>
 8007eb0:	7dbb      	ldrb	r3, [r7, #22]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d122      	bne.n	8007efc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d117      	bne.n	8007ef2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ec2:	7dba      	ldrb	r2, [r7, #22]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	32ae      	adds	r2, #174	; 0xae
 8007ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00f      	beq.n	8007ef2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ed2:	7dba      	ldrb	r2, [r7, #22]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007eda:	7dba      	ldrb	r2, [r7, #22]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	32ae      	adds	r2, #174	; 0xae
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	7afa      	ldrb	r2, [r7, #11]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	4798      	blx	r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	e000      	b.n	8007efe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b086      	sub	sp, #24
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d16f      	bne.n	8007ffa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3314      	adds	r3, #20
 8007f1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d15a      	bne.n	8007fe0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d914      	bls.n	8007f60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f001 f8ac 	bl	80090aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f52:	2300      	movs	r3, #0
 8007f54:	2200      	movs	r2, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f001 fd05 	bl	8009968 <USBD_LL_PrepareReceive>
 8007f5e:	e03f      	b.n	8007fe0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d11c      	bne.n	8007fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d316      	bcc.n	8007fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d20f      	bcs.n	8007fa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2100      	movs	r1, #0
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f001 f88d 	bl	80090aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f001 fce2 	bl	8009968 <USBD_LL_PrepareReceive>
 8007fa4:	e01c      	b.n	8007fe0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d10f      	bne.n	8007fd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d009      	beq.n	8007fd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fd2:	2180      	movs	r1, #128	; 0x80
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f001 fc1d 	bl	8009814 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f001 f8b7 	bl	800914e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d03a      	beq.n	8008060 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7ff fe42 	bl	8007c74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ff8:	e032      	b.n	8008060 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ffa:	7afb      	ldrb	r3, [r7, #11]
 8007ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008000:	b2db      	uxtb	r3, r3
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f97f 	bl	8008308 <USBD_CoreFindEP>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2bff      	cmp	r3, #255	; 0xff
 8008012:	d025      	beq.n	8008060 <USBD_LL_DataInStage+0x15a>
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d122      	bne.n	8008060 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d11c      	bne.n	8008060 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008026:	7dfa      	ldrb	r2, [r7, #23]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	32ae      	adds	r2, #174	; 0xae
 800802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d014      	beq.n	8008060 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008036:	7dfa      	ldrb	r2, [r7, #23]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800803e:	7dfa      	ldrb	r2, [r7, #23]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	32ae      	adds	r2, #174	; 0xae
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	7afa      	ldrb	r2, [r7, #11]
 800804c:	4611      	mov	r1, r2
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	4798      	blx	r3
 8008052:	4603      	mov	r3, r0
 8008054:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008056:	7dbb      	ldrb	r3, [r7, #22]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800805c:	7dbb      	ldrb	r3, [r7, #22]
 800805e:	e000      	b.n	8008062 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d014      	beq.n	80080d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00e      	beq.n	80080d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6852      	ldr	r2, [r2, #4]
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	4611      	mov	r1, r2
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080d0:	2340      	movs	r3, #64	; 0x40
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fb57 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2240      	movs	r2, #64	; 0x40
 80080e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	2200      	movs	r2, #0
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 fb49 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2240      	movs	r2, #64	; 0x40
 8008102:	621a      	str	r2, [r3, #32]

  return ret;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	78fa      	ldrb	r2, [r7, #3]
 800811e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813c:	b2da      	uxtb	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2204      	movs	r2, #4
 8008148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b04      	cmp	r3, #4
 800816c:	d106      	bne.n	800817c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008174:	b2da      	uxtb	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b03      	cmp	r3, #3
 800819c:	d110      	bne.n	80081c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d005      	beq.n	80081c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	32ae      	adds	r2, #174	; 0xae
 80081e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e01c      	b.n	8008226 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d115      	bne.n	8008224 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	32ae      	adds	r2, #174	; 0xae
 8008202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32ae      	adds	r2, #174	; 0xae
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	4611      	mov	r1, r2
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	32ae      	adds	r2, #174	; 0xae
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	e01c      	b.n	800828a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b03      	cmp	r3, #3
 800825a:	d115      	bne.n	8008288 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32ae      	adds	r2, #174	; 0xae
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00b      	beq.n	8008288 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32ae      	adds	r2, #174	; 0xae
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	4611      	mov	r1, r2
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00e      	beq.n	80082e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6852      	ldr	r2, [r2, #4]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	4611      	mov	r1, r2
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80082e0:	2303      	movs	r3, #3
 80082e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80082fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008314:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	429a      	cmp	r2, r3
 8008348:	d920      	bls.n	800838c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008352:	e013      	b.n	800837c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008354:	f107 030a 	add.w	r3, r7, #10
 8008358:	4619      	mov	r1, r3
 800835a:	6978      	ldr	r0, [r7, #20]
 800835c:	f000 f81b 	bl	8008396 <USBD_GetNextDesc>
 8008360:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b05      	cmp	r3, #5
 8008368:	d108      	bne.n	800837c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	789b      	ldrb	r3, [r3, #2]
 8008372:	78fa      	ldrb	r2, [r7, #3]
 8008374:	429a      	cmp	r2, r3
 8008376:	d008      	beq.n	800838a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	b29a      	uxth	r2, r3
 8008382:	897b      	ldrh	r3, [r7, #10]
 8008384:	429a      	cmp	r2, r3
 8008386:	d8e5      	bhi.n	8008354 <USBD_GetEpDesc+0x32>
 8008388:	e000      	b.n	800838c <USBD_GetEpDesc+0x6a>
          break;
 800838a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800838c:	693b      	ldr	r3, [r7, #16]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	881a      	ldrh	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	4413      	add	r3, r2
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4413      	add	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083c2:	68fb      	ldr	r3, [r7, #12]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	3301      	adds	r3, #1
 80083e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083ee:	8a3b      	ldrh	r3, [r7, #16]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	b21a      	sxth	r2, r3
 80083f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b21b      	sxth	r3, r3
 80083fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083fe:	89fb      	ldrh	r3, [r7, #14]
}
 8008400:	4618      	mov	r0, r3
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d005      	beq.n	8008432 <USBD_StdDevReq+0x26>
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d857      	bhi.n	80084da <USBD_StdDevReq+0xce>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00f      	beq.n	800844e <USBD_StdDevReq+0x42>
 800842e:	2b20      	cmp	r3, #32
 8008430:	d153      	bne.n	80084da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	32ae      	adds	r2, #174	; 0xae
 800843c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
      break;
 800844c:	e04a      	b.n	80084e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	2b09      	cmp	r3, #9
 8008454:	d83b      	bhi.n	80084ce <USBD_StdDevReq+0xc2>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <USBD_StdDevReq+0x50>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084c5 	.word	0x080084c5
 8008464:	080084cf 	.word	0x080084cf
 8008468:	080084bb 	.word	0x080084bb
 800846c:	080084cf 	.word	0x080084cf
 8008470:	0800848f 	.word	0x0800848f
 8008474:	08008485 	.word	0x08008485
 8008478:	080084cf 	.word	0x080084cf
 800847c:	080084a7 	.word	0x080084a7
 8008480:	08008499 	.word	0x08008499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa3c 	bl	8008904 <USBD_GetDescriptor>
          break;
 800848c:	e024      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fba1 	bl	8008bd8 <USBD_SetAddress>
          break;
 8008496:	e01f      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fbe0 	bl	8008c60 <USBD_SetConfig>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
          break;
 80084a4:	e018      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fc83 	bl	8008db4 <USBD_GetConfig>
          break;
 80084ae:	e013      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fcb4 	bl	8008e20 <USBD_GetStatus>
          break;
 80084b8:	e00e      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fce3 	bl	8008e88 <USBD_SetFeature>
          break;
 80084c2:	e009      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fd07 	bl	8008eda <USBD_ClrFeature>
          break;
 80084cc:	e004      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fd5e 	bl	8008f92 <USBD_CtlError>
          break;
 80084d6:	bf00      	nop
      }
      break;
 80084d8:	e004      	b.n	80084e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fd58 	bl	8008f92 <USBD_CtlError>
      break;
 80084e2:	bf00      	nop
  }

  return ret;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop

080084f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	d005      	beq.n	8008516 <USBD_StdItfReq+0x26>
 800850a:	2b40      	cmp	r3, #64	; 0x40
 800850c:	d852      	bhi.n	80085b4 <USBD_StdItfReq+0xc4>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <USBD_StdItfReq+0x26>
 8008512:	2b20      	cmp	r3, #32
 8008514:	d14e      	bne.n	80085b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851c:	b2db      	uxtb	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	2b02      	cmp	r3, #2
 8008522:	d840      	bhi.n	80085a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	889b      	ldrh	r3, [r3, #4]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b01      	cmp	r3, #1
 800852c:	d836      	bhi.n	800859c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	889b      	ldrh	r3, [r3, #4]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fed9 	bl	80082ee <USBD_CoreFindIF>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2bff      	cmp	r3, #255	; 0xff
 8008544:	d01d      	beq.n	8008582 <USBD_StdItfReq+0x92>
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11a      	bne.n	8008582 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800854c:	7bba      	ldrb	r2, [r7, #14]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	32ae      	adds	r2, #174	; 0xae
 8008552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00f      	beq.n	800857c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800855c:	7bba      	ldrb	r2, [r7, #14]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008564:	7bba      	ldrb	r2, [r7, #14]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	32ae      	adds	r2, #174	; 0xae
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	4798      	blx	r3
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800857a:	e004      	b.n	8008586 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008580:	e001      	b.n	8008586 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008582:	2303      	movs	r3, #3
 8008584:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	88db      	ldrh	r3, [r3, #6]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d110      	bne.n	80085b0 <USBD_StdItfReq+0xc0>
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10d      	bne.n	80085b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fdc7 	bl	8009128 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800859a:	e009      	b.n	80085b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fcf7 	bl	8008f92 <USBD_CtlError>
          break;
 80085a4:	e004      	b.n	80085b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fcf2 	bl	8008f92 <USBD_CtlError>
          break;
 80085ae:	e000      	b.n	80085b2 <USBD_StdItfReq+0xc2>
          break;
 80085b0:	bf00      	nop
      }
      break;
 80085b2:	e004      	b.n	80085be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fceb 	bl	8008f92 <USBD_CtlError>
      break;
 80085bc:	bf00      	nop
  }

  return ret;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	889b      	ldrh	r3, [r3, #4]
 80085da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085e4:	2b40      	cmp	r3, #64	; 0x40
 80085e6:	d007      	beq.n	80085f8 <USBD_StdEPReq+0x30>
 80085e8:	2b40      	cmp	r3, #64	; 0x40
 80085ea:	f200 817f 	bhi.w	80088ec <USBD_StdEPReq+0x324>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d02a      	beq.n	8008648 <USBD_StdEPReq+0x80>
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	f040 817a 	bne.w	80088ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff fe83 	bl	8008308 <USBD_CoreFindEP>
 8008602:	4603      	mov	r3, r0
 8008604:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008606:	7b7b      	ldrb	r3, [r7, #13]
 8008608:	2bff      	cmp	r3, #255	; 0xff
 800860a:	f000 8174 	beq.w	80088f6 <USBD_StdEPReq+0x32e>
 800860e:	7b7b      	ldrb	r3, [r7, #13]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 8170 	bne.w	80088f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008616:	7b7a      	ldrb	r2, [r7, #13]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800861e:	7b7a      	ldrb	r2, [r7, #13]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	32ae      	adds	r2, #174	; 0xae
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8163 	beq.w	80088f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008630:	7b7a      	ldrb	r2, [r7, #13]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	32ae      	adds	r2, #174	; 0xae
 8008636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	4798      	blx	r3
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008646:	e156      	b.n	80088f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d008      	beq.n	8008662 <USBD_StdEPReq+0x9a>
 8008650:	2b03      	cmp	r3, #3
 8008652:	f300 8145 	bgt.w	80088e0 <USBD_StdEPReq+0x318>
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 809b 	beq.w	8008792 <USBD_StdEPReq+0x1ca>
 800865c:	2b01      	cmp	r3, #1
 800865e:	d03c      	beq.n	80086da <USBD_StdEPReq+0x112>
 8008660:	e13e      	b.n	80088e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d002      	beq.n	8008674 <USBD_StdEPReq+0xac>
 800866e:	2b03      	cmp	r3, #3
 8008670:	d016      	beq.n	80086a0 <USBD_StdEPReq+0xd8>
 8008672:	e02c      	b.n	80086ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00d      	beq.n	8008696 <USBD_StdEPReq+0xce>
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b80      	cmp	r3, #128	; 0x80
 800867e:	d00a      	beq.n	8008696 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f8c5 	bl	8009814 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800868a:	2180      	movs	r1, #128	; 0x80
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 f8c1 	bl	8009814 <USBD_LL_StallEP>
 8008692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008694:	e020      	b.n	80086d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fc7a 	bl	8008f92 <USBD_CtlError>
              break;
 800869e:	e01b      	b.n	80086d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	885b      	ldrh	r3, [r3, #2]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10e      	bne.n	80086c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <USBD_StdEPReq+0xfe>
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b80      	cmp	r3, #128	; 0x80
 80086b2:	d008      	beq.n	80086c6 <USBD_StdEPReq+0xfe>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	88db      	ldrh	r3, [r3, #6]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d104      	bne.n	80086c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f8a7 	bl	8009814 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fd2e 	bl	8009128 <USBD_CtlSendStatus>

              break;
 80086cc:	e004      	b.n	80086d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fc5e 	bl	8008f92 <USBD_CtlError>
              break;
 80086d6:	bf00      	nop
          }
          break;
 80086d8:	e107      	b.n	80088ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d002      	beq.n	80086ec <USBD_StdEPReq+0x124>
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d016      	beq.n	8008718 <USBD_StdEPReq+0x150>
 80086ea:	e04b      	b.n	8008784 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00d      	beq.n	800870e <USBD_StdEPReq+0x146>
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b80      	cmp	r3, #128	; 0x80
 80086f6:	d00a      	beq.n	800870e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f889 	bl	8009814 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008702:	2180      	movs	r1, #128	; 0x80
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f885 	bl	8009814 <USBD_LL_StallEP>
 800870a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800870c:	e040      	b.n	8008790 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fc3e 	bl	8008f92 <USBD_CtlError>
              break;
 8008716:	e03b      	b.n	8008790 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	885b      	ldrh	r3, [r3, #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d136      	bne.n	800878e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 f88f 	bl	8009852 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fcf7 	bl	8009128 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fde2 	bl	8008308 <USBD_CoreFindEP>
 8008744:	4603      	mov	r3, r0
 8008746:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008748:	7b7b      	ldrb	r3, [r7, #13]
 800874a:	2bff      	cmp	r3, #255	; 0xff
 800874c:	d01f      	beq.n	800878e <USBD_StdEPReq+0x1c6>
 800874e:	7b7b      	ldrb	r3, [r7, #13]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d11c      	bne.n	800878e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008754:	7b7a      	ldrb	r2, [r7, #13]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800875c:	7b7a      	ldrb	r2, [r7, #13]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	32ae      	adds	r2, #174	; 0xae
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d010      	beq.n	800878e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800876c:	7b7a      	ldrb	r2, [r7, #13]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	32ae      	adds	r2, #174	; 0xae
 8008772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008782:	e004      	b.n	800878e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fc03 	bl	8008f92 <USBD_CtlError>
              break;
 800878c:	e000      	b.n	8008790 <USBD_StdEPReq+0x1c8>
              break;
 800878e:	bf00      	nop
          }
          break;
 8008790:	e0ab      	b.n	80088ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d002      	beq.n	80087a4 <USBD_StdEPReq+0x1dc>
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d032      	beq.n	8008808 <USBD_StdEPReq+0x240>
 80087a2:	e097      	b.n	80088d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <USBD_StdEPReq+0x1f2>
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b80      	cmp	r3, #128	; 0x80
 80087ae:	d004      	beq.n	80087ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fbed 	bl	8008f92 <USBD_CtlError>
                break;
 80087b8:	e091      	b.n	80088de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	da0b      	bge.n	80087da <USBD_StdEPReq+0x212>
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	3310      	adds	r3, #16
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	4413      	add	r3, r2
 80087d6:	3304      	adds	r3, #4
 80087d8:	e00b      	b.n	80087f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	4413      	add	r3, r2
 80087f0:	3304      	adds	r3, #4
 80087f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2202      	movs	r2, #2
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fc37 	bl	8009074 <USBD_CtlSendData>
              break;
 8008806:	e06a      	b.n	80088de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800880c:	2b00      	cmp	r3, #0
 800880e:	da11      	bge.n	8008834 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	f003 020f 	and.w	r2, r3, #15
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	3324      	adds	r3, #36	; 0x24
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d117      	bne.n	800885a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fbb0 	bl	8008f92 <USBD_CtlError>
                  break;
 8008832:	e054      	b.n	80088de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fb9d 	bl	8008f92 <USBD_CtlError>
                  break;
 8008858:	e041      	b.n	80088de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800885a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800885e:	2b00      	cmp	r3, #0
 8008860:	da0b      	bge.n	800887a <USBD_StdEPReq+0x2b2>
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	3310      	adds	r3, #16
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	3304      	adds	r3, #4
 8008878:	e00b      	b.n	8008892 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008880:	4613      	mov	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	4413      	add	r3, r2
 8008890:	3304      	adds	r3, #4
 8008892:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <USBD_StdEPReq+0x2d8>
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d103      	bne.n	80088a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	e00e      	b.n	80088c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 ffef 	bl	8009890 <USBD_LL_IsStallEP>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	e002      	b.n	80088c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2202      	movs	r2, #2
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fbd1 	bl	8009074 <USBD_CtlSendData>
              break;
 80088d2:	e004      	b.n	80088de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fb5b 	bl	8008f92 <USBD_CtlError>
              break;
 80088dc:	bf00      	nop
          }
          break;
 80088de:	e004      	b.n	80088ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb55 	bl	8008f92 <USBD_CtlError>
          break;
 80088e8:	bf00      	nop
      }
      break;
 80088ea:	e005      	b.n	80088f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb4f 	bl	8008f92 <USBD_CtlError>
      break;
 80088f4:	e000      	b.n	80088f8 <USBD_StdEPReq+0x330>
      break;
 80088f6:	bf00      	nop
  }

  return ret;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	885b      	ldrh	r3, [r3, #2]
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	b29b      	uxth	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	2b06      	cmp	r3, #6
 8008926:	f200 8128 	bhi.w	8008b7a <USBD_GetDescriptor+0x276>
 800892a:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <USBD_GetDescriptor+0x2c>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	0800894d 	.word	0x0800894d
 8008934:	08008965 	.word	0x08008965
 8008938:	080089a5 	.word	0x080089a5
 800893c:	08008b7b 	.word	0x08008b7b
 8008940:	08008b7b 	.word	0x08008b7b
 8008944:	08008b1b 	.word	0x08008b1b
 8008948:	08008b47 	.word	0x08008b47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	7c12      	ldrb	r2, [r2, #16]
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
      break;
 8008962:	e112      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7c1b      	ldrb	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10d      	bne.n	8008988 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008974:	f107 0208 	add.w	r2, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	2202      	movs	r2, #2
 8008984:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008986:	e100      	b.n	8008b8a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	f107 0208 	add.w	r2, r7, #8
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	2202      	movs	r2, #2
 80089a0:	701a      	strb	r2, [r3, #0]
      break;
 80089a2:	e0f2      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	885b      	ldrh	r3, [r3, #2]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	f200 80ac 	bhi.w	8008b08 <USBD_GetDescriptor+0x204>
 80089b0:	a201      	add	r2, pc, #4	; (adr r2, 80089b8 <USBD_GetDescriptor+0xb4>)
 80089b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b6:	bf00      	nop
 80089b8:	080089d1 	.word	0x080089d1
 80089bc:	08008a05 	.word	0x08008a05
 80089c0:	08008a39 	.word	0x08008a39
 80089c4:	08008a6d 	.word	0x08008a6d
 80089c8:	08008aa1 	.word	0x08008aa1
 80089cc:	08008ad5 	.word	0x08008ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e091      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 facb 	bl	8008f92 <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e089      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e077      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fab1 	bl	8008f92 <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e06f      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e05d      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa97 	bl	8008f92 <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e055      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8e:	e043      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa7d 	bl	8008f92 <USBD_CtlError>
            err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9e:	e03b      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac2:	e029      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa63 	bl	8008f92 <USBD_CtlError>
            err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad2:	e021      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af6:	e00f      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa49 	bl	8008f92 <USBD_CtlError>
            err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
          break;
 8008b06:	e007      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa41 	bl	8008f92 <USBD_CtlError>
          err++;
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	3301      	adds	r3, #1
 8008b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b16:	bf00      	nop
      }
      break;
 8008b18:	e037      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	7c1b      	ldrb	r3, [r3, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d109      	bne.n	8008b36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2a:	f107 0208 	add.w	r2, r7, #8
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4798      	blx	r3
 8008b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b34:	e029      	b.n	8008b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa2a 	bl	8008f92 <USBD_CtlError>
        err++;
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	3301      	adds	r3, #1
 8008b42:	72fb      	strb	r3, [r7, #11]
      break;
 8008b44:	e021      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	7c1b      	ldrb	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10d      	bne.n	8008b6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b56:	f107 0208 	add.w	r2, r7, #8
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	4798      	blx	r3
 8008b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	2207      	movs	r2, #7
 8008b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b68:	e00f      	b.n	8008b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa10 	bl	8008f92 <USBD_CtlError>
        err++;
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	3301      	adds	r3, #1
 8008b76:	72fb      	strb	r3, [r7, #11]
      break;
 8008b78:	e007      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fa08 	bl	8008f92 <USBD_CtlError>
      err++;
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	3301      	adds	r3, #1
 8008b86:	72fb      	strb	r3, [r7, #11]
      break;
 8008b88:	bf00      	nop
  }

  if (err != 0U)
 8008b8a:	7afb      	ldrb	r3, [r7, #11]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d11e      	bne.n	8008bce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	88db      	ldrh	r3, [r3, #6]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d016      	beq.n	8008bc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b98:	893b      	ldrh	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00e      	beq.n	8008bbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	88da      	ldrh	r2, [r3, #6]
 8008ba2:	893b      	ldrh	r3, [r7, #8]
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	bf28      	it	cs
 8008ba8:	4613      	movcs	r3, r2
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bae:	893b      	ldrh	r3, [r7, #8]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68f9      	ldr	r1, [r7, #12]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa5d 	bl	8009074 <USBD_CtlSendData>
 8008bba:	e009      	b.n	8008bd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9e7 	bl	8008f92 <USBD_CtlError>
 8008bc4:	e004      	b.n	8008bd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 faae 	bl	8009128 <USBD_CtlSendStatus>
 8008bcc:	e000      	b.n	8008bd0 <USBD_GetDescriptor+0x2cc>
    return;
 8008bce:	bf00      	nop
  }
}
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop

08008bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	889b      	ldrh	r3, [r3, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d131      	bne.n	8008c4e <USBD_SetAddress+0x76>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	88db      	ldrh	r3, [r3, #6]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d12d      	bne.n	8008c4e <USBD_SetAddress+0x76>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8008bf8:	d829      	bhi.n	8008c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	885b      	ldrh	r3, [r3, #2]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d104      	bne.n	8008c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f9bc 	bl	8008f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1a:	e01d      	b.n	8008c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7bfa      	ldrb	r2, [r7, #15]
 8008c20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fe5d 	bl	80098e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa7a 	bl	8009128 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d004      	beq.n	8008c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c42:	e009      	b.n	8008c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4c:	e004      	b.n	8008c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f99e 	bl	8008f92 <USBD_CtlError>
  }
}
 8008c56:	bf00      	nop
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	4b4e      	ldr	r3, [pc, #312]	; (8008db0 <USBD_SetConfig+0x150>)
 8008c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c78:	4b4d      	ldr	r3, [pc, #308]	; (8008db0 <USBD_SetConfig+0x150>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d905      	bls.n	8008c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f985 	bl	8008f92 <USBD_CtlError>
    return USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e08c      	b.n	8008da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d002      	beq.n	8008c9e <USBD_SetConfig+0x3e>
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d029      	beq.n	8008cf0 <USBD_SetConfig+0x90>
 8008c9c:	e075      	b.n	8008d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c9e:	4b44      	ldr	r3, [pc, #272]	; (8008db0 <USBD_SetConfig+0x150>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d020      	beq.n	8008ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ca6:	4b42      	ldr	r3, [pc, #264]	; (8008db0 <USBD_SetConfig+0x150>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb0:	4b3f      	ldr	r3, [pc, #252]	; (8008db0 <USBD_SetConfig+0x150>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7fe ffe7 	bl	8007c8a <USBD_SetClassConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d008      	beq.n	8008cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f962 	bl	8008f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cd6:	e065      	b.n	8008da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fa25 	bl	8009128 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2203      	movs	r2, #3
 8008ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ce6:	e05d      	b.n	8008da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fa1d 	bl	8009128 <USBD_CtlSendStatus>
      break;
 8008cee:	e059      	b.n	8008da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008cf0:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <USBD_SetConfig+0x150>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d112      	bne.n	8008d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d00:	4b2b      	ldr	r3, [pc, #172]	; (8008db0 <USBD_SetConfig+0x150>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d0a:	4b29      	ldr	r3, [pc, #164]	; (8008db0 <USBD_SetConfig+0x150>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fe ffd6 	bl	8007cc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa06 	bl	8009128 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d1c:	e042      	b.n	8008da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d1e:	4b24      	ldr	r3, [pc, #144]	; (8008db0 <USBD_SetConfig+0x150>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d02a      	beq.n	8008d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fe ffc4 	bl	8007cc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d3a:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <USBD_SetConfig+0x150>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d44:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <USBD_SetConfig+0x150>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7fe ff9d 	bl	8007c8a <USBD_SetClassConfig>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00f      	beq.n	8008d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f918 	bl	8008f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7fe ffa9 	bl	8007cc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d78:	e014      	b.n	8008da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f9d4 	bl	8009128 <USBD_CtlSendStatus>
      break;
 8008d80:	e010      	b.n	8008da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f9d0 	bl	8009128 <USBD_CtlSendStatus>
      break;
 8008d88:	e00c      	b.n	8008da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f900 	bl	8008f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d92:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <USBD_SetConfig+0x150>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7fe ff92 	bl	8007cc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	73fb      	strb	r3, [r7, #15]
      break;
 8008da2:	bf00      	nop
  }

  return ret;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000320 	.word	0x20000320

08008db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d004      	beq.n	8008dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f8e2 	bl	8008f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dce:	e023      	b.n	8008e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	dc02      	bgt.n	8008de2 <USBD_GetConfig+0x2e>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dc03      	bgt.n	8008de8 <USBD_GetConfig+0x34>
 8008de0:	e015      	b.n	8008e0e <USBD_GetConfig+0x5a>
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d00b      	beq.n	8008dfe <USBD_GetConfig+0x4a>
 8008de6:	e012      	b.n	8008e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3308      	adds	r3, #8
 8008df2:	2201      	movs	r2, #1
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f93c 	bl	8009074 <USBD_CtlSendData>
        break;
 8008dfc:	e00c      	b.n	8008e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3304      	adds	r3, #4
 8008e02:	2201      	movs	r2, #1
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f934 	bl	8009074 <USBD_CtlSendData>
        break;
 8008e0c:	e004      	b.n	8008e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f8be 	bl	8008f92 <USBD_CtlError>
        break;
 8008e16:	bf00      	nop
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	3b01      	subs	r3, #1
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d81e      	bhi.n	8008e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d004      	beq.n	8008e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f8a5 	bl	8008f92 <USBD_CtlError>
        break;
 8008e48:	e01a      	b.n	8008e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d005      	beq.n	8008e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f043 0202 	orr.w	r2, r3, #2
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	330c      	adds	r3, #12
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f900 	bl	8009074 <USBD_CtlSendData>
      break;
 8008e74:	e004      	b.n	8008e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f88a 	bl	8008f92 <USBD_CtlError>
      break;
 8008e7e:	bf00      	nop
  }
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d107      	bne.n	8008eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f940 	bl	8009128 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ea8:	e013      	b.n	8008ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	885b      	ldrh	r3, [r3, #2]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d10b      	bne.n	8008eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	889b      	ldrh	r3, [r3, #4]
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f930 	bl	8009128 <USBD_CtlSendStatus>
}
 8008ec8:	e003      	b.n	8008ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f860 	bl	8008f92 <USBD_CtlError>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d80b      	bhi.n	8008f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d10c      	bne.n	8008f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f910 	bl	8009128 <USBD_CtlSendStatus>
      }
      break;
 8008f08:	e004      	b.n	8008f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f840 	bl	8008f92 <USBD_CtlError>
      break;
 8008f12:	e000      	b.n	8008f16 <USBD_ClrFeature+0x3c>
      break;
 8008f14:	bf00      	nop
  }
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3301      	adds	r3, #1
 8008f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	781a      	ldrb	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff fa41 	bl	80083d0 <SWAPBYTE>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff fa34 	bl	80083d0 <SWAPBYTE>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fa27 	bl	80083d0 <SWAPBYTE>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	80da      	strh	r2, [r3, #6]
}
 8008f8a:	bf00      	nop
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f9c:	2180      	movs	r1, #128	; 0x80
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fc38 	bl	8009814 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fc34 	bl	8009814 <USBD_LL_StallEP>
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d036      	beq.n	8009038 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fce:	6938      	ldr	r0, [r7, #16]
 8008fd0:	f000 f836 	bl	8009040 <USBD_GetLen>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	3301      	adds	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009004:	e013      	b.n	800902e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	7812      	ldrb	r2, [r2, #0]
 8009010:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	3301      	adds	r3, #1
 8009016:	613b      	str	r3, [r7, #16]
    idx++;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	3301      	adds	r3, #1
 800901c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	4413      	add	r3, r2
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
    idx++;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	3301      	adds	r3, #1
 800902c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e7      	bne.n	8009006 <USBD_GetString+0x52>
 8009036:	e000      	b.n	800903a <USBD_GetString+0x86>
    return;
 8009038:	bf00      	nop
  }
}
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009050:	e005      	b.n	800905e <USBD_GetLen+0x1e>
  {
    len++;
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	3301      	adds	r3, #1
 8009056:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	3301      	adds	r3, #1
 800905c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f5      	bne.n	8009052 <USBD_GetLen+0x12>
  }

  return len;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2202      	movs	r2, #2
 8009084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	2100      	movs	r1, #0
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fc43 	bl	8009926 <USBD_LL_Transmit>

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	2100      	movs	r1, #0
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fc32 	bl	8009926 <USBD_LL_Transmit>

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2203      	movs	r2, #3
 80090dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	2100      	movs	r1, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fc36 	bl	8009968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	2100      	movs	r1, #0
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fc25 	bl	8009968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2204      	movs	r2, #4
 8009134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009138:	2300      	movs	r3, #0
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fbf1 	bl	8009926 <USBD_LL_Transmit>

  return USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2205      	movs	r2, #5
 800915a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	2100      	movs	r1, #0
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fbff 	bl	8009968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009178:	2200      	movs	r2, #0
 800917a:	4912      	ldr	r1, [pc, #72]	; (80091c4 <MX_USB_DEVICE_Init+0x50>)
 800917c:	4812      	ldr	r0, [pc, #72]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 800917e:	f7fe fd07 	bl	8007b90 <USBD_Init>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009188:	f7f7 fdc6 	bl	8000d18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800918c:	490f      	ldr	r1, [pc, #60]	; (80091cc <MX_USB_DEVICE_Init+0x58>)
 800918e:	480e      	ldr	r0, [pc, #56]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 8009190:	f7fe fd2e 	bl	8007bf0 <USBD_RegisterClass>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800919a:	f7f7 fdbd 	bl	8000d18 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800919e:	490c      	ldr	r1, [pc, #48]	; (80091d0 <MX_USB_DEVICE_Init+0x5c>)
 80091a0:	4809      	ldr	r0, [pc, #36]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 80091a2:	f7fe fcdb 	bl	8007b5c <USBD_CUSTOM_HID_RegisterInterface>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091ac:	f7f7 fdb4 	bl	8000d18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091b0:	4805      	ldr	r0, [pc, #20]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 80091b2:	f7fe fd53 	bl	8007c5c <USBD_Start>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091bc:	f7f7 fdac 	bl	8000d18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091c0:	bf00      	nop
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	200000b0 	.word	0x200000b0
 80091c8:	20000324 	.word	0x20000324
 80091cc:	20000020 	.word	0x20000020
 80091d0:	200000a0 	.word	0x200000a0

080091d4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091da:	4618      	mov	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80091e8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	460a      	mov	r2, r1
 80091fe:	71fb      	strb	r3, [r7, #7]
 8009200:	4613      	mov	r3, r2
 8009202:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8009204:	4806      	ldr	r0, [pc, #24]	; (8009220 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8009206:	f7fe fc47 	bl	8007a98 <USBD_CUSTOM_HID_ReceivePacket>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8009210:	f04f 33ff 	mov.w	r3, #4294967295
 8009214:	e000      	b.n	8009218 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8009216:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20000324 	.word	0x20000324

08009224 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2212      	movs	r2, #18
 8009234:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009236:	4b03      	ldr	r3, [pc, #12]	; (8009244 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	200000cc 	.word	0x200000cc

08009248 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	6039      	str	r1, [r7, #0]
 8009252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2204      	movs	r2, #4
 8009258:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800925a:	4b03      	ldr	r3, [pc, #12]	; (8009268 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	200000e0 	.word	0x200000e0

0800926c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d105      	bne.n	800928a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	4907      	ldr	r1, [pc, #28]	; (80092a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009282:	4808      	ldr	r0, [pc, #32]	; (80092a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009284:	f7ff fe96 	bl	8008fb4 <USBD_GetString>
 8009288:	e004      	b.n	8009294 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4904      	ldr	r1, [pc, #16]	; (80092a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800928e:	4805      	ldr	r0, [pc, #20]	; (80092a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009290:	f7ff fe90 	bl	8008fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009294:	4b02      	ldr	r3, [pc, #8]	; (80092a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000600 	.word	0x20000600
 80092a4:	0800ae24 	.word	0x0800ae24

080092a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	4904      	ldr	r1, [pc, #16]	; (80092c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092b8:	4804      	ldr	r0, [pc, #16]	; (80092cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092ba:	f7ff fe7b 	bl	8008fb4 <USBD_GetString>
  return USBD_StrDesc;
 80092be:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000600 	.word	0x20000600
 80092cc:	0800ae44 	.word	0x0800ae44

080092d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	221a      	movs	r2, #26
 80092e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092e2:	f000 f843 	bl	800936c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092e6:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	200000e4 	.word	0x200000e4

080092f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d105      	bne.n	8009312 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4907      	ldr	r1, [pc, #28]	; (8009328 <USBD_FS_ConfigStrDescriptor+0x34>)
 800930a:	4808      	ldr	r0, [pc, #32]	; (800932c <USBD_FS_ConfigStrDescriptor+0x38>)
 800930c:	f7ff fe52 	bl	8008fb4 <USBD_GetString>
 8009310:	e004      	b.n	800931c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4904      	ldr	r1, [pc, #16]	; (8009328 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009316:	4805      	ldr	r0, [pc, #20]	; (800932c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009318:	f7ff fe4c 	bl	8008fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000600 	.word	0x20000600
 800932c:	0800ae58 	.word	0x0800ae58

08009330 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d105      	bne.n	800934e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4907      	ldr	r1, [pc, #28]	; (8009364 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009346:	4808      	ldr	r0, [pc, #32]	; (8009368 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009348:	f7ff fe34 	bl	8008fb4 <USBD_GetString>
 800934c:	e004      	b.n	8009358 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4904      	ldr	r1, [pc, #16]	; (8009364 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009352:	4805      	ldr	r0, [pc, #20]	; (8009368 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009354:	f7ff fe2e 	bl	8008fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009358:	4b02      	ldr	r3, [pc, #8]	; (8009364 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000600 	.word	0x20000600
 8009368:	0800ae6c 	.word	0x0800ae6c

0800936c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009372:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <Get_SerialNum+0x44>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009378:	4b0e      	ldr	r3, [pc, #56]	; (80093b4 <Get_SerialNum+0x48>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800937e:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <Get_SerialNum+0x4c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4413      	add	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009392:	2208      	movs	r2, #8
 8009394:	4909      	ldr	r1, [pc, #36]	; (80093bc <Get_SerialNum+0x50>)
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 f814 	bl	80093c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800939c:	2204      	movs	r2, #4
 800939e:	4908      	ldr	r1, [pc, #32]	; (80093c0 <Get_SerialNum+0x54>)
 80093a0:	68b8      	ldr	r0, [r7, #8]
 80093a2:	f000 f80f 	bl	80093c4 <IntToUnicode>
  }
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	1fff7a10 	.word	0x1fff7a10
 80093b4:	1fff7a14 	.word	0x1fff7a14
 80093b8:	1fff7a18 	.word	0x1fff7a18
 80093bc:	200000e6 	.word	0x200000e6
 80093c0:	200000f6 	.word	0x200000f6

080093c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093d6:	2300      	movs	r3, #0
 80093d8:	75fb      	strb	r3, [r7, #23]
 80093da:	e027      	b.n	800942c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	0f1b      	lsrs	r3, r3, #28
 80093e0:	2b09      	cmp	r3, #9
 80093e2:	d80b      	bhi.n	80093fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	0f1b      	lsrs	r3, r3, #28
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	4619      	mov	r1, r3
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	440b      	add	r3, r1
 80093f4:	3230      	adds	r2, #48	; 0x30
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	e00a      	b.n	8009412 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	0f1b      	lsrs	r3, r3, #28
 8009400:	b2da      	uxtb	r2, r3
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	4619      	mov	r1, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	440b      	add	r3, r1
 800940c:	3237      	adds	r2, #55	; 0x37
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	011b      	lsls	r3, r3, #4
 8009416:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	3301      	adds	r3, #1
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	4413      	add	r3, r2
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	3301      	adds	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]
 800942c:	7dfa      	ldrb	r2, [r7, #23]
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	429a      	cmp	r2, r3
 8009432:	d3d3      	bcc.n	80093dc <IntToUnicode+0x18>
  }
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
	...

08009444 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	; 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800944c:	f107 0314 	add.w	r3, r7, #20
 8009450:	2200      	movs	r2, #0
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	605a      	str	r2, [r3, #4]
 8009456:	609a      	str	r2, [r3, #8]
 8009458:	60da      	str	r2, [r3, #12]
 800945a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009464:	d13a      	bne.n	80094dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009466:	2300      	movs	r3, #0
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 800946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946e:	4a1d      	ldr	r2, [pc, #116]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 8009470:	f043 0301 	orr.w	r3, r3, #1
 8009474:	6313      	str	r3, [r2, #48]	; 0x30
 8009476:	4b1b      	ldr	r3, [pc, #108]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009482:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009488:	2302      	movs	r3, #2
 800948a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800948c:	2300      	movs	r3, #0
 800948e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009490:	2303      	movs	r3, #3
 8009492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009494:	230a      	movs	r3, #10
 8009496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009498:	f107 0314 	add.w	r3, r7, #20
 800949c:	4619      	mov	r1, r3
 800949e:	4812      	ldr	r0, [pc, #72]	; (80094e8 <HAL_PCD_MspInit+0xa4>)
 80094a0:	f7f8 fb64 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094a4:	4b0f      	ldr	r3, [pc, #60]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 80094a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a8:	4a0e      	ldr	r2, [pc, #56]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 80094aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ae:	6353      	str	r3, [r2, #52]	; 0x34
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 80094b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b8:	4a0a      	ldr	r2, [pc, #40]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 80094ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094be:	6453      	str	r3, [r2, #68]	; 0x44
 80094c0:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <HAL_PCD_MspInit+0xa0>)
 80094c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094cc:	2200      	movs	r2, #0
 80094ce:	2100      	movs	r1, #0
 80094d0:	2043      	movs	r0, #67	; 0x43
 80094d2:	f7f8 fb14 	bl	8001afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094d6:	2043      	movs	r0, #67	; 0x43
 80094d8:	f7f8 fb2d 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094dc:	bf00      	nop
 80094de:	3728      	adds	r7, #40	; 0x28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	40023800 	.word	0x40023800
 80094e8:	40020000 	.word	0x40020000

080094ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe fbf7 	bl	8007cf6 <USBD_LL_SetupStage>
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009522:	78fa      	ldrb	r2, [r7, #3]
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	4613      	mov	r3, r2
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	78fb      	ldrb	r3, [r7, #3]
 8009538:	4619      	mov	r1, r3
 800953a:	f7fe fc31 	bl	8007da0 <USBD_LL_DataOutStage>
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	4613      	mov	r3, r2
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	334c      	adds	r3, #76	; 0x4c
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	4619      	mov	r1, r3
 800956e:	f7fe fcca 	bl	8007f06 <USBD_LL_DataInStage>
}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b082      	sub	sp, #8
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fdfe 	bl	800818a <USBD_LL_SOF>
}
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800959e:	2301      	movs	r3, #1
 80095a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d001      	beq.n	80095ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095aa:	f7f7 fbb5 	bl	8000d18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095b4:	7bfa      	ldrb	r2, [r7, #15]
 80095b6:	4611      	mov	r1, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fda8 	bl	800810e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe fd50 	bl	800806a <USBD_LL_Reset>
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fda3 	bl	800812e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6812      	ldr	r2, [r2, #0]
 80095f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095fa:	f043 0301 	orr.w	r3, r3, #1
 80095fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <HAL_PCD_SuspendCallback+0x48>)
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	4a03      	ldr	r2, [pc, #12]	; (800961c <HAL_PCD_SuspendCallback+0x48>)
 800960e:	f043 0306 	orr.w	r3, r3, #6
 8009612:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed00 	.word	0xe000ed00

08009620 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fd93 	bl	800815a <USBD_LL_Resume>
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe fdeb 	bl	800822e <USBD_LL_IsoOUTIncomplete>
}
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	4611      	mov	r1, r2
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fda7 	bl	80081ca <USBD_LL_IsoINIncomplete>
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe fdfd 	bl	8008292 <USBD_LL_DevConnected>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fdfa 	bl	80082a8 <USBD_LL_DevDisconnected>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d13c      	bne.n	8009746 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096cc:	4a20      	ldr	r2, [pc, #128]	; (8009750 <USBD_LL_Init+0x94>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a1e      	ldr	r2, [pc, #120]	; (8009750 <USBD_LL_Init+0x94>)
 80096d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096dc:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <USBD_LL_Init+0x94>)
 80096de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096e4:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <USBD_LL_Init+0x94>)
 80096e6:	2204      	movs	r2, #4
 80096e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096ea:	4b19      	ldr	r3, [pc, #100]	; (8009750 <USBD_LL_Init+0x94>)
 80096ec:	2202      	movs	r2, #2
 80096ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096f0:	4b17      	ldr	r3, [pc, #92]	; (8009750 <USBD_LL_Init+0x94>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096f6:	4b16      	ldr	r3, [pc, #88]	; (8009750 <USBD_LL_Init+0x94>)
 80096f8:	2202      	movs	r2, #2
 80096fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096fc:	4b14      	ldr	r3, [pc, #80]	; (8009750 <USBD_LL_Init+0x94>)
 80096fe:	2200      	movs	r2, #0
 8009700:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009702:	4b13      	ldr	r3, [pc, #76]	; (8009750 <USBD_LL_Init+0x94>)
 8009704:	2200      	movs	r2, #0
 8009706:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009708:	4b11      	ldr	r3, [pc, #68]	; (8009750 <USBD_LL_Init+0x94>)
 800970a:	2200      	movs	r2, #0
 800970c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800970e:	4b10      	ldr	r3, [pc, #64]	; (8009750 <USBD_LL_Init+0x94>)
 8009710:	2200      	movs	r2, #0
 8009712:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009714:	4b0e      	ldr	r3, [pc, #56]	; (8009750 <USBD_LL_Init+0x94>)
 8009716:	2200      	movs	r2, #0
 8009718:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800971a:	480d      	ldr	r0, [pc, #52]	; (8009750 <USBD_LL_Init+0x94>)
 800971c:	f7f9 fb69 	bl	8002df2 <HAL_PCD_Init>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009726:	f7f7 faf7 	bl	8000d18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800972a:	2180      	movs	r1, #128	; 0x80
 800972c:	4808      	ldr	r0, [pc, #32]	; (8009750 <USBD_LL_Init+0x94>)
 800972e:	f7fa fda8 	bl	8004282 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009732:	2240      	movs	r2, #64	; 0x40
 8009734:	2100      	movs	r1, #0
 8009736:	4806      	ldr	r0, [pc, #24]	; (8009750 <USBD_LL_Init+0x94>)
 8009738:	f7fa fd5c 	bl	80041f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800973c:	2280      	movs	r2, #128	; 0x80
 800973e:	2101      	movs	r1, #1
 8009740:	4803      	ldr	r0, [pc, #12]	; (8009750 <USBD_LL_Init+0x94>)
 8009742:	f7fa fd57 	bl	80041f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000800 	.word	0x20000800

08009754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800976a:	4618      	mov	r0, r3
 800976c:	f7f9 fc5e 	bl	800302c <HAL_PCD_Start>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f930 	bl	80099dc <USBD_Get_USB_Status>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009780:	7bbb      	ldrb	r3, [r7, #14]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	4608      	mov	r0, r1
 8009794:	4611      	mov	r1, r2
 8009796:	461a      	mov	r2, r3
 8009798:	4603      	mov	r3, r0
 800979a:	70fb      	strb	r3, [r7, #3]
 800979c:	460b      	mov	r3, r1
 800979e:	70bb      	strb	r3, [r7, #2]
 80097a0:	4613      	mov	r3, r2
 80097a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097b2:	78bb      	ldrb	r3, [r7, #2]
 80097b4:	883a      	ldrh	r2, [r7, #0]
 80097b6:	78f9      	ldrb	r1, [r7, #3]
 80097b8:	f7fa f92f 	bl	8003a1a <HAL_PCD_EP_Open>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f90a 	bl	80099dc <USBD_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	460b      	mov	r3, r1
 80097e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fa f978 	bl	8003aea <HAL_PCD_EP_Close>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f8eb 	bl	80099dc <USBD_Get_USB_Status>
 8009806:	4603      	mov	r3, r0
 8009808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980a:	7bbb      	ldrb	r3, [r7, #14]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800982e:	78fa      	ldrb	r2, [r7, #3]
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f7fa fa38 	bl	8003ca8 <HAL_PCD_EP_SetStall>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f8cc 	bl	80099dc <USBD_Get_USB_Status>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009848:	7bbb      	ldrb	r3, [r7, #14]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f7fa fa7d 	bl	8003d70 <HAL_PCD_EP_ClrStall>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	4618      	mov	r0, r3
 800987e:	f000 f8ad 	bl	80099dc <USBD_Get_USB_Status>
 8009882:	4603      	mov	r3, r0
 8009884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009886:	7bbb      	ldrb	r3, [r7, #14]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da0b      	bge.n	80098c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	4613      	mov	r3, r2
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	440b      	add	r3, r1
 80098be:	333e      	adds	r3, #62	; 0x3e
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	e00b      	b.n	80098dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	4613      	mov	r3, r2
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	440b      	add	r3, r1
 80098d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80098da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7fa f862 	bl	80039d0 <HAL_PCD_SetAddress>
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f862 	bl	80099dc <USBD_Get_USB_Status>
 8009918:	4603      	mov	r3, r0
 800991a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800991c:	7bbb      	ldrb	r3, [r7, #14]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b086      	sub	sp, #24
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
 8009932:	460b      	mov	r3, r1
 8009934:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009944:	7af9      	ldrb	r1, [r7, #11]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	f7fa f963 	bl	8003c14 <HAL_PCD_EP_Transmit>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f841 	bl	80099dc <USBD_Get_USB_Status>
 800995a:	4603      	mov	r3, r0
 800995c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800995e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	460b      	mov	r3, r1
 8009976:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009986:	7af9      	ldrb	r1, [r7, #11]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	f7fa f8f7 	bl	8003b7e <HAL_PCD_EP_Receive>
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f820 	bl	80099dc <USBD_Get_USB_Status>
 800999c:	4603      	mov	r3, r0
 800999e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80099b4:	4b03      	ldr	r3, [pc, #12]	; (80099c4 <USBD_static_malloc+0x18>)
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	20000d0c 	.word	0x20000d0c

080099c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d817      	bhi.n	8009a20 <USBD_Get_USB_Status+0x44>
 80099f0:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBD_Get_USB_Status+0x1c>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a09 	.word	0x08009a09
 80099fc:	08009a0f 	.word	0x08009a0f
 8009a00:	08009a15 	.word	0x08009a15
 8009a04:	08009a1b 	.word	0x08009a1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0c:	e00b      	b.n	8009a26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	73fb      	strb	r3, [r7, #15]
    break;
 8009a12:	e008      	b.n	8009a26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a14:	2301      	movs	r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
    break;
 8009a18:	e005      	b.n	8009a26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1e:	e002      	b.n	8009a26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	73fb      	strb	r3, [r7, #15]
    break;
 8009a24:	bf00      	nop
  }
  return usb_status;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <__errno>:
 8009a34:	4b01      	ldr	r3, [pc, #4]	; (8009a3c <__errno+0x8>)
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	20000100 	.word	0x20000100

08009a40 <__libc_init_array>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	4d0d      	ldr	r5, [pc, #52]	; (8009a78 <__libc_init_array+0x38>)
 8009a44:	4c0d      	ldr	r4, [pc, #52]	; (8009a7c <__libc_init_array+0x3c>)
 8009a46:	1b64      	subs	r4, r4, r5
 8009a48:	10a4      	asrs	r4, r4, #2
 8009a4a:	2600      	movs	r6, #0
 8009a4c:	42a6      	cmp	r6, r4
 8009a4e:	d109      	bne.n	8009a64 <__libc_init_array+0x24>
 8009a50:	4d0b      	ldr	r5, [pc, #44]	; (8009a80 <__libc_init_array+0x40>)
 8009a52:	4c0c      	ldr	r4, [pc, #48]	; (8009a84 <__libc_init_array+0x44>)
 8009a54:	f001 f816 	bl	800aa84 <_init>
 8009a58:	1b64      	subs	r4, r4, r5
 8009a5a:	10a4      	asrs	r4, r4, #2
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	42a6      	cmp	r6, r4
 8009a60:	d105      	bne.n	8009a6e <__libc_init_array+0x2e>
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a68:	4798      	blx	r3
 8009a6a:	3601      	adds	r6, #1
 8009a6c:	e7ee      	b.n	8009a4c <__libc_init_array+0xc>
 8009a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a72:	4798      	blx	r3
 8009a74:	3601      	adds	r6, #1
 8009a76:	e7f2      	b.n	8009a5e <__libc_init_array+0x1e>
 8009a78:	0800af40 	.word	0x0800af40
 8009a7c:	0800af40 	.word	0x0800af40
 8009a80:	0800af40 	.word	0x0800af40
 8009a84:	0800af44 	.word	0x0800af44

08009a88 <memset>:
 8009a88:	4402      	add	r2, r0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d100      	bne.n	8009a92 <memset+0xa>
 8009a90:	4770      	bx	lr
 8009a92:	f803 1b01 	strb.w	r1, [r3], #1
 8009a96:	e7f9      	b.n	8009a8c <memset+0x4>

08009a98 <__sfputc_r>:
 8009a98:	6893      	ldr	r3, [r2, #8]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	b410      	push	{r4}
 8009aa0:	6093      	str	r3, [r2, #8]
 8009aa2:	da08      	bge.n	8009ab6 <__sfputc_r+0x1e>
 8009aa4:	6994      	ldr	r4, [r2, #24]
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	db01      	blt.n	8009aae <__sfputc_r+0x16>
 8009aaa:	290a      	cmp	r1, #10
 8009aac:	d103      	bne.n	8009ab6 <__sfputc_r+0x1e>
 8009aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab2:	f000 bb17 	b.w	800a0e4 <__swbuf_r>
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	1c58      	adds	r0, r3, #1
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	7019      	strb	r1, [r3, #0]
 8009abe:	4608      	mov	r0, r1
 8009ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <__sfputs_r>:
 8009ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac8:	4606      	mov	r6, r0
 8009aca:	460f      	mov	r7, r1
 8009acc:	4614      	mov	r4, r2
 8009ace:	18d5      	adds	r5, r2, r3
 8009ad0:	42ac      	cmp	r4, r5
 8009ad2:	d101      	bne.n	8009ad8 <__sfputs_r+0x12>
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	e007      	b.n	8009ae8 <__sfputs_r+0x22>
 8009ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009adc:	463a      	mov	r2, r7
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ffda 	bl	8009a98 <__sfputc_r>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d1f3      	bne.n	8009ad0 <__sfputs_r+0xa>
 8009ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aec <_vfiprintf_r>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	460d      	mov	r5, r1
 8009af2:	b09d      	sub	sp, #116	; 0x74
 8009af4:	4614      	mov	r4, r2
 8009af6:	4698      	mov	r8, r3
 8009af8:	4606      	mov	r6, r0
 8009afa:	b118      	cbz	r0, 8009b04 <_vfiprintf_r+0x18>
 8009afc:	6983      	ldr	r3, [r0, #24]
 8009afe:	b90b      	cbnz	r3, 8009b04 <_vfiprintf_r+0x18>
 8009b00:	f000 fcca 	bl	800a498 <__sinit>
 8009b04:	4b89      	ldr	r3, [pc, #548]	; (8009d2c <_vfiprintf_r+0x240>)
 8009b06:	429d      	cmp	r5, r3
 8009b08:	d11b      	bne.n	8009b42 <_vfiprintf_r+0x56>
 8009b0a:	6875      	ldr	r5, [r6, #4]
 8009b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b0e:	07d9      	lsls	r1, r3, #31
 8009b10:	d405      	bmi.n	8009b1e <_vfiprintf_r+0x32>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	059a      	lsls	r2, r3, #22
 8009b16:	d402      	bmi.n	8009b1e <_vfiprintf_r+0x32>
 8009b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b1a:	f000 fd5b 	bl	800a5d4 <__retarget_lock_acquire_recursive>
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	071b      	lsls	r3, r3, #28
 8009b22:	d501      	bpl.n	8009b28 <_vfiprintf_r+0x3c>
 8009b24:	692b      	ldr	r3, [r5, #16]
 8009b26:	b9eb      	cbnz	r3, 8009b64 <_vfiprintf_r+0x78>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f000 fb2c 	bl	800a188 <__swsetup_r>
 8009b30:	b1c0      	cbz	r0, 8009b64 <_vfiprintf_r+0x78>
 8009b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b34:	07dc      	lsls	r4, r3, #31
 8009b36:	d50e      	bpl.n	8009b56 <_vfiprintf_r+0x6a>
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	b01d      	add	sp, #116	; 0x74
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	4b7b      	ldr	r3, [pc, #492]	; (8009d30 <_vfiprintf_r+0x244>)
 8009b44:	429d      	cmp	r5, r3
 8009b46:	d101      	bne.n	8009b4c <_vfiprintf_r+0x60>
 8009b48:	68b5      	ldr	r5, [r6, #8]
 8009b4a:	e7df      	b.n	8009b0c <_vfiprintf_r+0x20>
 8009b4c:	4b79      	ldr	r3, [pc, #484]	; (8009d34 <_vfiprintf_r+0x248>)
 8009b4e:	429d      	cmp	r5, r3
 8009b50:	bf08      	it	eq
 8009b52:	68f5      	ldreq	r5, [r6, #12]
 8009b54:	e7da      	b.n	8009b0c <_vfiprintf_r+0x20>
 8009b56:	89ab      	ldrh	r3, [r5, #12]
 8009b58:	0598      	lsls	r0, r3, #22
 8009b5a:	d4ed      	bmi.n	8009b38 <_vfiprintf_r+0x4c>
 8009b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b5e:	f000 fd3a 	bl	800a5d6 <__retarget_lock_release_recursive>
 8009b62:	e7e9      	b.n	8009b38 <_vfiprintf_r+0x4c>
 8009b64:	2300      	movs	r3, #0
 8009b66:	9309      	str	r3, [sp, #36]	; 0x24
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b72:	2330      	movs	r3, #48	; 0x30
 8009b74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d38 <_vfiprintf_r+0x24c>
 8009b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b7c:	f04f 0901 	mov.w	r9, #1
 8009b80:	4623      	mov	r3, r4
 8009b82:	469a      	mov	sl, r3
 8009b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b88:	b10a      	cbz	r2, 8009b8e <_vfiprintf_r+0xa2>
 8009b8a:	2a25      	cmp	r2, #37	; 0x25
 8009b8c:	d1f9      	bne.n	8009b82 <_vfiprintf_r+0x96>
 8009b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b92:	d00b      	beq.n	8009bac <_vfiprintf_r+0xc0>
 8009b94:	465b      	mov	r3, fp
 8009b96:	4622      	mov	r2, r4
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ff93 	bl	8009ac6 <__sfputs_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f000 80aa 	beq.w	8009cfa <_vfiprintf_r+0x20e>
 8009ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ba8:	445a      	add	r2, fp
 8009baa:	9209      	str	r2, [sp, #36]	; 0x24
 8009bac:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 80a2 	beq.w	8009cfa <_vfiprintf_r+0x20e>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc0:	f10a 0a01 	add.w	sl, sl, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8009bce:	4654      	mov	r4, sl
 8009bd0:	2205      	movs	r2, #5
 8009bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd6:	4858      	ldr	r0, [pc, #352]	; (8009d38 <_vfiprintf_r+0x24c>)
 8009bd8:	f7f6 fb02 	bl	80001e0 <memchr>
 8009bdc:	9a04      	ldr	r2, [sp, #16]
 8009bde:	b9d8      	cbnz	r0, 8009c18 <_vfiprintf_r+0x12c>
 8009be0:	06d1      	lsls	r1, r2, #27
 8009be2:	bf44      	itt	mi
 8009be4:	2320      	movmi	r3, #32
 8009be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bea:	0713      	lsls	r3, r2, #28
 8009bec:	bf44      	itt	mi
 8009bee:	232b      	movmi	r3, #43	; 0x2b
 8009bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfa:	d015      	beq.n	8009c28 <_vfiprintf_r+0x13c>
 8009bfc:	9a07      	ldr	r2, [sp, #28]
 8009bfe:	4654      	mov	r4, sl
 8009c00:	2000      	movs	r0, #0
 8009c02:	f04f 0c0a 	mov.w	ip, #10
 8009c06:	4621      	mov	r1, r4
 8009c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c0c:	3b30      	subs	r3, #48	; 0x30
 8009c0e:	2b09      	cmp	r3, #9
 8009c10:	d94e      	bls.n	8009cb0 <_vfiprintf_r+0x1c4>
 8009c12:	b1b0      	cbz	r0, 8009c42 <_vfiprintf_r+0x156>
 8009c14:	9207      	str	r2, [sp, #28]
 8009c16:	e014      	b.n	8009c42 <_vfiprintf_r+0x156>
 8009c18:	eba0 0308 	sub.w	r3, r0, r8
 8009c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	46a2      	mov	sl, r4
 8009c26:	e7d2      	b.n	8009bce <_vfiprintf_r+0xe2>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	1d19      	adds	r1, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	9103      	str	r1, [sp, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfbb      	ittet	lt
 8009c34:	425b      	neglt	r3, r3
 8009c36:	f042 0202 	orrlt.w	r2, r2, #2
 8009c3a:	9307      	strge	r3, [sp, #28]
 8009c3c:	9307      	strlt	r3, [sp, #28]
 8009c3e:	bfb8      	it	lt
 8009c40:	9204      	strlt	r2, [sp, #16]
 8009c42:	7823      	ldrb	r3, [r4, #0]
 8009c44:	2b2e      	cmp	r3, #46	; 0x2e
 8009c46:	d10c      	bne.n	8009c62 <_vfiprintf_r+0x176>
 8009c48:	7863      	ldrb	r3, [r4, #1]
 8009c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c4c:	d135      	bne.n	8009cba <_vfiprintf_r+0x1ce>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	1d1a      	adds	r2, r3, #4
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	9203      	str	r2, [sp, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	bfb8      	it	lt
 8009c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c5e:	3402      	adds	r4, #2
 8009c60:	9305      	str	r3, [sp, #20]
 8009c62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d48 <_vfiprintf_r+0x25c>
 8009c66:	7821      	ldrb	r1, [r4, #0]
 8009c68:	2203      	movs	r2, #3
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	f7f6 fab8 	bl	80001e0 <memchr>
 8009c70:	b140      	cbz	r0, 8009c84 <_vfiprintf_r+0x198>
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	eba0 000a 	sub.w	r0, r0, sl
 8009c78:	fa03 f000 	lsl.w	r0, r3, r0
 8009c7c:	9b04      	ldr	r3, [sp, #16]
 8009c7e:	4303      	orrs	r3, r0
 8009c80:	3401      	adds	r4, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c88:	482c      	ldr	r0, [pc, #176]	; (8009d3c <_vfiprintf_r+0x250>)
 8009c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c8e:	2206      	movs	r2, #6
 8009c90:	f7f6 faa6 	bl	80001e0 <memchr>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d03f      	beq.n	8009d18 <_vfiprintf_r+0x22c>
 8009c98:	4b29      	ldr	r3, [pc, #164]	; (8009d40 <_vfiprintf_r+0x254>)
 8009c9a:	bb1b      	cbnz	r3, 8009ce4 <_vfiprintf_r+0x1f8>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	3307      	adds	r3, #7
 8009ca0:	f023 0307 	bic.w	r3, r3, #7
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	443b      	add	r3, r7
 8009cac:	9309      	str	r3, [sp, #36]	; 0x24
 8009cae:	e767      	b.n	8009b80 <_vfiprintf_r+0x94>
 8009cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	2001      	movs	r0, #1
 8009cb8:	e7a5      	b.n	8009c06 <_vfiprintf_r+0x11a>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ccc:	3a30      	subs	r2, #48	; 0x30
 8009cce:	2a09      	cmp	r2, #9
 8009cd0:	d903      	bls.n	8009cda <_vfiprintf_r+0x1ee>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0c5      	beq.n	8009c62 <_vfiprintf_r+0x176>
 8009cd6:	9105      	str	r1, [sp, #20]
 8009cd8:	e7c3      	b.n	8009c62 <_vfiprintf_r+0x176>
 8009cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cde:	4604      	mov	r4, r0
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e7f0      	b.n	8009cc6 <_vfiprintf_r+0x1da>
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4b16      	ldr	r3, [pc, #88]	; (8009d44 <_vfiprintf_r+0x258>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f3af 8000 	nop.w
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	1c78      	adds	r0, r7, #1
 8009cf8:	d1d6      	bne.n	8009ca8 <_vfiprintf_r+0x1bc>
 8009cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cfc:	07d9      	lsls	r1, r3, #31
 8009cfe:	d405      	bmi.n	8009d0c <_vfiprintf_r+0x220>
 8009d00:	89ab      	ldrh	r3, [r5, #12]
 8009d02:	059a      	lsls	r2, r3, #22
 8009d04:	d402      	bmi.n	8009d0c <_vfiprintf_r+0x220>
 8009d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d08:	f000 fc65 	bl	800a5d6 <__retarget_lock_release_recursive>
 8009d0c:	89ab      	ldrh	r3, [r5, #12]
 8009d0e:	065b      	lsls	r3, r3, #25
 8009d10:	f53f af12 	bmi.w	8009b38 <_vfiprintf_r+0x4c>
 8009d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d16:	e711      	b.n	8009b3c <_vfiprintf_r+0x50>
 8009d18:	ab03      	add	r3, sp, #12
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <_vfiprintf_r+0x258>)
 8009d20:	a904      	add	r1, sp, #16
 8009d22:	4630      	mov	r0, r6
 8009d24:	f000 f88a 	bl	8009e3c <_printf_i>
 8009d28:	e7e4      	b.n	8009cf4 <_vfiprintf_r+0x208>
 8009d2a:	bf00      	nop
 8009d2c:	0800aef8 	.word	0x0800aef8
 8009d30:	0800af18 	.word	0x0800af18
 8009d34:	0800aed8 	.word	0x0800aed8
 8009d38:	0800aea4 	.word	0x0800aea4
 8009d3c:	0800aeae 	.word	0x0800aeae
 8009d40:	00000000 	.word	0x00000000
 8009d44:	08009ac7 	.word	0x08009ac7
 8009d48:	0800aeaa 	.word	0x0800aeaa

08009d4c <vfiprintf>:
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	460a      	mov	r2, r1
 8009d50:	4601      	mov	r1, r0
 8009d52:	4802      	ldr	r0, [pc, #8]	; (8009d5c <vfiprintf+0x10>)
 8009d54:	6800      	ldr	r0, [r0, #0]
 8009d56:	f7ff bec9 	b.w	8009aec <_vfiprintf_r>
 8009d5a:	bf00      	nop
 8009d5c:	20000100 	.word	0x20000100

08009d60 <_printf_common>:
 8009d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d64:	4616      	mov	r6, r2
 8009d66:	4699      	mov	r9, r3
 8009d68:	688a      	ldr	r2, [r1, #8]
 8009d6a:	690b      	ldr	r3, [r1, #16]
 8009d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	bfb8      	it	lt
 8009d74:	4613      	movlt	r3, r2
 8009d76:	6033      	str	r3, [r6, #0]
 8009d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	b10a      	cbz	r2, 8009d86 <_printf_common+0x26>
 8009d82:	3301      	adds	r3, #1
 8009d84:	6033      	str	r3, [r6, #0]
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	0699      	lsls	r1, r3, #26
 8009d8a:	bf42      	ittt	mi
 8009d8c:	6833      	ldrmi	r3, [r6, #0]
 8009d8e:	3302      	addmi	r3, #2
 8009d90:	6033      	strmi	r3, [r6, #0]
 8009d92:	6825      	ldr	r5, [r4, #0]
 8009d94:	f015 0506 	ands.w	r5, r5, #6
 8009d98:	d106      	bne.n	8009da8 <_printf_common+0x48>
 8009d9a:	f104 0a19 	add.w	sl, r4, #25
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	6832      	ldr	r2, [r6, #0]
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	dc26      	bgt.n	8009df6 <_printf_common+0x96>
 8009da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dac:	1e13      	subs	r3, r2, #0
 8009dae:	6822      	ldr	r2, [r4, #0]
 8009db0:	bf18      	it	ne
 8009db2:	2301      	movne	r3, #1
 8009db4:	0692      	lsls	r2, r2, #26
 8009db6:	d42b      	bmi.n	8009e10 <_printf_common+0xb0>
 8009db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dbc:	4649      	mov	r1, r9
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	47c0      	blx	r8
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	d01e      	beq.n	8009e04 <_printf_common+0xa4>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	68e5      	ldr	r5, [r4, #12]
 8009dca:	6832      	ldr	r2, [r6, #0]
 8009dcc:	f003 0306 	and.w	r3, r3, #6
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	bf08      	it	eq
 8009dd4:	1aad      	subeq	r5, r5, r2
 8009dd6:	68a3      	ldr	r3, [r4, #8]
 8009dd8:	6922      	ldr	r2, [r4, #16]
 8009dda:	bf0c      	ite	eq
 8009ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009de0:	2500      	movne	r5, #0
 8009de2:	4293      	cmp	r3, r2
 8009de4:	bfc4      	itt	gt
 8009de6:	1a9b      	subgt	r3, r3, r2
 8009de8:	18ed      	addgt	r5, r5, r3
 8009dea:	2600      	movs	r6, #0
 8009dec:	341a      	adds	r4, #26
 8009dee:	42b5      	cmp	r5, r6
 8009df0:	d11a      	bne.n	8009e28 <_printf_common+0xc8>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e008      	b.n	8009e08 <_printf_common+0xa8>
 8009df6:	2301      	movs	r3, #1
 8009df8:	4652      	mov	r2, sl
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	47c0      	blx	r8
 8009e00:	3001      	adds	r0, #1
 8009e02:	d103      	bne.n	8009e0c <_printf_common+0xac>
 8009e04:	f04f 30ff 	mov.w	r0, #4294967295
 8009e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	e7c6      	b.n	8009d9e <_printf_common+0x3e>
 8009e10:	18e1      	adds	r1, r4, r3
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	2030      	movs	r0, #48	; 0x30
 8009e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e1a:	4422      	add	r2, r4
 8009e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e24:	3302      	adds	r3, #2
 8009e26:	e7c7      	b.n	8009db8 <_printf_common+0x58>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	4638      	mov	r0, r7
 8009e30:	47c0      	blx	r8
 8009e32:	3001      	adds	r0, #1
 8009e34:	d0e6      	beq.n	8009e04 <_printf_common+0xa4>
 8009e36:	3601      	adds	r6, #1
 8009e38:	e7d9      	b.n	8009dee <_printf_common+0x8e>
	...

08009e3c <_printf_i>:
 8009e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e40:	7e0f      	ldrb	r7, [r1, #24]
 8009e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e44:	2f78      	cmp	r7, #120	; 0x78
 8009e46:	4691      	mov	r9, r2
 8009e48:	4680      	mov	r8, r0
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	469a      	mov	sl, r3
 8009e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e52:	d807      	bhi.n	8009e64 <_printf_i+0x28>
 8009e54:	2f62      	cmp	r7, #98	; 0x62
 8009e56:	d80a      	bhi.n	8009e6e <_printf_i+0x32>
 8009e58:	2f00      	cmp	r7, #0
 8009e5a:	f000 80d8 	beq.w	800a00e <_printf_i+0x1d2>
 8009e5e:	2f58      	cmp	r7, #88	; 0x58
 8009e60:	f000 80a3 	beq.w	8009faa <_printf_i+0x16e>
 8009e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e6c:	e03a      	b.n	8009ee4 <_printf_i+0xa8>
 8009e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e72:	2b15      	cmp	r3, #21
 8009e74:	d8f6      	bhi.n	8009e64 <_printf_i+0x28>
 8009e76:	a101      	add	r1, pc, #4	; (adr r1, 8009e7c <_printf_i+0x40>)
 8009e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e7c:	08009ed5 	.word	0x08009ed5
 8009e80:	08009ee9 	.word	0x08009ee9
 8009e84:	08009e65 	.word	0x08009e65
 8009e88:	08009e65 	.word	0x08009e65
 8009e8c:	08009e65 	.word	0x08009e65
 8009e90:	08009e65 	.word	0x08009e65
 8009e94:	08009ee9 	.word	0x08009ee9
 8009e98:	08009e65 	.word	0x08009e65
 8009e9c:	08009e65 	.word	0x08009e65
 8009ea0:	08009e65 	.word	0x08009e65
 8009ea4:	08009e65 	.word	0x08009e65
 8009ea8:	08009ff5 	.word	0x08009ff5
 8009eac:	08009f19 	.word	0x08009f19
 8009eb0:	08009fd7 	.word	0x08009fd7
 8009eb4:	08009e65 	.word	0x08009e65
 8009eb8:	08009e65 	.word	0x08009e65
 8009ebc:	0800a017 	.word	0x0800a017
 8009ec0:	08009e65 	.word	0x08009e65
 8009ec4:	08009f19 	.word	0x08009f19
 8009ec8:	08009e65 	.word	0x08009e65
 8009ecc:	08009e65 	.word	0x08009e65
 8009ed0:	08009fdf 	.word	0x08009fdf
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	1d1a      	adds	r2, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	602a      	str	r2, [r5, #0]
 8009edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e0a3      	b.n	800a030 <_printf_i+0x1f4>
 8009ee8:	6820      	ldr	r0, [r4, #0]
 8009eea:	6829      	ldr	r1, [r5, #0]
 8009eec:	0606      	lsls	r6, r0, #24
 8009eee:	f101 0304 	add.w	r3, r1, #4
 8009ef2:	d50a      	bpl.n	8009f0a <_printf_i+0xce>
 8009ef4:	680e      	ldr	r6, [r1, #0]
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	2e00      	cmp	r6, #0
 8009efa:	da03      	bge.n	8009f04 <_printf_i+0xc8>
 8009efc:	232d      	movs	r3, #45	; 0x2d
 8009efe:	4276      	negs	r6, r6
 8009f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f04:	485e      	ldr	r0, [pc, #376]	; (800a080 <_printf_i+0x244>)
 8009f06:	230a      	movs	r3, #10
 8009f08:	e019      	b.n	8009f3e <_printf_i+0x102>
 8009f0a:	680e      	ldr	r6, [r1, #0]
 8009f0c:	602b      	str	r3, [r5, #0]
 8009f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f12:	bf18      	it	ne
 8009f14:	b236      	sxthne	r6, r6
 8009f16:	e7ef      	b.n	8009ef8 <_printf_i+0xbc>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	6820      	ldr	r0, [r4, #0]
 8009f1c:	1d19      	adds	r1, r3, #4
 8009f1e:	6029      	str	r1, [r5, #0]
 8009f20:	0601      	lsls	r1, r0, #24
 8009f22:	d501      	bpl.n	8009f28 <_printf_i+0xec>
 8009f24:	681e      	ldr	r6, [r3, #0]
 8009f26:	e002      	b.n	8009f2e <_printf_i+0xf2>
 8009f28:	0646      	lsls	r6, r0, #25
 8009f2a:	d5fb      	bpl.n	8009f24 <_printf_i+0xe8>
 8009f2c:	881e      	ldrh	r6, [r3, #0]
 8009f2e:	4854      	ldr	r0, [pc, #336]	; (800a080 <_printf_i+0x244>)
 8009f30:	2f6f      	cmp	r7, #111	; 0x6f
 8009f32:	bf0c      	ite	eq
 8009f34:	2308      	moveq	r3, #8
 8009f36:	230a      	movne	r3, #10
 8009f38:	2100      	movs	r1, #0
 8009f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f3e:	6865      	ldr	r5, [r4, #4]
 8009f40:	60a5      	str	r5, [r4, #8]
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	bfa2      	ittt	ge
 8009f46:	6821      	ldrge	r1, [r4, #0]
 8009f48:	f021 0104 	bicge.w	r1, r1, #4
 8009f4c:	6021      	strge	r1, [r4, #0]
 8009f4e:	b90e      	cbnz	r6, 8009f54 <_printf_i+0x118>
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	d04d      	beq.n	8009ff0 <_printf_i+0x1b4>
 8009f54:	4615      	mov	r5, r2
 8009f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8009f5e:	5dc7      	ldrb	r7, [r0, r7]
 8009f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f64:	4637      	mov	r7, r6
 8009f66:	42bb      	cmp	r3, r7
 8009f68:	460e      	mov	r6, r1
 8009f6a:	d9f4      	bls.n	8009f56 <_printf_i+0x11a>
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d10b      	bne.n	8009f88 <_printf_i+0x14c>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	07de      	lsls	r6, r3, #31
 8009f74:	d508      	bpl.n	8009f88 <_printf_i+0x14c>
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	6861      	ldr	r1, [r4, #4]
 8009f7a:	4299      	cmp	r1, r3
 8009f7c:	bfde      	ittt	le
 8009f7e:	2330      	movle	r3, #48	; 0x30
 8009f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f88:	1b52      	subs	r2, r2, r5
 8009f8a:	6122      	str	r2, [r4, #16]
 8009f8c:	f8cd a000 	str.w	sl, [sp]
 8009f90:	464b      	mov	r3, r9
 8009f92:	aa03      	add	r2, sp, #12
 8009f94:	4621      	mov	r1, r4
 8009f96:	4640      	mov	r0, r8
 8009f98:	f7ff fee2 	bl	8009d60 <_printf_common>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d14c      	bne.n	800a03a <_printf_i+0x1fe>
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa4:	b004      	add	sp, #16
 8009fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009faa:	4835      	ldr	r0, [pc, #212]	; (800a080 <_printf_i+0x244>)
 8009fac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fb0:	6829      	ldr	r1, [r5, #0]
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fb8:	6029      	str	r1, [r5, #0]
 8009fba:	061d      	lsls	r5, r3, #24
 8009fbc:	d514      	bpl.n	8009fe8 <_printf_i+0x1ac>
 8009fbe:	07df      	lsls	r7, r3, #31
 8009fc0:	bf44      	itt	mi
 8009fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8009fc6:	6023      	strmi	r3, [r4, #0]
 8009fc8:	b91e      	cbnz	r6, 8009fd2 <_printf_i+0x196>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	f023 0320 	bic.w	r3, r3, #32
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	2310      	movs	r3, #16
 8009fd4:	e7b0      	b.n	8009f38 <_printf_i+0xfc>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	f043 0320 	orr.w	r3, r3, #32
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	2378      	movs	r3, #120	; 0x78
 8009fe0:	4828      	ldr	r0, [pc, #160]	; (800a084 <_printf_i+0x248>)
 8009fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fe6:	e7e3      	b.n	8009fb0 <_printf_i+0x174>
 8009fe8:	0659      	lsls	r1, r3, #25
 8009fea:	bf48      	it	mi
 8009fec:	b2b6      	uxthmi	r6, r6
 8009fee:	e7e6      	b.n	8009fbe <_printf_i+0x182>
 8009ff0:	4615      	mov	r5, r2
 8009ff2:	e7bb      	b.n	8009f6c <_printf_i+0x130>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	6826      	ldr	r6, [r4, #0]
 8009ff8:	6961      	ldr	r1, [r4, #20]
 8009ffa:	1d18      	adds	r0, r3, #4
 8009ffc:	6028      	str	r0, [r5, #0]
 8009ffe:	0635      	lsls	r5, r6, #24
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	d501      	bpl.n	800a008 <_printf_i+0x1cc>
 800a004:	6019      	str	r1, [r3, #0]
 800a006:	e002      	b.n	800a00e <_printf_i+0x1d2>
 800a008:	0670      	lsls	r0, r6, #25
 800a00a:	d5fb      	bpl.n	800a004 <_printf_i+0x1c8>
 800a00c:	8019      	strh	r1, [r3, #0]
 800a00e:	2300      	movs	r3, #0
 800a010:	6123      	str	r3, [r4, #16]
 800a012:	4615      	mov	r5, r2
 800a014:	e7ba      	b.n	8009f8c <_printf_i+0x150>
 800a016:	682b      	ldr	r3, [r5, #0]
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	602a      	str	r2, [r5, #0]
 800a01c:	681d      	ldr	r5, [r3, #0]
 800a01e:	6862      	ldr	r2, [r4, #4]
 800a020:	2100      	movs	r1, #0
 800a022:	4628      	mov	r0, r5
 800a024:	f7f6 f8dc 	bl	80001e0 <memchr>
 800a028:	b108      	cbz	r0, 800a02e <_printf_i+0x1f2>
 800a02a:	1b40      	subs	r0, r0, r5
 800a02c:	6060      	str	r0, [r4, #4]
 800a02e:	6863      	ldr	r3, [r4, #4]
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	2300      	movs	r3, #0
 800a034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a038:	e7a8      	b.n	8009f8c <_printf_i+0x150>
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	462a      	mov	r2, r5
 800a03e:	4649      	mov	r1, r9
 800a040:	4640      	mov	r0, r8
 800a042:	47d0      	blx	sl
 800a044:	3001      	adds	r0, #1
 800a046:	d0ab      	beq.n	8009fa0 <_printf_i+0x164>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	079b      	lsls	r3, r3, #30
 800a04c:	d413      	bmi.n	800a076 <_printf_i+0x23a>
 800a04e:	68e0      	ldr	r0, [r4, #12]
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	4298      	cmp	r0, r3
 800a054:	bfb8      	it	lt
 800a056:	4618      	movlt	r0, r3
 800a058:	e7a4      	b.n	8009fa4 <_printf_i+0x168>
 800a05a:	2301      	movs	r3, #1
 800a05c:	4632      	mov	r2, r6
 800a05e:	4649      	mov	r1, r9
 800a060:	4640      	mov	r0, r8
 800a062:	47d0      	blx	sl
 800a064:	3001      	adds	r0, #1
 800a066:	d09b      	beq.n	8009fa0 <_printf_i+0x164>
 800a068:	3501      	adds	r5, #1
 800a06a:	68e3      	ldr	r3, [r4, #12]
 800a06c:	9903      	ldr	r1, [sp, #12]
 800a06e:	1a5b      	subs	r3, r3, r1
 800a070:	42ab      	cmp	r3, r5
 800a072:	dcf2      	bgt.n	800a05a <_printf_i+0x21e>
 800a074:	e7eb      	b.n	800a04e <_printf_i+0x212>
 800a076:	2500      	movs	r5, #0
 800a078:	f104 0619 	add.w	r6, r4, #25
 800a07c:	e7f5      	b.n	800a06a <_printf_i+0x22e>
 800a07e:	bf00      	nop
 800a080:	0800aeb5 	.word	0x0800aeb5
 800a084:	0800aec6 	.word	0x0800aec6

0800a088 <iprintf>:
 800a088:	b40f      	push	{r0, r1, r2, r3}
 800a08a:	4b0a      	ldr	r3, [pc, #40]	; (800a0b4 <iprintf+0x2c>)
 800a08c:	b513      	push	{r0, r1, r4, lr}
 800a08e:	681c      	ldr	r4, [r3, #0]
 800a090:	b124      	cbz	r4, 800a09c <iprintf+0x14>
 800a092:	69a3      	ldr	r3, [r4, #24]
 800a094:	b913      	cbnz	r3, 800a09c <iprintf+0x14>
 800a096:	4620      	mov	r0, r4
 800a098:	f000 f9fe 	bl	800a498 <__sinit>
 800a09c:	ab05      	add	r3, sp, #20
 800a09e:	9a04      	ldr	r2, [sp, #16]
 800a0a0:	68a1      	ldr	r1, [r4, #8]
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7ff fd21 	bl	8009aec <_vfiprintf_r>
 800a0aa:	b002      	add	sp, #8
 800a0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b0:	b004      	add	sp, #16
 800a0b2:	4770      	bx	lr
 800a0b4:	20000100 	.word	0x20000100

0800a0b8 <putchar>:
 800a0b8:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <putchar+0x28>)
 800a0ba:	b513      	push	{r0, r1, r4, lr}
 800a0bc:	681c      	ldr	r4, [r3, #0]
 800a0be:	4601      	mov	r1, r0
 800a0c0:	b134      	cbz	r4, 800a0d0 <putchar+0x18>
 800a0c2:	69a3      	ldr	r3, [r4, #24]
 800a0c4:	b923      	cbnz	r3, 800a0d0 <putchar+0x18>
 800a0c6:	9001      	str	r0, [sp, #4]
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 f9e5 	bl	800a498 <__sinit>
 800a0ce:	9901      	ldr	r1, [sp, #4]
 800a0d0:	68a2      	ldr	r2, [r4, #8]
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	b002      	add	sp, #8
 800a0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0da:	f000 bbc3 	b.w	800a864 <_putc_r>
 800a0de:	bf00      	nop
 800a0e0:	20000100 	.word	0x20000100

0800a0e4 <__swbuf_r>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	460e      	mov	r6, r1
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	b118      	cbz	r0, 800a0f6 <__swbuf_r+0x12>
 800a0ee:	6983      	ldr	r3, [r0, #24]
 800a0f0:	b90b      	cbnz	r3, 800a0f6 <__swbuf_r+0x12>
 800a0f2:	f000 f9d1 	bl	800a498 <__sinit>
 800a0f6:	4b21      	ldr	r3, [pc, #132]	; (800a17c <__swbuf_r+0x98>)
 800a0f8:	429c      	cmp	r4, r3
 800a0fa:	d12b      	bne.n	800a154 <__swbuf_r+0x70>
 800a0fc:	686c      	ldr	r4, [r5, #4]
 800a0fe:	69a3      	ldr	r3, [r4, #24]
 800a100:	60a3      	str	r3, [r4, #8]
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	071a      	lsls	r2, r3, #28
 800a106:	d52f      	bpl.n	800a168 <__swbuf_r+0x84>
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	b36b      	cbz	r3, 800a168 <__swbuf_r+0x84>
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	1ac0      	subs	r0, r0, r3
 800a112:	6963      	ldr	r3, [r4, #20]
 800a114:	b2f6      	uxtb	r6, r6
 800a116:	4283      	cmp	r3, r0
 800a118:	4637      	mov	r7, r6
 800a11a:	dc04      	bgt.n	800a126 <__swbuf_r+0x42>
 800a11c:	4621      	mov	r1, r4
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 f926 	bl	800a370 <_fflush_r>
 800a124:	bb30      	cbnz	r0, 800a174 <__swbuf_r+0x90>
 800a126:	68a3      	ldr	r3, [r4, #8]
 800a128:	3b01      	subs	r3, #1
 800a12a:	60a3      	str	r3, [r4, #8]
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	6022      	str	r2, [r4, #0]
 800a132:	701e      	strb	r6, [r3, #0]
 800a134:	6963      	ldr	r3, [r4, #20]
 800a136:	3001      	adds	r0, #1
 800a138:	4283      	cmp	r3, r0
 800a13a:	d004      	beq.n	800a146 <__swbuf_r+0x62>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	07db      	lsls	r3, r3, #31
 800a140:	d506      	bpl.n	800a150 <__swbuf_r+0x6c>
 800a142:	2e0a      	cmp	r6, #10
 800a144:	d104      	bne.n	800a150 <__swbuf_r+0x6c>
 800a146:	4621      	mov	r1, r4
 800a148:	4628      	mov	r0, r5
 800a14a:	f000 f911 	bl	800a370 <_fflush_r>
 800a14e:	b988      	cbnz	r0, 800a174 <__swbuf_r+0x90>
 800a150:	4638      	mov	r0, r7
 800a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a154:	4b0a      	ldr	r3, [pc, #40]	; (800a180 <__swbuf_r+0x9c>)
 800a156:	429c      	cmp	r4, r3
 800a158:	d101      	bne.n	800a15e <__swbuf_r+0x7a>
 800a15a:	68ac      	ldr	r4, [r5, #8]
 800a15c:	e7cf      	b.n	800a0fe <__swbuf_r+0x1a>
 800a15e:	4b09      	ldr	r3, [pc, #36]	; (800a184 <__swbuf_r+0xa0>)
 800a160:	429c      	cmp	r4, r3
 800a162:	bf08      	it	eq
 800a164:	68ec      	ldreq	r4, [r5, #12]
 800a166:	e7ca      	b.n	800a0fe <__swbuf_r+0x1a>
 800a168:	4621      	mov	r1, r4
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 f80c 	bl	800a188 <__swsetup_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	d0cb      	beq.n	800a10c <__swbuf_r+0x28>
 800a174:	f04f 37ff 	mov.w	r7, #4294967295
 800a178:	e7ea      	b.n	800a150 <__swbuf_r+0x6c>
 800a17a:	bf00      	nop
 800a17c:	0800aef8 	.word	0x0800aef8
 800a180:	0800af18 	.word	0x0800af18
 800a184:	0800aed8 	.word	0x0800aed8

0800a188 <__swsetup_r>:
 800a188:	4b32      	ldr	r3, [pc, #200]	; (800a254 <__swsetup_r+0xcc>)
 800a18a:	b570      	push	{r4, r5, r6, lr}
 800a18c:	681d      	ldr	r5, [r3, #0]
 800a18e:	4606      	mov	r6, r0
 800a190:	460c      	mov	r4, r1
 800a192:	b125      	cbz	r5, 800a19e <__swsetup_r+0x16>
 800a194:	69ab      	ldr	r3, [r5, #24]
 800a196:	b913      	cbnz	r3, 800a19e <__swsetup_r+0x16>
 800a198:	4628      	mov	r0, r5
 800a19a:	f000 f97d 	bl	800a498 <__sinit>
 800a19e:	4b2e      	ldr	r3, [pc, #184]	; (800a258 <__swsetup_r+0xd0>)
 800a1a0:	429c      	cmp	r4, r3
 800a1a2:	d10f      	bne.n	800a1c4 <__swsetup_r+0x3c>
 800a1a4:	686c      	ldr	r4, [r5, #4]
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ac:	0719      	lsls	r1, r3, #28
 800a1ae:	d42c      	bmi.n	800a20a <__swsetup_r+0x82>
 800a1b0:	06dd      	lsls	r5, r3, #27
 800a1b2:	d411      	bmi.n	800a1d8 <__swsetup_r+0x50>
 800a1b4:	2309      	movs	r3, #9
 800a1b6:	6033      	str	r3, [r6, #0]
 800a1b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c2:	e03e      	b.n	800a242 <__swsetup_r+0xba>
 800a1c4:	4b25      	ldr	r3, [pc, #148]	; (800a25c <__swsetup_r+0xd4>)
 800a1c6:	429c      	cmp	r4, r3
 800a1c8:	d101      	bne.n	800a1ce <__swsetup_r+0x46>
 800a1ca:	68ac      	ldr	r4, [r5, #8]
 800a1cc:	e7eb      	b.n	800a1a6 <__swsetup_r+0x1e>
 800a1ce:	4b24      	ldr	r3, [pc, #144]	; (800a260 <__swsetup_r+0xd8>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	bf08      	it	eq
 800a1d4:	68ec      	ldreq	r4, [r5, #12]
 800a1d6:	e7e6      	b.n	800a1a6 <__swsetup_r+0x1e>
 800a1d8:	0758      	lsls	r0, r3, #29
 800a1da:	d512      	bpl.n	800a202 <__swsetup_r+0x7a>
 800a1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1de:	b141      	cbz	r1, 800a1f2 <__swsetup_r+0x6a>
 800a1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1e4:	4299      	cmp	r1, r3
 800a1e6:	d002      	beq.n	800a1ee <__swsetup_r+0x66>
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f000 fa5b 	bl	800a6a4 <_free_r>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	6363      	str	r3, [r4, #52]	; 0x34
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	6063      	str	r3, [r4, #4]
 800a1fe:	6923      	ldr	r3, [r4, #16]
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f043 0308 	orr.w	r3, r3, #8
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	b94b      	cbnz	r3, 800a222 <__swsetup_r+0x9a>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a218:	d003      	beq.n	800a222 <__swsetup_r+0x9a>
 800a21a:	4621      	mov	r1, r4
 800a21c:	4630      	mov	r0, r6
 800a21e:	f000 fa01 	bl	800a624 <__smakebuf_r>
 800a222:	89a0      	ldrh	r0, [r4, #12]
 800a224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a228:	f010 0301 	ands.w	r3, r0, #1
 800a22c:	d00a      	beq.n	800a244 <__swsetup_r+0xbc>
 800a22e:	2300      	movs	r3, #0
 800a230:	60a3      	str	r3, [r4, #8]
 800a232:	6963      	ldr	r3, [r4, #20]
 800a234:	425b      	negs	r3, r3
 800a236:	61a3      	str	r3, [r4, #24]
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	b943      	cbnz	r3, 800a24e <__swsetup_r+0xc6>
 800a23c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a240:	d1ba      	bne.n	800a1b8 <__swsetup_r+0x30>
 800a242:	bd70      	pop	{r4, r5, r6, pc}
 800a244:	0781      	lsls	r1, r0, #30
 800a246:	bf58      	it	pl
 800a248:	6963      	ldrpl	r3, [r4, #20]
 800a24a:	60a3      	str	r3, [r4, #8]
 800a24c:	e7f4      	b.n	800a238 <__swsetup_r+0xb0>
 800a24e:	2000      	movs	r0, #0
 800a250:	e7f7      	b.n	800a242 <__swsetup_r+0xba>
 800a252:	bf00      	nop
 800a254:	20000100 	.word	0x20000100
 800a258:	0800aef8 	.word	0x0800aef8
 800a25c:	0800af18 	.word	0x0800af18
 800a260:	0800aed8 	.word	0x0800aed8

0800a264 <__sflush_r>:
 800a264:	898a      	ldrh	r2, [r1, #12]
 800a266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26a:	4605      	mov	r5, r0
 800a26c:	0710      	lsls	r0, r2, #28
 800a26e:	460c      	mov	r4, r1
 800a270:	d458      	bmi.n	800a324 <__sflush_r+0xc0>
 800a272:	684b      	ldr	r3, [r1, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	dc05      	bgt.n	800a284 <__sflush_r+0x20>
 800a278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dc02      	bgt.n	800a284 <__sflush_r+0x20>
 800a27e:	2000      	movs	r0, #0
 800a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a286:	2e00      	cmp	r6, #0
 800a288:	d0f9      	beq.n	800a27e <__sflush_r+0x1a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a290:	682f      	ldr	r7, [r5, #0]
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	d032      	beq.n	800a2fc <__sflush_r+0x98>
 800a296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	075a      	lsls	r2, r3, #29
 800a29c:	d505      	bpl.n	800a2aa <__sflush_r+0x46>
 800a29e:	6863      	ldr	r3, [r4, #4]
 800a2a0:	1ac0      	subs	r0, r0, r3
 800a2a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2a4:	b10b      	cbz	r3, 800a2aa <__sflush_r+0x46>
 800a2a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2a8:	1ac0      	subs	r0, r0, r3
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2b0:	6a21      	ldr	r1, [r4, #32]
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b0      	blx	r6
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	d106      	bne.n	800a2ca <__sflush_r+0x66>
 800a2bc:	6829      	ldr	r1, [r5, #0]
 800a2be:	291d      	cmp	r1, #29
 800a2c0:	d82c      	bhi.n	800a31c <__sflush_r+0xb8>
 800a2c2:	4a2a      	ldr	r2, [pc, #168]	; (800a36c <__sflush_r+0x108>)
 800a2c4:	40ca      	lsrs	r2, r1
 800a2c6:	07d6      	lsls	r6, r2, #31
 800a2c8:	d528      	bpl.n	800a31c <__sflush_r+0xb8>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	6062      	str	r2, [r4, #4]
 800a2ce:	04d9      	lsls	r1, r3, #19
 800a2d0:	6922      	ldr	r2, [r4, #16]
 800a2d2:	6022      	str	r2, [r4, #0]
 800a2d4:	d504      	bpl.n	800a2e0 <__sflush_r+0x7c>
 800a2d6:	1c42      	adds	r2, r0, #1
 800a2d8:	d101      	bne.n	800a2de <__sflush_r+0x7a>
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	b903      	cbnz	r3, 800a2e0 <__sflush_r+0x7c>
 800a2de:	6560      	str	r0, [r4, #84]	; 0x54
 800a2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2e2:	602f      	str	r7, [r5, #0]
 800a2e4:	2900      	cmp	r1, #0
 800a2e6:	d0ca      	beq.n	800a27e <__sflush_r+0x1a>
 800a2e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ec:	4299      	cmp	r1, r3
 800a2ee:	d002      	beq.n	800a2f6 <__sflush_r+0x92>
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f000 f9d7 	bl	800a6a4 <_free_r>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a2fa:	e7c1      	b.n	800a280 <__sflush_r+0x1c>
 800a2fc:	6a21      	ldr	r1, [r4, #32]
 800a2fe:	2301      	movs	r3, #1
 800a300:	4628      	mov	r0, r5
 800a302:	47b0      	blx	r6
 800a304:	1c41      	adds	r1, r0, #1
 800a306:	d1c7      	bne.n	800a298 <__sflush_r+0x34>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0c4      	beq.n	800a298 <__sflush_r+0x34>
 800a30e:	2b1d      	cmp	r3, #29
 800a310:	d001      	beq.n	800a316 <__sflush_r+0xb2>
 800a312:	2b16      	cmp	r3, #22
 800a314:	d101      	bne.n	800a31a <__sflush_r+0xb6>
 800a316:	602f      	str	r7, [r5, #0]
 800a318:	e7b1      	b.n	800a27e <__sflush_r+0x1a>
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a320:	81a3      	strh	r3, [r4, #12]
 800a322:	e7ad      	b.n	800a280 <__sflush_r+0x1c>
 800a324:	690f      	ldr	r7, [r1, #16]
 800a326:	2f00      	cmp	r7, #0
 800a328:	d0a9      	beq.n	800a27e <__sflush_r+0x1a>
 800a32a:	0793      	lsls	r3, r2, #30
 800a32c:	680e      	ldr	r6, [r1, #0]
 800a32e:	bf08      	it	eq
 800a330:	694b      	ldreq	r3, [r1, #20]
 800a332:	600f      	str	r7, [r1, #0]
 800a334:	bf18      	it	ne
 800a336:	2300      	movne	r3, #0
 800a338:	eba6 0807 	sub.w	r8, r6, r7
 800a33c:	608b      	str	r3, [r1, #8]
 800a33e:	f1b8 0f00 	cmp.w	r8, #0
 800a342:	dd9c      	ble.n	800a27e <__sflush_r+0x1a>
 800a344:	6a21      	ldr	r1, [r4, #32]
 800a346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a348:	4643      	mov	r3, r8
 800a34a:	463a      	mov	r2, r7
 800a34c:	4628      	mov	r0, r5
 800a34e:	47b0      	blx	r6
 800a350:	2800      	cmp	r0, #0
 800a352:	dc06      	bgt.n	800a362 <__sflush_r+0xfe>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	e78e      	b.n	800a280 <__sflush_r+0x1c>
 800a362:	4407      	add	r7, r0
 800a364:	eba8 0800 	sub.w	r8, r8, r0
 800a368:	e7e9      	b.n	800a33e <__sflush_r+0xda>
 800a36a:	bf00      	nop
 800a36c:	20400001 	.word	0x20400001

0800a370 <_fflush_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	690b      	ldr	r3, [r1, #16]
 800a374:	4605      	mov	r5, r0
 800a376:	460c      	mov	r4, r1
 800a378:	b913      	cbnz	r3, 800a380 <_fflush_r+0x10>
 800a37a:	2500      	movs	r5, #0
 800a37c:	4628      	mov	r0, r5
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	b118      	cbz	r0, 800a38a <_fflush_r+0x1a>
 800a382:	6983      	ldr	r3, [r0, #24]
 800a384:	b90b      	cbnz	r3, 800a38a <_fflush_r+0x1a>
 800a386:	f000 f887 	bl	800a498 <__sinit>
 800a38a:	4b14      	ldr	r3, [pc, #80]	; (800a3dc <_fflush_r+0x6c>)
 800a38c:	429c      	cmp	r4, r3
 800a38e:	d11b      	bne.n	800a3c8 <_fflush_r+0x58>
 800a390:	686c      	ldr	r4, [r5, #4]
 800a392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0ef      	beq.n	800a37a <_fflush_r+0xa>
 800a39a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a39c:	07d0      	lsls	r0, r2, #31
 800a39e:	d404      	bmi.n	800a3aa <_fflush_r+0x3a>
 800a3a0:	0599      	lsls	r1, r3, #22
 800a3a2:	d402      	bmi.n	800a3aa <_fflush_r+0x3a>
 800a3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3a6:	f000 f915 	bl	800a5d4 <__retarget_lock_acquire_recursive>
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	f7ff ff59 	bl	800a264 <__sflush_r>
 800a3b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3b4:	07da      	lsls	r2, r3, #31
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	d4e0      	bmi.n	800a37c <_fflush_r+0xc>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	059b      	lsls	r3, r3, #22
 800a3be:	d4dd      	bmi.n	800a37c <_fflush_r+0xc>
 800a3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3c2:	f000 f908 	bl	800a5d6 <__retarget_lock_release_recursive>
 800a3c6:	e7d9      	b.n	800a37c <_fflush_r+0xc>
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <_fflush_r+0x70>)
 800a3ca:	429c      	cmp	r4, r3
 800a3cc:	d101      	bne.n	800a3d2 <_fflush_r+0x62>
 800a3ce:	68ac      	ldr	r4, [r5, #8]
 800a3d0:	e7df      	b.n	800a392 <_fflush_r+0x22>
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <_fflush_r+0x74>)
 800a3d4:	429c      	cmp	r4, r3
 800a3d6:	bf08      	it	eq
 800a3d8:	68ec      	ldreq	r4, [r5, #12]
 800a3da:	e7da      	b.n	800a392 <_fflush_r+0x22>
 800a3dc:	0800aef8 	.word	0x0800aef8
 800a3e0:	0800af18 	.word	0x0800af18
 800a3e4:	0800aed8 	.word	0x0800aed8

0800a3e8 <std>:
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	b510      	push	{r4, lr}
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a3f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3f6:	6083      	str	r3, [r0, #8]
 800a3f8:	8181      	strh	r1, [r0, #12]
 800a3fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a3fc:	81c2      	strh	r2, [r0, #14]
 800a3fe:	6183      	str	r3, [r0, #24]
 800a400:	4619      	mov	r1, r3
 800a402:	2208      	movs	r2, #8
 800a404:	305c      	adds	r0, #92	; 0x5c
 800a406:	f7ff fb3f 	bl	8009a88 <memset>
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <std+0x38>)
 800a40c:	6263      	str	r3, [r4, #36]	; 0x24
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <std+0x3c>)
 800a410:	62a3      	str	r3, [r4, #40]	; 0x28
 800a412:	4b05      	ldr	r3, [pc, #20]	; (800a428 <std+0x40>)
 800a414:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a416:	4b05      	ldr	r3, [pc, #20]	; (800a42c <std+0x44>)
 800a418:	6224      	str	r4, [r4, #32]
 800a41a:	6323      	str	r3, [r4, #48]	; 0x30
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	bf00      	nop
 800a420:	0800a915 	.word	0x0800a915
 800a424:	0800a937 	.word	0x0800a937
 800a428:	0800a96f 	.word	0x0800a96f
 800a42c:	0800a993 	.word	0x0800a993

0800a430 <_cleanup_r>:
 800a430:	4901      	ldr	r1, [pc, #4]	; (800a438 <_cleanup_r+0x8>)
 800a432:	f000 b8af 	b.w	800a594 <_fwalk_reent>
 800a436:	bf00      	nop
 800a438:	0800a371 	.word	0x0800a371

0800a43c <__sfmoreglue>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	2268      	movs	r2, #104	; 0x68
 800a440:	1e4d      	subs	r5, r1, #1
 800a442:	4355      	muls	r5, r2
 800a444:	460e      	mov	r6, r1
 800a446:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a44a:	f000 f997 	bl	800a77c <_malloc_r>
 800a44e:	4604      	mov	r4, r0
 800a450:	b140      	cbz	r0, 800a464 <__sfmoreglue+0x28>
 800a452:	2100      	movs	r1, #0
 800a454:	e9c0 1600 	strd	r1, r6, [r0]
 800a458:	300c      	adds	r0, #12
 800a45a:	60a0      	str	r0, [r4, #8]
 800a45c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a460:	f7ff fb12 	bl	8009a88 <memset>
 800a464:	4620      	mov	r0, r4
 800a466:	bd70      	pop	{r4, r5, r6, pc}

0800a468 <__sfp_lock_acquire>:
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <__sfp_lock_acquire+0x8>)
 800a46a:	f000 b8b3 	b.w	800a5d4 <__retarget_lock_acquire_recursive>
 800a46e:	bf00      	nop
 800a470:	20000d29 	.word	0x20000d29

0800a474 <__sfp_lock_release>:
 800a474:	4801      	ldr	r0, [pc, #4]	; (800a47c <__sfp_lock_release+0x8>)
 800a476:	f000 b8ae 	b.w	800a5d6 <__retarget_lock_release_recursive>
 800a47a:	bf00      	nop
 800a47c:	20000d29 	.word	0x20000d29

0800a480 <__sinit_lock_acquire>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__sinit_lock_acquire+0x8>)
 800a482:	f000 b8a7 	b.w	800a5d4 <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	20000d2a 	.word	0x20000d2a

0800a48c <__sinit_lock_release>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__sinit_lock_release+0x8>)
 800a48e:	f000 b8a2 	b.w	800a5d6 <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	20000d2a 	.word	0x20000d2a

0800a498 <__sinit>:
 800a498:	b510      	push	{r4, lr}
 800a49a:	4604      	mov	r4, r0
 800a49c:	f7ff fff0 	bl	800a480 <__sinit_lock_acquire>
 800a4a0:	69a3      	ldr	r3, [r4, #24]
 800a4a2:	b11b      	cbz	r3, 800a4ac <__sinit+0x14>
 800a4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a8:	f7ff bff0 	b.w	800a48c <__sinit_lock_release>
 800a4ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4b0:	6523      	str	r3, [r4, #80]	; 0x50
 800a4b2:	4b13      	ldr	r3, [pc, #76]	; (800a500 <__sinit+0x68>)
 800a4b4:	4a13      	ldr	r2, [pc, #76]	; (800a504 <__sinit+0x6c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4ba:	42a3      	cmp	r3, r4
 800a4bc:	bf04      	itt	eq
 800a4be:	2301      	moveq	r3, #1
 800a4c0:	61a3      	streq	r3, [r4, #24]
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 f820 	bl	800a508 <__sfp>
 800a4c8:	6060      	str	r0, [r4, #4]
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f81c 	bl	800a508 <__sfp>
 800a4d0:	60a0      	str	r0, [r4, #8]
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 f818 	bl	800a508 <__sfp>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	60e0      	str	r0, [r4, #12]
 800a4dc:	2104      	movs	r1, #4
 800a4de:	6860      	ldr	r0, [r4, #4]
 800a4e0:	f7ff ff82 	bl	800a3e8 <std>
 800a4e4:	68a0      	ldr	r0, [r4, #8]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	2109      	movs	r1, #9
 800a4ea:	f7ff ff7d 	bl	800a3e8 <std>
 800a4ee:	68e0      	ldr	r0, [r4, #12]
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	2112      	movs	r1, #18
 800a4f4:	f7ff ff78 	bl	800a3e8 <std>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	61a3      	str	r3, [r4, #24]
 800a4fc:	e7d2      	b.n	800a4a4 <__sinit+0xc>
 800a4fe:	bf00      	nop
 800a500:	0800aea0 	.word	0x0800aea0
 800a504:	0800a431 	.word	0x0800a431

0800a508 <__sfp>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	4607      	mov	r7, r0
 800a50c:	f7ff ffac 	bl	800a468 <__sfp_lock_acquire>
 800a510:	4b1e      	ldr	r3, [pc, #120]	; (800a58c <__sfp+0x84>)
 800a512:	681e      	ldr	r6, [r3, #0]
 800a514:	69b3      	ldr	r3, [r6, #24]
 800a516:	b913      	cbnz	r3, 800a51e <__sfp+0x16>
 800a518:	4630      	mov	r0, r6
 800a51a:	f7ff ffbd 	bl	800a498 <__sinit>
 800a51e:	3648      	adds	r6, #72	; 0x48
 800a520:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a524:	3b01      	subs	r3, #1
 800a526:	d503      	bpl.n	800a530 <__sfp+0x28>
 800a528:	6833      	ldr	r3, [r6, #0]
 800a52a:	b30b      	cbz	r3, 800a570 <__sfp+0x68>
 800a52c:	6836      	ldr	r6, [r6, #0]
 800a52e:	e7f7      	b.n	800a520 <__sfp+0x18>
 800a530:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a534:	b9d5      	cbnz	r5, 800a56c <__sfp+0x64>
 800a536:	4b16      	ldr	r3, [pc, #88]	; (800a590 <__sfp+0x88>)
 800a538:	60e3      	str	r3, [r4, #12]
 800a53a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a53e:	6665      	str	r5, [r4, #100]	; 0x64
 800a540:	f000 f847 	bl	800a5d2 <__retarget_lock_init_recursive>
 800a544:	f7ff ff96 	bl	800a474 <__sfp_lock_release>
 800a548:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a54c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a550:	6025      	str	r5, [r4, #0]
 800a552:	61a5      	str	r5, [r4, #24]
 800a554:	2208      	movs	r2, #8
 800a556:	4629      	mov	r1, r5
 800a558:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a55c:	f7ff fa94 	bl	8009a88 <memset>
 800a560:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a564:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a568:	4620      	mov	r0, r4
 800a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a56c:	3468      	adds	r4, #104	; 0x68
 800a56e:	e7d9      	b.n	800a524 <__sfp+0x1c>
 800a570:	2104      	movs	r1, #4
 800a572:	4638      	mov	r0, r7
 800a574:	f7ff ff62 	bl	800a43c <__sfmoreglue>
 800a578:	4604      	mov	r4, r0
 800a57a:	6030      	str	r0, [r6, #0]
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d1d5      	bne.n	800a52c <__sfp+0x24>
 800a580:	f7ff ff78 	bl	800a474 <__sfp_lock_release>
 800a584:	230c      	movs	r3, #12
 800a586:	603b      	str	r3, [r7, #0]
 800a588:	e7ee      	b.n	800a568 <__sfp+0x60>
 800a58a:	bf00      	nop
 800a58c:	0800aea0 	.word	0x0800aea0
 800a590:	ffff0001 	.word	0xffff0001

0800a594 <_fwalk_reent>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	4606      	mov	r6, r0
 800a59a:	4688      	mov	r8, r1
 800a59c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5a0:	2700      	movs	r7, #0
 800a5a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5a6:	f1b9 0901 	subs.w	r9, r9, #1
 800a5aa:	d505      	bpl.n	800a5b8 <_fwalk_reent+0x24>
 800a5ac:	6824      	ldr	r4, [r4, #0]
 800a5ae:	2c00      	cmp	r4, #0
 800a5b0:	d1f7      	bne.n	800a5a2 <_fwalk_reent+0xe>
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b8:	89ab      	ldrh	r3, [r5, #12]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d907      	bls.n	800a5ce <_fwalk_reent+0x3a>
 800a5be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	d003      	beq.n	800a5ce <_fwalk_reent+0x3a>
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	47c0      	blx	r8
 800a5cc:	4307      	orrs	r7, r0
 800a5ce:	3568      	adds	r5, #104	; 0x68
 800a5d0:	e7e9      	b.n	800a5a6 <_fwalk_reent+0x12>

0800a5d2 <__retarget_lock_init_recursive>:
 800a5d2:	4770      	bx	lr

0800a5d4 <__retarget_lock_acquire_recursive>:
 800a5d4:	4770      	bx	lr

0800a5d6 <__retarget_lock_release_recursive>:
 800a5d6:	4770      	bx	lr

0800a5d8 <__swhatbuf_r>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	460e      	mov	r6, r1
 800a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	b096      	sub	sp, #88	; 0x58
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	461d      	mov	r5, r3
 800a5e8:	da08      	bge.n	800a5fc <__swhatbuf_r+0x24>
 800a5ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	602a      	str	r2, [r5, #0]
 800a5f2:	061a      	lsls	r2, r3, #24
 800a5f4:	d410      	bmi.n	800a618 <__swhatbuf_r+0x40>
 800a5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5fa:	e00e      	b.n	800a61a <__swhatbuf_r+0x42>
 800a5fc:	466a      	mov	r2, sp
 800a5fe:	f000 f9ef 	bl	800a9e0 <_fstat_r>
 800a602:	2800      	cmp	r0, #0
 800a604:	dbf1      	blt.n	800a5ea <__swhatbuf_r+0x12>
 800a606:	9a01      	ldr	r2, [sp, #4]
 800a608:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a60c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a610:	425a      	negs	r2, r3
 800a612:	415a      	adcs	r2, r3
 800a614:	602a      	str	r2, [r5, #0]
 800a616:	e7ee      	b.n	800a5f6 <__swhatbuf_r+0x1e>
 800a618:	2340      	movs	r3, #64	; 0x40
 800a61a:	2000      	movs	r0, #0
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	b016      	add	sp, #88	; 0x58
 800a620:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a624 <__smakebuf_r>:
 800a624:	898b      	ldrh	r3, [r1, #12]
 800a626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a628:	079d      	lsls	r5, r3, #30
 800a62a:	4606      	mov	r6, r0
 800a62c:	460c      	mov	r4, r1
 800a62e:	d507      	bpl.n	800a640 <__smakebuf_r+0x1c>
 800a630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	6123      	str	r3, [r4, #16]
 800a638:	2301      	movs	r3, #1
 800a63a:	6163      	str	r3, [r4, #20]
 800a63c:	b002      	add	sp, #8
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	ab01      	add	r3, sp, #4
 800a642:	466a      	mov	r2, sp
 800a644:	f7ff ffc8 	bl	800a5d8 <__swhatbuf_r>
 800a648:	9900      	ldr	r1, [sp, #0]
 800a64a:	4605      	mov	r5, r0
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f895 	bl	800a77c <_malloc_r>
 800a652:	b948      	cbnz	r0, 800a668 <__smakebuf_r+0x44>
 800a654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a658:	059a      	lsls	r2, r3, #22
 800a65a:	d4ef      	bmi.n	800a63c <__smakebuf_r+0x18>
 800a65c:	f023 0303 	bic.w	r3, r3, #3
 800a660:	f043 0302 	orr.w	r3, r3, #2
 800a664:	81a3      	strh	r3, [r4, #12]
 800a666:	e7e3      	b.n	800a630 <__smakebuf_r+0xc>
 800a668:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <__smakebuf_r+0x7c>)
 800a66a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	6020      	str	r0, [r4, #0]
 800a670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	6163      	str	r3, [r4, #20]
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	6120      	str	r0, [r4, #16]
 800a67e:	b15b      	cbz	r3, 800a698 <__smakebuf_r+0x74>
 800a680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a684:	4630      	mov	r0, r6
 800a686:	f000 f9bd 	bl	800aa04 <_isatty_r>
 800a68a:	b128      	cbz	r0, 800a698 <__smakebuf_r+0x74>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	f043 0301 	orr.w	r3, r3, #1
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	89a0      	ldrh	r0, [r4, #12]
 800a69a:	4305      	orrs	r5, r0
 800a69c:	81a5      	strh	r5, [r4, #12]
 800a69e:	e7cd      	b.n	800a63c <__smakebuf_r+0x18>
 800a6a0:	0800a431 	.word	0x0800a431

0800a6a4 <_free_r>:
 800a6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6a6:	2900      	cmp	r1, #0
 800a6a8:	d044      	beq.n	800a734 <_free_r+0x90>
 800a6aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ae:	9001      	str	r0, [sp, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a6b6:	bfb8      	it	lt
 800a6b8:	18e4      	addlt	r4, r4, r3
 800a6ba:	f000 f9c5 	bl	800aa48 <__malloc_lock>
 800a6be:	4a1e      	ldr	r2, [pc, #120]	; (800a738 <_free_r+0x94>)
 800a6c0:	9801      	ldr	r0, [sp, #4]
 800a6c2:	6813      	ldr	r3, [r2, #0]
 800a6c4:	b933      	cbnz	r3, 800a6d4 <_free_r+0x30>
 800a6c6:	6063      	str	r3, [r4, #4]
 800a6c8:	6014      	str	r4, [r2, #0]
 800a6ca:	b003      	add	sp, #12
 800a6cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6d0:	f000 b9c0 	b.w	800aa54 <__malloc_unlock>
 800a6d4:	42a3      	cmp	r3, r4
 800a6d6:	d908      	bls.n	800a6ea <_free_r+0x46>
 800a6d8:	6825      	ldr	r5, [r4, #0]
 800a6da:	1961      	adds	r1, r4, r5
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	bf01      	itttt	eq
 800a6e0:	6819      	ldreq	r1, [r3, #0]
 800a6e2:	685b      	ldreq	r3, [r3, #4]
 800a6e4:	1949      	addeq	r1, r1, r5
 800a6e6:	6021      	streq	r1, [r4, #0]
 800a6e8:	e7ed      	b.n	800a6c6 <_free_r+0x22>
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	b10b      	cbz	r3, 800a6f4 <_free_r+0x50>
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	d9fa      	bls.n	800a6ea <_free_r+0x46>
 800a6f4:	6811      	ldr	r1, [r2, #0]
 800a6f6:	1855      	adds	r5, r2, r1
 800a6f8:	42a5      	cmp	r5, r4
 800a6fa:	d10b      	bne.n	800a714 <_free_r+0x70>
 800a6fc:	6824      	ldr	r4, [r4, #0]
 800a6fe:	4421      	add	r1, r4
 800a700:	1854      	adds	r4, r2, r1
 800a702:	42a3      	cmp	r3, r4
 800a704:	6011      	str	r1, [r2, #0]
 800a706:	d1e0      	bne.n	800a6ca <_free_r+0x26>
 800a708:	681c      	ldr	r4, [r3, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	6053      	str	r3, [r2, #4]
 800a70e:	4421      	add	r1, r4
 800a710:	6011      	str	r1, [r2, #0]
 800a712:	e7da      	b.n	800a6ca <_free_r+0x26>
 800a714:	d902      	bls.n	800a71c <_free_r+0x78>
 800a716:	230c      	movs	r3, #12
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	e7d6      	b.n	800a6ca <_free_r+0x26>
 800a71c:	6825      	ldr	r5, [r4, #0]
 800a71e:	1961      	adds	r1, r4, r5
 800a720:	428b      	cmp	r3, r1
 800a722:	bf04      	itt	eq
 800a724:	6819      	ldreq	r1, [r3, #0]
 800a726:	685b      	ldreq	r3, [r3, #4]
 800a728:	6063      	str	r3, [r4, #4]
 800a72a:	bf04      	itt	eq
 800a72c:	1949      	addeq	r1, r1, r5
 800a72e:	6021      	streq	r1, [r4, #0]
 800a730:	6054      	str	r4, [r2, #4]
 800a732:	e7ca      	b.n	800a6ca <_free_r+0x26>
 800a734:	b003      	add	sp, #12
 800a736:	bd30      	pop	{r4, r5, pc}
 800a738:	20000d2c 	.word	0x20000d2c

0800a73c <sbrk_aligned>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	4e0e      	ldr	r6, [pc, #56]	; (800a778 <sbrk_aligned+0x3c>)
 800a740:	460c      	mov	r4, r1
 800a742:	6831      	ldr	r1, [r6, #0]
 800a744:	4605      	mov	r5, r0
 800a746:	b911      	cbnz	r1, 800a74e <sbrk_aligned+0x12>
 800a748:	f000 f8d4 	bl	800a8f4 <_sbrk_r>
 800a74c:	6030      	str	r0, [r6, #0]
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f000 f8cf 	bl	800a8f4 <_sbrk_r>
 800a756:	1c43      	adds	r3, r0, #1
 800a758:	d00a      	beq.n	800a770 <sbrk_aligned+0x34>
 800a75a:	1cc4      	adds	r4, r0, #3
 800a75c:	f024 0403 	bic.w	r4, r4, #3
 800a760:	42a0      	cmp	r0, r4
 800a762:	d007      	beq.n	800a774 <sbrk_aligned+0x38>
 800a764:	1a21      	subs	r1, r4, r0
 800a766:	4628      	mov	r0, r5
 800a768:	f000 f8c4 	bl	800a8f4 <_sbrk_r>
 800a76c:	3001      	adds	r0, #1
 800a76e:	d101      	bne.n	800a774 <sbrk_aligned+0x38>
 800a770:	f04f 34ff 	mov.w	r4, #4294967295
 800a774:	4620      	mov	r0, r4
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	20000d30 	.word	0x20000d30

0800a77c <_malloc_r>:
 800a77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a780:	1ccd      	adds	r5, r1, #3
 800a782:	f025 0503 	bic.w	r5, r5, #3
 800a786:	3508      	adds	r5, #8
 800a788:	2d0c      	cmp	r5, #12
 800a78a:	bf38      	it	cc
 800a78c:	250c      	movcc	r5, #12
 800a78e:	2d00      	cmp	r5, #0
 800a790:	4607      	mov	r7, r0
 800a792:	db01      	blt.n	800a798 <_malloc_r+0x1c>
 800a794:	42a9      	cmp	r1, r5
 800a796:	d905      	bls.n	800a7a4 <_malloc_r+0x28>
 800a798:	230c      	movs	r3, #12
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	2600      	movs	r6, #0
 800a79e:	4630      	mov	r0, r6
 800a7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a4:	4e2e      	ldr	r6, [pc, #184]	; (800a860 <_malloc_r+0xe4>)
 800a7a6:	f000 f94f 	bl	800aa48 <__malloc_lock>
 800a7aa:	6833      	ldr	r3, [r6, #0]
 800a7ac:	461c      	mov	r4, r3
 800a7ae:	bb34      	cbnz	r4, 800a7fe <_malloc_r+0x82>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	f7ff ffc2 	bl	800a73c <sbrk_aligned>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	d14d      	bne.n	800a85a <_malloc_r+0xde>
 800a7be:	6834      	ldr	r4, [r6, #0]
 800a7c0:	4626      	mov	r6, r4
 800a7c2:	2e00      	cmp	r6, #0
 800a7c4:	d140      	bne.n	800a848 <_malloc_r+0xcc>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	eb04 0803 	add.w	r8, r4, r3
 800a7d0:	f000 f890 	bl	800a8f4 <_sbrk_r>
 800a7d4:	4580      	cmp	r8, r0
 800a7d6:	d13a      	bne.n	800a84e <_malloc_r+0xd2>
 800a7d8:	6821      	ldr	r1, [r4, #0]
 800a7da:	3503      	adds	r5, #3
 800a7dc:	1a6d      	subs	r5, r5, r1
 800a7de:	f025 0503 	bic.w	r5, r5, #3
 800a7e2:	3508      	adds	r5, #8
 800a7e4:	2d0c      	cmp	r5, #12
 800a7e6:	bf38      	it	cc
 800a7e8:	250c      	movcc	r5, #12
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f7ff ffa5 	bl	800a73c <sbrk_aligned>
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d02b      	beq.n	800a84e <_malloc_r+0xd2>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	442b      	add	r3, r5
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	e00e      	b.n	800a81c <_malloc_r+0xa0>
 800a7fe:	6822      	ldr	r2, [r4, #0]
 800a800:	1b52      	subs	r2, r2, r5
 800a802:	d41e      	bmi.n	800a842 <_malloc_r+0xc6>
 800a804:	2a0b      	cmp	r2, #11
 800a806:	d916      	bls.n	800a836 <_malloc_r+0xba>
 800a808:	1961      	adds	r1, r4, r5
 800a80a:	42a3      	cmp	r3, r4
 800a80c:	6025      	str	r5, [r4, #0]
 800a80e:	bf18      	it	ne
 800a810:	6059      	strne	r1, [r3, #4]
 800a812:	6863      	ldr	r3, [r4, #4]
 800a814:	bf08      	it	eq
 800a816:	6031      	streq	r1, [r6, #0]
 800a818:	5162      	str	r2, [r4, r5]
 800a81a:	604b      	str	r3, [r1, #4]
 800a81c:	4638      	mov	r0, r7
 800a81e:	f104 060b 	add.w	r6, r4, #11
 800a822:	f000 f917 	bl	800aa54 <__malloc_unlock>
 800a826:	f026 0607 	bic.w	r6, r6, #7
 800a82a:	1d23      	adds	r3, r4, #4
 800a82c:	1af2      	subs	r2, r6, r3
 800a82e:	d0b6      	beq.n	800a79e <_malloc_r+0x22>
 800a830:	1b9b      	subs	r3, r3, r6
 800a832:	50a3      	str	r3, [r4, r2]
 800a834:	e7b3      	b.n	800a79e <_malloc_r+0x22>
 800a836:	6862      	ldr	r2, [r4, #4]
 800a838:	42a3      	cmp	r3, r4
 800a83a:	bf0c      	ite	eq
 800a83c:	6032      	streq	r2, [r6, #0]
 800a83e:	605a      	strne	r2, [r3, #4]
 800a840:	e7ec      	b.n	800a81c <_malloc_r+0xa0>
 800a842:	4623      	mov	r3, r4
 800a844:	6864      	ldr	r4, [r4, #4]
 800a846:	e7b2      	b.n	800a7ae <_malloc_r+0x32>
 800a848:	4634      	mov	r4, r6
 800a84a:	6876      	ldr	r6, [r6, #4]
 800a84c:	e7b9      	b.n	800a7c2 <_malloc_r+0x46>
 800a84e:	230c      	movs	r3, #12
 800a850:	603b      	str	r3, [r7, #0]
 800a852:	4638      	mov	r0, r7
 800a854:	f000 f8fe 	bl	800aa54 <__malloc_unlock>
 800a858:	e7a1      	b.n	800a79e <_malloc_r+0x22>
 800a85a:	6025      	str	r5, [r4, #0]
 800a85c:	e7de      	b.n	800a81c <_malloc_r+0xa0>
 800a85e:	bf00      	nop
 800a860:	20000d2c 	.word	0x20000d2c

0800a864 <_putc_r>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	460d      	mov	r5, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	4606      	mov	r6, r0
 800a86c:	b118      	cbz	r0, 800a876 <_putc_r+0x12>
 800a86e:	6983      	ldr	r3, [r0, #24]
 800a870:	b90b      	cbnz	r3, 800a876 <_putc_r+0x12>
 800a872:	f7ff fe11 	bl	800a498 <__sinit>
 800a876:	4b1c      	ldr	r3, [pc, #112]	; (800a8e8 <_putc_r+0x84>)
 800a878:	429c      	cmp	r4, r3
 800a87a:	d124      	bne.n	800a8c6 <_putc_r+0x62>
 800a87c:	6874      	ldr	r4, [r6, #4]
 800a87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a880:	07d8      	lsls	r0, r3, #31
 800a882:	d405      	bmi.n	800a890 <_putc_r+0x2c>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	0599      	lsls	r1, r3, #22
 800a888:	d402      	bmi.n	800a890 <_putc_r+0x2c>
 800a88a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a88c:	f7ff fea2 	bl	800a5d4 <__retarget_lock_acquire_recursive>
 800a890:	68a3      	ldr	r3, [r4, #8]
 800a892:	3b01      	subs	r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	60a3      	str	r3, [r4, #8]
 800a898:	da05      	bge.n	800a8a6 <_putc_r+0x42>
 800a89a:	69a2      	ldr	r2, [r4, #24]
 800a89c:	4293      	cmp	r3, r2
 800a89e:	db1c      	blt.n	800a8da <_putc_r+0x76>
 800a8a0:	b2eb      	uxtb	r3, r5
 800a8a2:	2b0a      	cmp	r3, #10
 800a8a4:	d019      	beq.n	800a8da <_putc_r+0x76>
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	6022      	str	r2, [r4, #0]
 800a8ac:	701d      	strb	r5, [r3, #0]
 800a8ae:	b2ed      	uxtb	r5, r5
 800a8b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b2:	07da      	lsls	r2, r3, #31
 800a8b4:	d405      	bmi.n	800a8c2 <_putc_r+0x5e>
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	059b      	lsls	r3, r3, #22
 800a8ba:	d402      	bmi.n	800a8c2 <_putc_r+0x5e>
 800a8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8be:	f7ff fe8a 	bl	800a5d6 <__retarget_lock_release_recursive>
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <_putc_r+0x88>)
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	d101      	bne.n	800a8d0 <_putc_r+0x6c>
 800a8cc:	68b4      	ldr	r4, [r6, #8]
 800a8ce:	e7d6      	b.n	800a87e <_putc_r+0x1a>
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <_putc_r+0x8c>)
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	bf08      	it	eq
 800a8d6:	68f4      	ldreq	r4, [r6, #12]
 800a8d8:	e7d1      	b.n	800a87e <_putc_r+0x1a>
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff fc00 	bl	800a0e4 <__swbuf_r>
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	e7e3      	b.n	800a8b0 <_putc_r+0x4c>
 800a8e8:	0800aef8 	.word	0x0800aef8
 800a8ec:	0800af18 	.word	0x0800af18
 800a8f0:	0800aed8 	.word	0x0800aed8

0800a8f4 <_sbrk_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	; (800a910 <_sbrk_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f6 fb78 	bl	8000ff4 <_sbrk>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_sbrk_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_sbrk_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20000d34 	.word	0x20000d34

0800a914 <__sread>:
 800a914:	b510      	push	{r4, lr}
 800a916:	460c      	mov	r4, r1
 800a918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91c:	f000 f8a0 	bl	800aa60 <_read_r>
 800a920:	2800      	cmp	r0, #0
 800a922:	bfab      	itete	ge
 800a924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a926:	89a3      	ldrhlt	r3, [r4, #12]
 800a928:	181b      	addge	r3, r3, r0
 800a92a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a92e:	bfac      	ite	ge
 800a930:	6563      	strge	r3, [r4, #84]	; 0x54
 800a932:	81a3      	strhlt	r3, [r4, #12]
 800a934:	bd10      	pop	{r4, pc}

0800a936 <__swrite>:
 800a936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93a:	461f      	mov	r7, r3
 800a93c:	898b      	ldrh	r3, [r1, #12]
 800a93e:	05db      	lsls	r3, r3, #23
 800a940:	4605      	mov	r5, r0
 800a942:	460c      	mov	r4, r1
 800a944:	4616      	mov	r6, r2
 800a946:	d505      	bpl.n	800a954 <__swrite+0x1e>
 800a948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94c:	2302      	movs	r3, #2
 800a94e:	2200      	movs	r2, #0
 800a950:	f000 f868 	bl	800aa24 <_lseek_r>
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a95a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a95e:	81a3      	strh	r3, [r4, #12]
 800a960:	4632      	mov	r2, r6
 800a962:	463b      	mov	r3, r7
 800a964:	4628      	mov	r0, r5
 800a966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a96a:	f000 b817 	b.w	800a99c <_write_r>

0800a96e <__sseek>:
 800a96e:	b510      	push	{r4, lr}
 800a970:	460c      	mov	r4, r1
 800a972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a976:	f000 f855 	bl	800aa24 <_lseek_r>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	bf15      	itete	ne
 800a980:	6560      	strne	r0, [r4, #84]	; 0x54
 800a982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a98a:	81a3      	strheq	r3, [r4, #12]
 800a98c:	bf18      	it	ne
 800a98e:	81a3      	strhne	r3, [r4, #12]
 800a990:	bd10      	pop	{r4, pc}

0800a992 <__sclose>:
 800a992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a996:	f000 b813 	b.w	800a9c0 <_close_r>
	...

0800a99c <_write_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d07      	ldr	r5, [pc, #28]	; (800a9bc <_write_r+0x20>)
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	602a      	str	r2, [r5, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	f7f6 fad1 	bl	8000f52 <_write>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_write_r+0x1e>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_write_r+0x1e>
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	20000d34 	.word	0x20000d34

0800a9c0 <_close_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d06      	ldr	r5, [pc, #24]	; (800a9dc <_close_r+0x1c>)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f7f6 fadd 	bl	8000f8a <_close>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_close_r+0x1a>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_close_r+0x1a>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	20000d34 	.word	0x20000d34

0800a9e0 <_fstat_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d07      	ldr	r5, [pc, #28]	; (800aa00 <_fstat_r+0x20>)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	4608      	mov	r0, r1
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	f7f6 fad8 	bl	8000fa2 <_fstat>
 800a9f2:	1c43      	adds	r3, r0, #1
 800a9f4:	d102      	bne.n	800a9fc <_fstat_r+0x1c>
 800a9f6:	682b      	ldr	r3, [r5, #0]
 800a9f8:	b103      	cbz	r3, 800a9fc <_fstat_r+0x1c>
 800a9fa:	6023      	str	r3, [r4, #0]
 800a9fc:	bd38      	pop	{r3, r4, r5, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000d34 	.word	0x20000d34

0800aa04 <_isatty_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d06      	ldr	r5, [pc, #24]	; (800aa20 <_isatty_r+0x1c>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f7f6 fad7 	bl	8000fc2 <_isatty>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_isatty_r+0x1a>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_isatty_r+0x1a>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	20000d34 	.word	0x20000d34

0800aa24 <_lseek_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d07      	ldr	r5, [pc, #28]	; (800aa44 <_lseek_r+0x20>)
 800aa28:	4604      	mov	r4, r0
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	602a      	str	r2, [r5, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f7f6 fad0 	bl	8000fd8 <_lseek>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d102      	bne.n	800aa42 <_lseek_r+0x1e>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b103      	cbz	r3, 800aa42 <_lseek_r+0x1e>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	20000d34 	.word	0x20000d34

0800aa48 <__malloc_lock>:
 800aa48:	4801      	ldr	r0, [pc, #4]	; (800aa50 <__malloc_lock+0x8>)
 800aa4a:	f7ff bdc3 	b.w	800a5d4 <__retarget_lock_acquire_recursive>
 800aa4e:	bf00      	nop
 800aa50:	20000d28 	.word	0x20000d28

0800aa54 <__malloc_unlock>:
 800aa54:	4801      	ldr	r0, [pc, #4]	; (800aa5c <__malloc_unlock+0x8>)
 800aa56:	f7ff bdbe 	b.w	800a5d6 <__retarget_lock_release_recursive>
 800aa5a:	bf00      	nop
 800aa5c:	20000d28 	.word	0x20000d28

0800aa60 <_read_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d07      	ldr	r5, [pc, #28]	; (800aa80 <_read_r+0x20>)
 800aa64:	4604      	mov	r4, r0
 800aa66:	4608      	mov	r0, r1
 800aa68:	4611      	mov	r1, r2
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	602a      	str	r2, [r5, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f7f6 fa52 	bl	8000f18 <_read>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_read_r+0x1e>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_read_r+0x1e>
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	20000d34 	.word	0x20000d34

0800aa84 <_init>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	bf00      	nop
 800aa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8a:	bc08      	pop	{r3}
 800aa8c:	469e      	mov	lr, r3
 800aa8e:	4770      	bx	lr

0800aa90 <_fini>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	bf00      	nop
 800aa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa96:	bc08      	pop	{r3}
 800aa98:	469e      	mov	lr, r3
 800aa9a:	4770      	bx	lr
